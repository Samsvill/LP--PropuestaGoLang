Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    DIV
    DQMARK
    ELSE
    FALLTHROUGH
    MENOS
    MUL
    RANGE

Grammar

Rule 0     S' -> bloqueI
Rule 1     bloqueI -> instrucciones
Rule 2     bloqueI -> instrucciones bloqueI
Rule 3     instrucciones -> impresion
Rule 4     instrucciones -> for
Rule 5     instrucciones -> for2
Rule 6     instrucciones -> for3
Rule 7     instrucciones -> mapa
Rule 8     instrucciones -> si
Rule 9     instrucciones -> array
Rule 10    instrucciones -> funcion
Rule 11    instrucciones -> concatDatos
Rule 12    instrucciones -> ArraySemantica
Rule 13    instrucciones -> switchh
Rule 14    instrucciones -> asignaciones
Rule 15    instrucciones -> expresionCondicion
Rule 16    impresion -> PRINT LPAREN dato RPAREN
Rule 17    impresion -> PRINTLN LPAREN dato RPAREN
Rule 18    dato -> INT
Rule 19    dato -> STRING
Rule 20    dato -> FLOAT
Rule 21    dato -> VARIABLE
Rule 22    for -> FOR VARIABLE FASTDEC INT PUNTO_COMA VARIABLE sigcomparacion INT PUNTO_COMA VARIABLE incremento LCBRACKET bloqueI RCBRACKET
Rule 23    for2 -> FOR comparacionF LCBRACKET bloqueI RCBRACKET
Rule 24    for3 -> FOR LCBRACKET bloqueI RCBRACKET
Rule 25    incremento -> MASMAS
Rule 26    incremento -> MENOSMENOS
Rule 27    sigcomparacion -> MENORQUE
Rule 28    sigcomparacion -> MAYORQUE
Rule 29    sigcomparacion -> DIFERENTE
Rule 30    sigcomparacion -> COMPARA_IGUAL
Rule 31    sigcomparacion -> MAYORIGUAL
Rule 32    sigcomparacion -> MENORIGUAL
Rule 33    comparacionF -> dato sigcomparacion dato
Rule 34    array -> VAR VARIABLE EQUALS LBRACKET INT RBRACKET TDATA LCBRACKET elementArray RCBRACKET
Rule 35    array -> VARIABLE FASTDEC LBRACKET INT RBRACKET TDATA LCBRACKET elementArray RCBRACKET
Rule 36    elementArray -> dato
Rule 37    elementArray -> dato COMMA elementArray
Rule 38    funcion -> funSimple
Rule 39    funcion -> funcPa
Rule 40    funcion -> funcRetorno
Rule 41    funcion -> funcCompleta
Rule 42    funSimple -> FUNC nombreFuncion LPAREN RPAREN LCBRACKET bloqueI RCBRACKET
Rule 43    funcPa -> FUNC nombreFuncion LPAREN parametrosF RPAREN LCBRACKET bloqueI RCBRACKET
Rule 44    funcRetorno -> FUNC nombreFuncion LPAREN RPAREN LPAREN datoReturn RPAREN LCBRACKET bloqueI returnF RCBRACKET
Rule 45    funcCompleta -> FUNC nombreFuncion LPAREN parametrosF RPAREN LPAREN datoReturn RPAREN LCBRACKET bloqueI returnF RCBRACKET
Rule 46    nombreFuncion -> VARIABLE
Rule 47    parametrosF -> VARIABLE TDATA
Rule 48    parametrosF -> VARIABLE TDATA COMMA parametrosF
Rule 49    datoReturn -> TDATA
Rule 50    datoReturn -> TDATA COMMA TDATA
Rule 51    returnF -> RETURN dato
Rule 52    returnF -> RETURN elementArray
Rule 53    mapa -> VARIABLE EQUALS MAP LBRACKET TDATA RBRACKET TDATA LCBRACKET adentro RCBRACKET
Rule 54    TDATA -> TSTRING
Rule 55    TDATA -> TINT
Rule 56    TDATA -> TFLOAT
Rule 57    adentro -> definicion
Rule 58    adentro -> definicion COMMA adentro
Rule 59    definicion -> dato COLON dato
Rule 60    si -> IF comparacion LCBRACKET instrucciones RCBRACKET
Rule 61    comparacion -> dato sigcomparacion dato
Rule 62    asignaciones -> varsimple
Rule 63    asignaciones -> varobviado
Rule 64    asignaciones -> decfast
Rule 65    varsimple -> VAR VARIABLE TDATA EQUALS dato
Rule 66    varobviado -> VAR VARIABLE EQUALS dato
Rule 67    decfast -> VARIABLE FASTDEC dato
Rule 68    concatDatos -> STRING MAS STRING
Rule 69    concatDatos -> INT MAS INT
Rule 70    ArraySemantica -> VAR VARIABLE EQUALS LBRACKET INT RBRACKET TSTRING LCBRACKET elementStringS RCBRACKET
Rule 71    ArraySemantica -> VARIABLE FASTDEC LBRACKET INT TINT LCBRACKET elementIntS RCBRACKET
Rule 72    elementStringS -> STRING
Rule 73    elementStringS -> STRING COMMA elementStringS
Rule 74    elementIntS -> INT
Rule 75    elementIntS -> INT COMMA elementIntS
Rule 76    expresionCondicion -> VARIABLE FASTDEC comparacion
Rule 77    switchh -> SWITCH VARIABLE LCBRACKET cases def RCBRACKET
Rule 78    cases -> case1
Rule 79    cases -> case1 cases
Rule 80    case1 -> CASE INT COLON instrucciones
Rule 81    def -> DEFAULT COLON instrucciones

Terminals, with rules where they appear

CASE                 : 80
COLON                : 59 80 81
COMMA                : 37 48 50 58 73 75
COMPARA_IGUAL        : 30
DEFAULT              : 81
DIFERENTE            : 29
DIV                  : 
DQMARK               : 
ELSE                 : 
EQUALS               : 34 53 65 66 70
FALLTHROUGH          : 
FASTDEC              : 22 35 67 71 76
FLOAT                : 20
FOR                  : 22 23 24
FUNC                 : 42 43 44 45
IF                   : 60
INT                  : 18 22 22 34 35 69 69 70 71 74 75 80
LBRACKET             : 34 35 53 70 71
LCBRACKET            : 22 23 24 34 35 42 43 44 45 53 60 70 71 77
LPAREN               : 16 17 42 43 44 44 45 45
MAP                  : 53
MAS                  : 68 69
MASMAS               : 25
MAYORIGUAL           : 31
MAYORQUE             : 28
MENORIGUAL           : 32
MENORQUE             : 27
MENOS                : 
MENOSMENOS           : 26
MUL                  : 
PRINT                : 16
PRINTLN              : 17
PUNTO_COMA           : 22 22
RANGE                : 
RBRACKET             : 34 35 53 70
RCBRACKET            : 22 23 24 34 35 42 43 44 45 53 60 70 71 77
RETURN               : 51 52
RPAREN               : 16 17 42 43 44 44 45 45
STRING               : 19 68 68 72 73
SWITCH               : 77
TFLOAT               : 56
TINT                 : 55 71
TSTRING              : 54 70
VAR                  : 34 65 66 70
VARIABLE             : 21 22 22 22 34 35 46 47 48 53 65 66 67 70 71 76 77
error                : 

Nonterminals, with rules where they appear

ArraySemantica       : 12
TDATA                : 34 35 47 48 49 50 50 53 53 65
adentro              : 53 58
array                : 9
asignaciones         : 14
bloqueI              : 2 22 23 24 42 43 44 45 0
case1                : 78 79
cases                : 77 79
comparacion          : 60 76
comparacionF         : 23
concatDatos          : 11
dato                 : 16 17 33 33 36 37 51 59 59 61 61 65 66 67
datoReturn           : 44 45
decfast              : 64
def                  : 77
definicion           : 57 58
elementArray         : 34 35 37 52
elementIntS          : 71 75
elementStringS       : 70 73
expresionCondicion   : 15
for                  : 4
for2                 : 5
for3                 : 6
funSimple            : 38
funcCompleta         : 41
funcPa               : 39
funcRetorno          : 40
funcion              : 10
impresion            : 3
incremento           : 22
instrucciones        : 1 2 60 80 81
mapa                 : 7
nombreFuncion        : 42 43 44 45
parametrosF          : 43 45 48
returnF              : 44 45
si                   : 8
sigcomparacion       : 22 33 61
switchh              : 13
varobviado           : 63
varsimple            : 62

Parsing method: LALR

state 0

    (0) S' -> . bloqueI
    (1) bloqueI -> . instrucciones
    (2) bloqueI -> . instrucciones bloqueI
    (3) instrucciones -> . impresion
    (4) instrucciones -> . for
    (5) instrucciones -> . for2
    (6) instrucciones -> . for3
    (7) instrucciones -> . mapa
    (8) instrucciones -> . si
    (9) instrucciones -> . array
    (10) instrucciones -> . funcion
    (11) instrucciones -> . concatDatos
    (12) instrucciones -> . ArraySemantica
    (13) instrucciones -> . switchh
    (14) instrucciones -> . asignaciones
    (15) instrucciones -> . expresionCondicion
    (16) impresion -> . PRINT LPAREN dato RPAREN
    (17) impresion -> . PRINTLN LPAREN dato RPAREN
    (22) for -> . FOR VARIABLE FASTDEC INT PUNTO_COMA VARIABLE sigcomparacion INT PUNTO_COMA VARIABLE incremento LCBRACKET bloqueI RCBRACKET
    (23) for2 -> . FOR comparacionF LCBRACKET bloqueI RCBRACKET
    (24) for3 -> . FOR LCBRACKET bloqueI RCBRACKET
    (53) mapa -> . VARIABLE EQUALS MAP LBRACKET TDATA RBRACKET TDATA LCBRACKET adentro RCBRACKET
    (60) si -> . IF comparacion LCBRACKET instrucciones RCBRACKET
    (34) array -> . VAR VARIABLE EQUALS LBRACKET INT RBRACKET TDATA LCBRACKET elementArray RCBRACKET
    (35) array -> . VARIABLE FASTDEC LBRACKET INT RBRACKET TDATA LCBRACKET elementArray RCBRACKET
    (38) funcion -> . funSimple
    (39) funcion -> . funcPa
    (40) funcion -> . funcRetorno
    (41) funcion -> . funcCompleta
    (68) concatDatos -> . STRING MAS STRING
    (69) concatDatos -> . INT MAS INT
    (70) ArraySemantica -> . VAR VARIABLE EQUALS LBRACKET INT RBRACKET TSTRING LCBRACKET elementStringS RCBRACKET
    (71) ArraySemantica -> . VARIABLE FASTDEC LBRACKET INT TINT LCBRACKET elementIntS RCBRACKET
    (77) switchh -> . SWITCH VARIABLE LCBRACKET cases def RCBRACKET
    (62) asignaciones -> . varsimple
    (63) asignaciones -> . varobviado
    (64) asignaciones -> . decfast
    (76) expresionCondicion -> . VARIABLE FASTDEC comparacion
    (42) funSimple -> . FUNC nombreFuncion LPAREN RPAREN LCBRACKET bloqueI RCBRACKET
    (43) funcPa -> . FUNC nombreFuncion LPAREN parametrosF RPAREN LCBRACKET bloqueI RCBRACKET
    (44) funcRetorno -> . FUNC nombreFuncion LPAREN RPAREN LPAREN datoReturn RPAREN LCBRACKET bloqueI returnF RCBRACKET
    (45) funcCompleta -> . FUNC nombreFuncion LPAREN parametrosF RPAREN LPAREN datoReturn RPAREN LCBRACKET bloqueI returnF RCBRACKET
    (65) varsimple -> . VAR VARIABLE TDATA EQUALS dato
    (66) varobviado -> . VAR VARIABLE EQUALS dato
    (67) decfast -> . VARIABLE FASTDEC dato

    PRINT           shift and go to state 16
    PRINTLN         shift and go to state 17
    FOR             shift and go to state 18
    VARIABLE        shift and go to state 19
    IF              shift and go to state 21
    VAR             shift and go to state 22
    STRING          shift and go to state 27
    INT             shift and go to state 20
    SWITCH          shift and go to state 28
    FUNC            shift and go to state 32

    bloqueI                        shift and go to state 1
    instrucciones                  shift and go to state 2
    impresion                      shift and go to state 3
    for                            shift and go to state 4
    for2                           shift and go to state 5
    for3                           shift and go to state 6
    mapa                           shift and go to state 7
    si                             shift and go to state 8
    array                          shift and go to state 9
    funcion                        shift and go to state 10
    concatDatos                    shift and go to state 11
    ArraySemantica                 shift and go to state 12
    switchh                        shift and go to state 13
    asignaciones                   shift and go to state 14
    expresionCondicion             shift and go to state 15
    funSimple                      shift and go to state 23
    funcPa                         shift and go to state 24
    funcRetorno                    shift and go to state 25
    funcCompleta                   shift and go to state 26
    varsimple                      shift and go to state 29
    varobviado                     shift and go to state 30
    decfast                        shift and go to state 31

state 1

    (0) S' -> bloqueI .



state 2

    (1) bloqueI -> instrucciones .
    (2) bloqueI -> instrucciones . bloqueI
    (1) bloqueI -> . instrucciones
    (2) bloqueI -> . instrucciones bloqueI
    (3) instrucciones -> . impresion
    (4) instrucciones -> . for
    (5) instrucciones -> . for2
    (6) instrucciones -> . for3
    (7) instrucciones -> . mapa
    (8) instrucciones -> . si
    (9) instrucciones -> . array
    (10) instrucciones -> . funcion
    (11) instrucciones -> . concatDatos
    (12) instrucciones -> . ArraySemantica
    (13) instrucciones -> . switchh
    (14) instrucciones -> . asignaciones
    (15) instrucciones -> . expresionCondicion
    (16) impresion -> . PRINT LPAREN dato RPAREN
    (17) impresion -> . PRINTLN LPAREN dato RPAREN
    (22) for -> . FOR VARIABLE FASTDEC INT PUNTO_COMA VARIABLE sigcomparacion INT PUNTO_COMA VARIABLE incremento LCBRACKET bloqueI RCBRACKET
    (23) for2 -> . FOR comparacionF LCBRACKET bloqueI RCBRACKET
    (24) for3 -> . FOR LCBRACKET bloqueI RCBRACKET
    (53) mapa -> . VARIABLE EQUALS MAP LBRACKET TDATA RBRACKET TDATA LCBRACKET adentro RCBRACKET
    (60) si -> . IF comparacion LCBRACKET instrucciones RCBRACKET
    (34) array -> . VAR VARIABLE EQUALS LBRACKET INT RBRACKET TDATA LCBRACKET elementArray RCBRACKET
    (35) array -> . VARIABLE FASTDEC LBRACKET INT RBRACKET TDATA LCBRACKET elementArray RCBRACKET
    (38) funcion -> . funSimple
    (39) funcion -> . funcPa
    (40) funcion -> . funcRetorno
    (41) funcion -> . funcCompleta
    (68) concatDatos -> . STRING MAS STRING
    (69) concatDatos -> . INT MAS INT
    (70) ArraySemantica -> . VAR VARIABLE EQUALS LBRACKET INT RBRACKET TSTRING LCBRACKET elementStringS RCBRACKET
    (71) ArraySemantica -> . VARIABLE FASTDEC LBRACKET INT TINT LCBRACKET elementIntS RCBRACKET
    (77) switchh -> . SWITCH VARIABLE LCBRACKET cases def RCBRACKET
    (62) asignaciones -> . varsimple
    (63) asignaciones -> . varobviado
    (64) asignaciones -> . decfast
    (76) expresionCondicion -> . VARIABLE FASTDEC comparacion
    (42) funSimple -> . FUNC nombreFuncion LPAREN RPAREN LCBRACKET bloqueI RCBRACKET
    (43) funcPa -> . FUNC nombreFuncion LPAREN parametrosF RPAREN LCBRACKET bloqueI RCBRACKET
    (44) funcRetorno -> . FUNC nombreFuncion LPAREN RPAREN LPAREN datoReturn RPAREN LCBRACKET bloqueI returnF RCBRACKET
    (45) funcCompleta -> . FUNC nombreFuncion LPAREN parametrosF RPAREN LPAREN datoReturn RPAREN LCBRACKET bloqueI returnF RCBRACKET
    (65) varsimple -> . VAR VARIABLE TDATA EQUALS dato
    (66) varobviado -> . VAR VARIABLE EQUALS dato
    (67) decfast -> . VARIABLE FASTDEC dato

    $end            reduce using rule 1 (bloqueI -> instrucciones .)
    RCBRACKET       reduce using rule 1 (bloqueI -> instrucciones .)
    RETURN          reduce using rule 1 (bloqueI -> instrucciones .)
    PRINT           shift and go to state 16
    PRINTLN         shift and go to state 17
    FOR             shift and go to state 18
    VARIABLE        shift and go to state 19
    IF              shift and go to state 21
    VAR             shift and go to state 22
    STRING          shift and go to state 27
    INT             shift and go to state 20
    SWITCH          shift and go to state 28
    FUNC            shift and go to state 32

    instrucciones                  shift and go to state 2
    bloqueI                        shift and go to state 33
    impresion                      shift and go to state 3
    for                            shift and go to state 4
    for2                           shift and go to state 5
    for3                           shift and go to state 6
    mapa                           shift and go to state 7
    si                             shift and go to state 8
    array                          shift and go to state 9
    funcion                        shift and go to state 10
    concatDatos                    shift and go to state 11
    ArraySemantica                 shift and go to state 12
    switchh                        shift and go to state 13
    asignaciones                   shift and go to state 14
    expresionCondicion             shift and go to state 15
    funSimple                      shift and go to state 23
    funcPa                         shift and go to state 24
    funcRetorno                    shift and go to state 25
    funcCompleta                   shift and go to state 26
    varsimple                      shift and go to state 29
    varobviado                     shift and go to state 30
    decfast                        shift and go to state 31

state 3

    (3) instrucciones -> impresion .

    PRINT           reduce using rule 3 (instrucciones -> impresion .)
    PRINTLN         reduce using rule 3 (instrucciones -> impresion .)
    FOR             reduce using rule 3 (instrucciones -> impresion .)
    VARIABLE        reduce using rule 3 (instrucciones -> impresion .)
    IF              reduce using rule 3 (instrucciones -> impresion .)
    VAR             reduce using rule 3 (instrucciones -> impresion .)
    STRING          reduce using rule 3 (instrucciones -> impresion .)
    INT             reduce using rule 3 (instrucciones -> impresion .)
    SWITCH          reduce using rule 3 (instrucciones -> impresion .)
    FUNC            reduce using rule 3 (instrucciones -> impresion .)
    $end            reduce using rule 3 (instrucciones -> impresion .)
    RCBRACKET       reduce using rule 3 (instrucciones -> impresion .)
    RETURN          reduce using rule 3 (instrucciones -> impresion .)
    CASE            reduce using rule 3 (instrucciones -> impresion .)
    DEFAULT         reduce using rule 3 (instrucciones -> impresion .)


state 4

    (4) instrucciones -> for .

    PRINT           reduce using rule 4 (instrucciones -> for .)
    PRINTLN         reduce using rule 4 (instrucciones -> for .)
    FOR             reduce using rule 4 (instrucciones -> for .)
    VARIABLE        reduce using rule 4 (instrucciones -> for .)
    IF              reduce using rule 4 (instrucciones -> for .)
    VAR             reduce using rule 4 (instrucciones -> for .)
    STRING          reduce using rule 4 (instrucciones -> for .)
    INT             reduce using rule 4 (instrucciones -> for .)
    SWITCH          reduce using rule 4 (instrucciones -> for .)
    FUNC            reduce using rule 4 (instrucciones -> for .)
    $end            reduce using rule 4 (instrucciones -> for .)
    RCBRACKET       reduce using rule 4 (instrucciones -> for .)
    RETURN          reduce using rule 4 (instrucciones -> for .)
    CASE            reduce using rule 4 (instrucciones -> for .)
    DEFAULT         reduce using rule 4 (instrucciones -> for .)


state 5

    (5) instrucciones -> for2 .

    PRINT           reduce using rule 5 (instrucciones -> for2 .)
    PRINTLN         reduce using rule 5 (instrucciones -> for2 .)
    FOR             reduce using rule 5 (instrucciones -> for2 .)
    VARIABLE        reduce using rule 5 (instrucciones -> for2 .)
    IF              reduce using rule 5 (instrucciones -> for2 .)
    VAR             reduce using rule 5 (instrucciones -> for2 .)
    STRING          reduce using rule 5 (instrucciones -> for2 .)
    INT             reduce using rule 5 (instrucciones -> for2 .)
    SWITCH          reduce using rule 5 (instrucciones -> for2 .)
    FUNC            reduce using rule 5 (instrucciones -> for2 .)
    $end            reduce using rule 5 (instrucciones -> for2 .)
    RCBRACKET       reduce using rule 5 (instrucciones -> for2 .)
    RETURN          reduce using rule 5 (instrucciones -> for2 .)
    CASE            reduce using rule 5 (instrucciones -> for2 .)
    DEFAULT         reduce using rule 5 (instrucciones -> for2 .)


state 6

    (6) instrucciones -> for3 .

    PRINT           reduce using rule 6 (instrucciones -> for3 .)
    PRINTLN         reduce using rule 6 (instrucciones -> for3 .)
    FOR             reduce using rule 6 (instrucciones -> for3 .)
    VARIABLE        reduce using rule 6 (instrucciones -> for3 .)
    IF              reduce using rule 6 (instrucciones -> for3 .)
    VAR             reduce using rule 6 (instrucciones -> for3 .)
    STRING          reduce using rule 6 (instrucciones -> for3 .)
    INT             reduce using rule 6 (instrucciones -> for3 .)
    SWITCH          reduce using rule 6 (instrucciones -> for3 .)
    FUNC            reduce using rule 6 (instrucciones -> for3 .)
    $end            reduce using rule 6 (instrucciones -> for3 .)
    RCBRACKET       reduce using rule 6 (instrucciones -> for3 .)
    RETURN          reduce using rule 6 (instrucciones -> for3 .)
    CASE            reduce using rule 6 (instrucciones -> for3 .)
    DEFAULT         reduce using rule 6 (instrucciones -> for3 .)


state 7

    (7) instrucciones -> mapa .

    PRINT           reduce using rule 7 (instrucciones -> mapa .)
    PRINTLN         reduce using rule 7 (instrucciones -> mapa .)
    FOR             reduce using rule 7 (instrucciones -> mapa .)
    VARIABLE        reduce using rule 7 (instrucciones -> mapa .)
    IF              reduce using rule 7 (instrucciones -> mapa .)
    VAR             reduce using rule 7 (instrucciones -> mapa .)
    STRING          reduce using rule 7 (instrucciones -> mapa .)
    INT             reduce using rule 7 (instrucciones -> mapa .)
    SWITCH          reduce using rule 7 (instrucciones -> mapa .)
    FUNC            reduce using rule 7 (instrucciones -> mapa .)
    $end            reduce using rule 7 (instrucciones -> mapa .)
    RCBRACKET       reduce using rule 7 (instrucciones -> mapa .)
    RETURN          reduce using rule 7 (instrucciones -> mapa .)
    CASE            reduce using rule 7 (instrucciones -> mapa .)
    DEFAULT         reduce using rule 7 (instrucciones -> mapa .)


state 8

    (8) instrucciones -> si .

    PRINT           reduce using rule 8 (instrucciones -> si .)
    PRINTLN         reduce using rule 8 (instrucciones -> si .)
    FOR             reduce using rule 8 (instrucciones -> si .)
    VARIABLE        reduce using rule 8 (instrucciones -> si .)
    IF              reduce using rule 8 (instrucciones -> si .)
    VAR             reduce using rule 8 (instrucciones -> si .)
    STRING          reduce using rule 8 (instrucciones -> si .)
    INT             reduce using rule 8 (instrucciones -> si .)
    SWITCH          reduce using rule 8 (instrucciones -> si .)
    FUNC            reduce using rule 8 (instrucciones -> si .)
    $end            reduce using rule 8 (instrucciones -> si .)
    RCBRACKET       reduce using rule 8 (instrucciones -> si .)
    RETURN          reduce using rule 8 (instrucciones -> si .)
    CASE            reduce using rule 8 (instrucciones -> si .)
    DEFAULT         reduce using rule 8 (instrucciones -> si .)


state 9

    (9) instrucciones -> array .

    PRINT           reduce using rule 9 (instrucciones -> array .)
    PRINTLN         reduce using rule 9 (instrucciones -> array .)
    FOR             reduce using rule 9 (instrucciones -> array .)
    VARIABLE        reduce using rule 9 (instrucciones -> array .)
    IF              reduce using rule 9 (instrucciones -> array .)
    VAR             reduce using rule 9 (instrucciones -> array .)
    STRING          reduce using rule 9 (instrucciones -> array .)
    INT             reduce using rule 9 (instrucciones -> array .)
    SWITCH          reduce using rule 9 (instrucciones -> array .)
    FUNC            reduce using rule 9 (instrucciones -> array .)
    $end            reduce using rule 9 (instrucciones -> array .)
    RCBRACKET       reduce using rule 9 (instrucciones -> array .)
    RETURN          reduce using rule 9 (instrucciones -> array .)
    CASE            reduce using rule 9 (instrucciones -> array .)
    DEFAULT         reduce using rule 9 (instrucciones -> array .)


state 10

    (10) instrucciones -> funcion .

    PRINT           reduce using rule 10 (instrucciones -> funcion .)
    PRINTLN         reduce using rule 10 (instrucciones -> funcion .)
    FOR             reduce using rule 10 (instrucciones -> funcion .)
    VARIABLE        reduce using rule 10 (instrucciones -> funcion .)
    IF              reduce using rule 10 (instrucciones -> funcion .)
    VAR             reduce using rule 10 (instrucciones -> funcion .)
    STRING          reduce using rule 10 (instrucciones -> funcion .)
    INT             reduce using rule 10 (instrucciones -> funcion .)
    SWITCH          reduce using rule 10 (instrucciones -> funcion .)
    FUNC            reduce using rule 10 (instrucciones -> funcion .)
    $end            reduce using rule 10 (instrucciones -> funcion .)
    RCBRACKET       reduce using rule 10 (instrucciones -> funcion .)
    RETURN          reduce using rule 10 (instrucciones -> funcion .)
    CASE            reduce using rule 10 (instrucciones -> funcion .)
    DEFAULT         reduce using rule 10 (instrucciones -> funcion .)


state 11

    (11) instrucciones -> concatDatos .

    PRINT           reduce using rule 11 (instrucciones -> concatDatos .)
    PRINTLN         reduce using rule 11 (instrucciones -> concatDatos .)
    FOR             reduce using rule 11 (instrucciones -> concatDatos .)
    VARIABLE        reduce using rule 11 (instrucciones -> concatDatos .)
    IF              reduce using rule 11 (instrucciones -> concatDatos .)
    VAR             reduce using rule 11 (instrucciones -> concatDatos .)
    STRING          reduce using rule 11 (instrucciones -> concatDatos .)
    INT             reduce using rule 11 (instrucciones -> concatDatos .)
    SWITCH          reduce using rule 11 (instrucciones -> concatDatos .)
    FUNC            reduce using rule 11 (instrucciones -> concatDatos .)
    $end            reduce using rule 11 (instrucciones -> concatDatos .)
    RCBRACKET       reduce using rule 11 (instrucciones -> concatDatos .)
    RETURN          reduce using rule 11 (instrucciones -> concatDatos .)
    CASE            reduce using rule 11 (instrucciones -> concatDatos .)
    DEFAULT         reduce using rule 11 (instrucciones -> concatDatos .)


state 12

    (12) instrucciones -> ArraySemantica .

    PRINT           reduce using rule 12 (instrucciones -> ArraySemantica .)
    PRINTLN         reduce using rule 12 (instrucciones -> ArraySemantica .)
    FOR             reduce using rule 12 (instrucciones -> ArraySemantica .)
    VARIABLE        reduce using rule 12 (instrucciones -> ArraySemantica .)
    IF              reduce using rule 12 (instrucciones -> ArraySemantica .)
    VAR             reduce using rule 12 (instrucciones -> ArraySemantica .)
    STRING          reduce using rule 12 (instrucciones -> ArraySemantica .)
    INT             reduce using rule 12 (instrucciones -> ArraySemantica .)
    SWITCH          reduce using rule 12 (instrucciones -> ArraySemantica .)
    FUNC            reduce using rule 12 (instrucciones -> ArraySemantica .)
    $end            reduce using rule 12 (instrucciones -> ArraySemantica .)
    RCBRACKET       reduce using rule 12 (instrucciones -> ArraySemantica .)
    RETURN          reduce using rule 12 (instrucciones -> ArraySemantica .)
    CASE            reduce using rule 12 (instrucciones -> ArraySemantica .)
    DEFAULT         reduce using rule 12 (instrucciones -> ArraySemantica .)


state 13

    (13) instrucciones -> switchh .

    PRINT           reduce using rule 13 (instrucciones -> switchh .)
    PRINTLN         reduce using rule 13 (instrucciones -> switchh .)
    FOR             reduce using rule 13 (instrucciones -> switchh .)
    VARIABLE        reduce using rule 13 (instrucciones -> switchh .)
    IF              reduce using rule 13 (instrucciones -> switchh .)
    VAR             reduce using rule 13 (instrucciones -> switchh .)
    STRING          reduce using rule 13 (instrucciones -> switchh .)
    INT             reduce using rule 13 (instrucciones -> switchh .)
    SWITCH          reduce using rule 13 (instrucciones -> switchh .)
    FUNC            reduce using rule 13 (instrucciones -> switchh .)
    $end            reduce using rule 13 (instrucciones -> switchh .)
    RCBRACKET       reduce using rule 13 (instrucciones -> switchh .)
    RETURN          reduce using rule 13 (instrucciones -> switchh .)
    CASE            reduce using rule 13 (instrucciones -> switchh .)
    DEFAULT         reduce using rule 13 (instrucciones -> switchh .)


state 14

    (14) instrucciones -> asignaciones .

    PRINT           reduce using rule 14 (instrucciones -> asignaciones .)
    PRINTLN         reduce using rule 14 (instrucciones -> asignaciones .)
    FOR             reduce using rule 14 (instrucciones -> asignaciones .)
    VARIABLE        reduce using rule 14 (instrucciones -> asignaciones .)
    IF              reduce using rule 14 (instrucciones -> asignaciones .)
    VAR             reduce using rule 14 (instrucciones -> asignaciones .)
    STRING          reduce using rule 14 (instrucciones -> asignaciones .)
    INT             reduce using rule 14 (instrucciones -> asignaciones .)
    SWITCH          reduce using rule 14 (instrucciones -> asignaciones .)
    FUNC            reduce using rule 14 (instrucciones -> asignaciones .)
    $end            reduce using rule 14 (instrucciones -> asignaciones .)
    RCBRACKET       reduce using rule 14 (instrucciones -> asignaciones .)
    RETURN          reduce using rule 14 (instrucciones -> asignaciones .)
    CASE            reduce using rule 14 (instrucciones -> asignaciones .)
    DEFAULT         reduce using rule 14 (instrucciones -> asignaciones .)


state 15

    (15) instrucciones -> expresionCondicion .

    PRINT           reduce using rule 15 (instrucciones -> expresionCondicion .)
    PRINTLN         reduce using rule 15 (instrucciones -> expresionCondicion .)
    FOR             reduce using rule 15 (instrucciones -> expresionCondicion .)
    VARIABLE        reduce using rule 15 (instrucciones -> expresionCondicion .)
    IF              reduce using rule 15 (instrucciones -> expresionCondicion .)
    VAR             reduce using rule 15 (instrucciones -> expresionCondicion .)
    STRING          reduce using rule 15 (instrucciones -> expresionCondicion .)
    INT             reduce using rule 15 (instrucciones -> expresionCondicion .)
    SWITCH          reduce using rule 15 (instrucciones -> expresionCondicion .)
    FUNC            reduce using rule 15 (instrucciones -> expresionCondicion .)
    $end            reduce using rule 15 (instrucciones -> expresionCondicion .)
    RCBRACKET       reduce using rule 15 (instrucciones -> expresionCondicion .)
    RETURN          reduce using rule 15 (instrucciones -> expresionCondicion .)
    CASE            reduce using rule 15 (instrucciones -> expresionCondicion .)
    DEFAULT         reduce using rule 15 (instrucciones -> expresionCondicion .)


state 16

    (16) impresion -> PRINT . LPAREN dato RPAREN

    LPAREN          shift and go to state 34


state 17

    (17) impresion -> PRINTLN . LPAREN dato RPAREN

    LPAREN          shift and go to state 35


state 18

    (22) for -> FOR . VARIABLE FASTDEC INT PUNTO_COMA VARIABLE sigcomparacion INT PUNTO_COMA VARIABLE incremento LCBRACKET bloqueI RCBRACKET
    (23) for2 -> FOR . comparacionF LCBRACKET bloqueI RCBRACKET
    (24) for3 -> FOR . LCBRACKET bloqueI RCBRACKET
    (33) comparacionF -> . dato sigcomparacion dato
    (18) dato -> . INT
    (19) dato -> . STRING
    (20) dato -> . FLOAT
    (21) dato -> . VARIABLE

    VARIABLE        shift and go to state 36
    LCBRACKET       shift and go to state 38
    INT             shift and go to state 37
    STRING          shift and go to state 41
    FLOAT           shift and go to state 42

    comparacionF                   shift and go to state 39
    dato                           shift and go to state 40

state 19

    (53) mapa -> VARIABLE . EQUALS MAP LBRACKET TDATA RBRACKET TDATA LCBRACKET adentro RCBRACKET
    (35) array -> VARIABLE . FASTDEC LBRACKET INT RBRACKET TDATA LCBRACKET elementArray RCBRACKET
    (71) ArraySemantica -> VARIABLE . FASTDEC LBRACKET INT TINT LCBRACKET elementIntS RCBRACKET
    (76) expresionCondicion -> VARIABLE . FASTDEC comparacion
    (67) decfast -> VARIABLE . FASTDEC dato

    EQUALS          shift and go to state 43
    FASTDEC         shift and go to state 44


state 20

    (69) concatDatos -> INT . MAS INT

    MAS             shift and go to state 45


state 21

    (60) si -> IF . comparacion LCBRACKET instrucciones RCBRACKET
    (61) comparacion -> . dato sigcomparacion dato
    (18) dato -> . INT
    (19) dato -> . STRING
    (20) dato -> . FLOAT
    (21) dato -> . VARIABLE

    INT             shift and go to state 37
    STRING          shift and go to state 41
    FLOAT           shift and go to state 42
    VARIABLE        shift and go to state 48

    comparacion                    shift and go to state 46
    dato                           shift and go to state 47

state 22

    (34) array -> VAR . VARIABLE EQUALS LBRACKET INT RBRACKET TDATA LCBRACKET elementArray RCBRACKET
    (70) ArraySemantica -> VAR . VARIABLE EQUALS LBRACKET INT RBRACKET TSTRING LCBRACKET elementStringS RCBRACKET
    (65) varsimple -> VAR . VARIABLE TDATA EQUALS dato
    (66) varobviado -> VAR . VARIABLE EQUALS dato

    VARIABLE        shift and go to state 49


state 23

    (38) funcion -> funSimple .

    PRINT           reduce using rule 38 (funcion -> funSimple .)
    PRINTLN         reduce using rule 38 (funcion -> funSimple .)
    FOR             reduce using rule 38 (funcion -> funSimple .)
    VARIABLE        reduce using rule 38 (funcion -> funSimple .)
    IF              reduce using rule 38 (funcion -> funSimple .)
    VAR             reduce using rule 38 (funcion -> funSimple .)
    STRING          reduce using rule 38 (funcion -> funSimple .)
    INT             reduce using rule 38 (funcion -> funSimple .)
    SWITCH          reduce using rule 38 (funcion -> funSimple .)
    FUNC            reduce using rule 38 (funcion -> funSimple .)
    $end            reduce using rule 38 (funcion -> funSimple .)
    RCBRACKET       reduce using rule 38 (funcion -> funSimple .)
    RETURN          reduce using rule 38 (funcion -> funSimple .)
    CASE            reduce using rule 38 (funcion -> funSimple .)
    DEFAULT         reduce using rule 38 (funcion -> funSimple .)


state 24

    (39) funcion -> funcPa .

    PRINT           reduce using rule 39 (funcion -> funcPa .)
    PRINTLN         reduce using rule 39 (funcion -> funcPa .)
    FOR             reduce using rule 39 (funcion -> funcPa .)
    VARIABLE        reduce using rule 39 (funcion -> funcPa .)
    IF              reduce using rule 39 (funcion -> funcPa .)
    VAR             reduce using rule 39 (funcion -> funcPa .)
    STRING          reduce using rule 39 (funcion -> funcPa .)
    INT             reduce using rule 39 (funcion -> funcPa .)
    SWITCH          reduce using rule 39 (funcion -> funcPa .)
    FUNC            reduce using rule 39 (funcion -> funcPa .)
    $end            reduce using rule 39 (funcion -> funcPa .)
    RCBRACKET       reduce using rule 39 (funcion -> funcPa .)
    RETURN          reduce using rule 39 (funcion -> funcPa .)
    CASE            reduce using rule 39 (funcion -> funcPa .)
    DEFAULT         reduce using rule 39 (funcion -> funcPa .)


state 25

    (40) funcion -> funcRetorno .

    PRINT           reduce using rule 40 (funcion -> funcRetorno .)
    PRINTLN         reduce using rule 40 (funcion -> funcRetorno .)
    FOR             reduce using rule 40 (funcion -> funcRetorno .)
    VARIABLE        reduce using rule 40 (funcion -> funcRetorno .)
    IF              reduce using rule 40 (funcion -> funcRetorno .)
    VAR             reduce using rule 40 (funcion -> funcRetorno .)
    STRING          reduce using rule 40 (funcion -> funcRetorno .)
    INT             reduce using rule 40 (funcion -> funcRetorno .)
    SWITCH          reduce using rule 40 (funcion -> funcRetorno .)
    FUNC            reduce using rule 40 (funcion -> funcRetorno .)
    $end            reduce using rule 40 (funcion -> funcRetorno .)
    RCBRACKET       reduce using rule 40 (funcion -> funcRetorno .)
    RETURN          reduce using rule 40 (funcion -> funcRetorno .)
    CASE            reduce using rule 40 (funcion -> funcRetorno .)
    DEFAULT         reduce using rule 40 (funcion -> funcRetorno .)


state 26

    (41) funcion -> funcCompleta .

    PRINT           reduce using rule 41 (funcion -> funcCompleta .)
    PRINTLN         reduce using rule 41 (funcion -> funcCompleta .)
    FOR             reduce using rule 41 (funcion -> funcCompleta .)
    VARIABLE        reduce using rule 41 (funcion -> funcCompleta .)
    IF              reduce using rule 41 (funcion -> funcCompleta .)
    VAR             reduce using rule 41 (funcion -> funcCompleta .)
    STRING          reduce using rule 41 (funcion -> funcCompleta .)
    INT             reduce using rule 41 (funcion -> funcCompleta .)
    SWITCH          reduce using rule 41 (funcion -> funcCompleta .)
    FUNC            reduce using rule 41 (funcion -> funcCompleta .)
    $end            reduce using rule 41 (funcion -> funcCompleta .)
    RCBRACKET       reduce using rule 41 (funcion -> funcCompleta .)
    RETURN          reduce using rule 41 (funcion -> funcCompleta .)
    CASE            reduce using rule 41 (funcion -> funcCompleta .)
    DEFAULT         reduce using rule 41 (funcion -> funcCompleta .)


state 27

    (68) concatDatos -> STRING . MAS STRING

    MAS             shift and go to state 50


state 28

    (77) switchh -> SWITCH . VARIABLE LCBRACKET cases def RCBRACKET

    VARIABLE        shift and go to state 51


state 29

    (62) asignaciones -> varsimple .

    PRINT           reduce using rule 62 (asignaciones -> varsimple .)
    PRINTLN         reduce using rule 62 (asignaciones -> varsimple .)
    FOR             reduce using rule 62 (asignaciones -> varsimple .)
    VARIABLE        reduce using rule 62 (asignaciones -> varsimple .)
    IF              reduce using rule 62 (asignaciones -> varsimple .)
    VAR             reduce using rule 62 (asignaciones -> varsimple .)
    STRING          reduce using rule 62 (asignaciones -> varsimple .)
    INT             reduce using rule 62 (asignaciones -> varsimple .)
    SWITCH          reduce using rule 62 (asignaciones -> varsimple .)
    FUNC            reduce using rule 62 (asignaciones -> varsimple .)
    $end            reduce using rule 62 (asignaciones -> varsimple .)
    RCBRACKET       reduce using rule 62 (asignaciones -> varsimple .)
    RETURN          reduce using rule 62 (asignaciones -> varsimple .)
    CASE            reduce using rule 62 (asignaciones -> varsimple .)
    DEFAULT         reduce using rule 62 (asignaciones -> varsimple .)


state 30

    (63) asignaciones -> varobviado .

    PRINT           reduce using rule 63 (asignaciones -> varobviado .)
    PRINTLN         reduce using rule 63 (asignaciones -> varobviado .)
    FOR             reduce using rule 63 (asignaciones -> varobviado .)
    VARIABLE        reduce using rule 63 (asignaciones -> varobviado .)
    IF              reduce using rule 63 (asignaciones -> varobviado .)
    VAR             reduce using rule 63 (asignaciones -> varobviado .)
    STRING          reduce using rule 63 (asignaciones -> varobviado .)
    INT             reduce using rule 63 (asignaciones -> varobviado .)
    SWITCH          reduce using rule 63 (asignaciones -> varobviado .)
    FUNC            reduce using rule 63 (asignaciones -> varobviado .)
    $end            reduce using rule 63 (asignaciones -> varobviado .)
    RCBRACKET       reduce using rule 63 (asignaciones -> varobviado .)
    RETURN          reduce using rule 63 (asignaciones -> varobviado .)
    CASE            reduce using rule 63 (asignaciones -> varobviado .)
    DEFAULT         reduce using rule 63 (asignaciones -> varobviado .)


state 31

    (64) asignaciones -> decfast .

    PRINT           reduce using rule 64 (asignaciones -> decfast .)
    PRINTLN         reduce using rule 64 (asignaciones -> decfast .)
    FOR             reduce using rule 64 (asignaciones -> decfast .)
    VARIABLE        reduce using rule 64 (asignaciones -> decfast .)
    IF              reduce using rule 64 (asignaciones -> decfast .)
    VAR             reduce using rule 64 (asignaciones -> decfast .)
    STRING          reduce using rule 64 (asignaciones -> decfast .)
    INT             reduce using rule 64 (asignaciones -> decfast .)
    SWITCH          reduce using rule 64 (asignaciones -> decfast .)
    FUNC            reduce using rule 64 (asignaciones -> decfast .)
    $end            reduce using rule 64 (asignaciones -> decfast .)
    RCBRACKET       reduce using rule 64 (asignaciones -> decfast .)
    RETURN          reduce using rule 64 (asignaciones -> decfast .)
    CASE            reduce using rule 64 (asignaciones -> decfast .)
    DEFAULT         reduce using rule 64 (asignaciones -> decfast .)


state 32

    (42) funSimple -> FUNC . nombreFuncion LPAREN RPAREN LCBRACKET bloqueI RCBRACKET
    (43) funcPa -> FUNC . nombreFuncion LPAREN parametrosF RPAREN LCBRACKET bloqueI RCBRACKET
    (44) funcRetorno -> FUNC . nombreFuncion LPAREN RPAREN LPAREN datoReturn RPAREN LCBRACKET bloqueI returnF RCBRACKET
    (45) funcCompleta -> FUNC . nombreFuncion LPAREN parametrosF RPAREN LPAREN datoReturn RPAREN LCBRACKET bloqueI returnF RCBRACKET
    (46) nombreFuncion -> . VARIABLE

    VARIABLE        shift and go to state 53

    nombreFuncion                  shift and go to state 52

state 33

    (2) bloqueI -> instrucciones bloqueI .

    $end            reduce using rule 2 (bloqueI -> instrucciones bloqueI .)
    RCBRACKET       reduce using rule 2 (bloqueI -> instrucciones bloqueI .)
    RETURN          reduce using rule 2 (bloqueI -> instrucciones bloqueI .)


state 34

    (16) impresion -> PRINT LPAREN . dato RPAREN
    (18) dato -> . INT
    (19) dato -> . STRING
    (20) dato -> . FLOAT
    (21) dato -> . VARIABLE

    INT             shift and go to state 37
    STRING          shift and go to state 41
    FLOAT           shift and go to state 42
    VARIABLE        shift and go to state 48

    dato                           shift and go to state 54

state 35

    (17) impresion -> PRINTLN LPAREN . dato RPAREN
    (18) dato -> . INT
    (19) dato -> . STRING
    (20) dato -> . FLOAT
    (21) dato -> . VARIABLE

    INT             shift and go to state 37
    STRING          shift and go to state 41
    FLOAT           shift and go to state 42
    VARIABLE        shift and go to state 48

    dato                           shift and go to state 55

state 36

    (22) for -> FOR VARIABLE . FASTDEC INT PUNTO_COMA VARIABLE sigcomparacion INT PUNTO_COMA VARIABLE incremento LCBRACKET bloqueI RCBRACKET
    (21) dato -> VARIABLE .

    FASTDEC         shift and go to state 56
    MENORQUE        reduce using rule 21 (dato -> VARIABLE .)
    MAYORQUE        reduce using rule 21 (dato -> VARIABLE .)
    DIFERENTE       reduce using rule 21 (dato -> VARIABLE .)
    COMPARA_IGUAL   reduce using rule 21 (dato -> VARIABLE .)
    MAYORIGUAL      reduce using rule 21 (dato -> VARIABLE .)
    MENORIGUAL      reduce using rule 21 (dato -> VARIABLE .)


state 37

    (18) dato -> INT .

    MENORQUE        reduce using rule 18 (dato -> INT .)
    MAYORQUE        reduce using rule 18 (dato -> INT .)
    DIFERENTE       reduce using rule 18 (dato -> INT .)
    COMPARA_IGUAL   reduce using rule 18 (dato -> INT .)
    MAYORIGUAL      reduce using rule 18 (dato -> INT .)
    MENORIGUAL      reduce using rule 18 (dato -> INT .)
    RPAREN          reduce using rule 18 (dato -> INT .)
    PRINT           reduce using rule 18 (dato -> INT .)
    PRINTLN         reduce using rule 18 (dato -> INT .)
    FOR             reduce using rule 18 (dato -> INT .)
    VARIABLE        reduce using rule 18 (dato -> INT .)
    IF              reduce using rule 18 (dato -> INT .)
    VAR             reduce using rule 18 (dato -> INT .)
    STRING          reduce using rule 18 (dato -> INT .)
    INT             reduce using rule 18 (dato -> INT .)
    SWITCH          reduce using rule 18 (dato -> INT .)
    FUNC            reduce using rule 18 (dato -> INT .)
    $end            reduce using rule 18 (dato -> INT .)
    RCBRACKET       reduce using rule 18 (dato -> INT .)
    RETURN          reduce using rule 18 (dato -> INT .)
    CASE            reduce using rule 18 (dato -> INT .)
    DEFAULT         reduce using rule 18 (dato -> INT .)
    LCBRACKET       reduce using rule 18 (dato -> INT .)
    COMMA           reduce using rule 18 (dato -> INT .)
    COLON           reduce using rule 18 (dato -> INT .)


state 38

    (24) for3 -> FOR LCBRACKET . bloqueI RCBRACKET
    (1) bloqueI -> . instrucciones
    (2) bloqueI -> . instrucciones bloqueI
    (3) instrucciones -> . impresion
    (4) instrucciones -> . for
    (5) instrucciones -> . for2
    (6) instrucciones -> . for3
    (7) instrucciones -> . mapa
    (8) instrucciones -> . si
    (9) instrucciones -> . array
    (10) instrucciones -> . funcion
    (11) instrucciones -> . concatDatos
    (12) instrucciones -> . ArraySemantica
    (13) instrucciones -> . switchh
    (14) instrucciones -> . asignaciones
    (15) instrucciones -> . expresionCondicion
    (16) impresion -> . PRINT LPAREN dato RPAREN
    (17) impresion -> . PRINTLN LPAREN dato RPAREN
    (22) for -> . FOR VARIABLE FASTDEC INT PUNTO_COMA VARIABLE sigcomparacion INT PUNTO_COMA VARIABLE incremento LCBRACKET bloqueI RCBRACKET
    (23) for2 -> . FOR comparacionF LCBRACKET bloqueI RCBRACKET
    (24) for3 -> . FOR LCBRACKET bloqueI RCBRACKET
    (53) mapa -> . VARIABLE EQUALS MAP LBRACKET TDATA RBRACKET TDATA LCBRACKET adentro RCBRACKET
    (60) si -> . IF comparacion LCBRACKET instrucciones RCBRACKET
    (34) array -> . VAR VARIABLE EQUALS LBRACKET INT RBRACKET TDATA LCBRACKET elementArray RCBRACKET
    (35) array -> . VARIABLE FASTDEC LBRACKET INT RBRACKET TDATA LCBRACKET elementArray RCBRACKET
    (38) funcion -> . funSimple
    (39) funcion -> . funcPa
    (40) funcion -> . funcRetorno
    (41) funcion -> . funcCompleta
    (68) concatDatos -> . STRING MAS STRING
    (69) concatDatos -> . INT MAS INT
    (70) ArraySemantica -> . VAR VARIABLE EQUALS LBRACKET INT RBRACKET TSTRING LCBRACKET elementStringS RCBRACKET
    (71) ArraySemantica -> . VARIABLE FASTDEC LBRACKET INT TINT LCBRACKET elementIntS RCBRACKET
    (77) switchh -> . SWITCH VARIABLE LCBRACKET cases def RCBRACKET
    (62) asignaciones -> . varsimple
    (63) asignaciones -> . varobviado
    (64) asignaciones -> . decfast
    (76) expresionCondicion -> . VARIABLE FASTDEC comparacion
    (42) funSimple -> . FUNC nombreFuncion LPAREN RPAREN LCBRACKET bloqueI RCBRACKET
    (43) funcPa -> . FUNC nombreFuncion LPAREN parametrosF RPAREN LCBRACKET bloqueI RCBRACKET
    (44) funcRetorno -> . FUNC nombreFuncion LPAREN RPAREN LPAREN datoReturn RPAREN LCBRACKET bloqueI returnF RCBRACKET
    (45) funcCompleta -> . FUNC nombreFuncion LPAREN parametrosF RPAREN LPAREN datoReturn RPAREN LCBRACKET bloqueI returnF RCBRACKET
    (65) varsimple -> . VAR VARIABLE TDATA EQUALS dato
    (66) varobviado -> . VAR VARIABLE EQUALS dato
    (67) decfast -> . VARIABLE FASTDEC dato

    PRINT           shift and go to state 16
    PRINTLN         shift and go to state 17
    FOR             shift and go to state 18
    VARIABLE        shift and go to state 19
    IF              shift and go to state 21
    VAR             shift and go to state 22
    STRING          shift and go to state 27
    INT             shift and go to state 20
    SWITCH          shift and go to state 28
    FUNC            shift and go to state 32

    bloqueI                        shift and go to state 57
    instrucciones                  shift and go to state 2
    impresion                      shift and go to state 3
    for                            shift and go to state 4
    for2                           shift and go to state 5
    for3                           shift and go to state 6
    mapa                           shift and go to state 7
    si                             shift and go to state 8
    array                          shift and go to state 9
    funcion                        shift and go to state 10
    concatDatos                    shift and go to state 11
    ArraySemantica                 shift and go to state 12
    switchh                        shift and go to state 13
    asignaciones                   shift and go to state 14
    expresionCondicion             shift and go to state 15
    funSimple                      shift and go to state 23
    funcPa                         shift and go to state 24
    funcRetorno                    shift and go to state 25
    funcCompleta                   shift and go to state 26
    varsimple                      shift and go to state 29
    varobviado                     shift and go to state 30
    decfast                        shift and go to state 31

state 39

    (23) for2 -> FOR comparacionF . LCBRACKET bloqueI RCBRACKET

    LCBRACKET       shift and go to state 58


state 40

    (33) comparacionF -> dato . sigcomparacion dato
    (27) sigcomparacion -> . MENORQUE
    (28) sigcomparacion -> . MAYORQUE
    (29) sigcomparacion -> . DIFERENTE
    (30) sigcomparacion -> . COMPARA_IGUAL
    (31) sigcomparacion -> . MAYORIGUAL
    (32) sigcomparacion -> . MENORIGUAL

    MENORQUE        shift and go to state 60
    MAYORQUE        shift and go to state 61
    DIFERENTE       shift and go to state 62
    COMPARA_IGUAL   shift and go to state 63
    MAYORIGUAL      shift and go to state 64
    MENORIGUAL      shift and go to state 65

    sigcomparacion                 shift and go to state 59

state 41

    (19) dato -> STRING .

    MENORQUE        reduce using rule 19 (dato -> STRING .)
    MAYORQUE        reduce using rule 19 (dato -> STRING .)
    DIFERENTE       reduce using rule 19 (dato -> STRING .)
    COMPARA_IGUAL   reduce using rule 19 (dato -> STRING .)
    MAYORIGUAL      reduce using rule 19 (dato -> STRING .)
    MENORIGUAL      reduce using rule 19 (dato -> STRING .)
    RPAREN          reduce using rule 19 (dato -> STRING .)
    PRINT           reduce using rule 19 (dato -> STRING .)
    PRINTLN         reduce using rule 19 (dato -> STRING .)
    FOR             reduce using rule 19 (dato -> STRING .)
    VARIABLE        reduce using rule 19 (dato -> STRING .)
    IF              reduce using rule 19 (dato -> STRING .)
    VAR             reduce using rule 19 (dato -> STRING .)
    STRING          reduce using rule 19 (dato -> STRING .)
    INT             reduce using rule 19 (dato -> STRING .)
    SWITCH          reduce using rule 19 (dato -> STRING .)
    FUNC            reduce using rule 19 (dato -> STRING .)
    $end            reduce using rule 19 (dato -> STRING .)
    RCBRACKET       reduce using rule 19 (dato -> STRING .)
    RETURN          reduce using rule 19 (dato -> STRING .)
    CASE            reduce using rule 19 (dato -> STRING .)
    DEFAULT         reduce using rule 19 (dato -> STRING .)
    LCBRACKET       reduce using rule 19 (dato -> STRING .)
    COMMA           reduce using rule 19 (dato -> STRING .)
    COLON           reduce using rule 19 (dato -> STRING .)


state 42

    (20) dato -> FLOAT .

    MENORQUE        reduce using rule 20 (dato -> FLOAT .)
    MAYORQUE        reduce using rule 20 (dato -> FLOAT .)
    DIFERENTE       reduce using rule 20 (dato -> FLOAT .)
    COMPARA_IGUAL   reduce using rule 20 (dato -> FLOAT .)
    MAYORIGUAL      reduce using rule 20 (dato -> FLOAT .)
    MENORIGUAL      reduce using rule 20 (dato -> FLOAT .)
    RPAREN          reduce using rule 20 (dato -> FLOAT .)
    PRINT           reduce using rule 20 (dato -> FLOAT .)
    PRINTLN         reduce using rule 20 (dato -> FLOAT .)
    FOR             reduce using rule 20 (dato -> FLOAT .)
    VARIABLE        reduce using rule 20 (dato -> FLOAT .)
    IF              reduce using rule 20 (dato -> FLOAT .)
    VAR             reduce using rule 20 (dato -> FLOAT .)
    STRING          reduce using rule 20 (dato -> FLOAT .)
    INT             reduce using rule 20 (dato -> FLOAT .)
    SWITCH          reduce using rule 20 (dato -> FLOAT .)
    FUNC            reduce using rule 20 (dato -> FLOAT .)
    $end            reduce using rule 20 (dato -> FLOAT .)
    RCBRACKET       reduce using rule 20 (dato -> FLOAT .)
    RETURN          reduce using rule 20 (dato -> FLOAT .)
    CASE            reduce using rule 20 (dato -> FLOAT .)
    DEFAULT         reduce using rule 20 (dato -> FLOAT .)
    LCBRACKET       reduce using rule 20 (dato -> FLOAT .)
    COMMA           reduce using rule 20 (dato -> FLOAT .)
    COLON           reduce using rule 20 (dato -> FLOAT .)


state 43

    (53) mapa -> VARIABLE EQUALS . MAP LBRACKET TDATA RBRACKET TDATA LCBRACKET adentro RCBRACKET

    MAP             shift and go to state 66


state 44

    (35) array -> VARIABLE FASTDEC . LBRACKET INT RBRACKET TDATA LCBRACKET elementArray RCBRACKET
    (71) ArraySemantica -> VARIABLE FASTDEC . LBRACKET INT TINT LCBRACKET elementIntS RCBRACKET
    (76) expresionCondicion -> VARIABLE FASTDEC . comparacion
    (67) decfast -> VARIABLE FASTDEC . dato
    (61) comparacion -> . dato sigcomparacion dato
    (18) dato -> . INT
    (19) dato -> . STRING
    (20) dato -> . FLOAT
    (21) dato -> . VARIABLE

    LBRACKET        shift and go to state 67
    INT             shift and go to state 37
    STRING          shift and go to state 41
    FLOAT           shift and go to state 42
    VARIABLE        shift and go to state 48

    comparacion                    shift and go to state 68
    dato                           shift and go to state 69

state 45

    (69) concatDatos -> INT MAS . INT

    INT             shift and go to state 70


state 46

    (60) si -> IF comparacion . LCBRACKET instrucciones RCBRACKET

    LCBRACKET       shift and go to state 71


state 47

    (61) comparacion -> dato . sigcomparacion dato
    (27) sigcomparacion -> . MENORQUE
    (28) sigcomparacion -> . MAYORQUE
    (29) sigcomparacion -> . DIFERENTE
    (30) sigcomparacion -> . COMPARA_IGUAL
    (31) sigcomparacion -> . MAYORIGUAL
    (32) sigcomparacion -> . MENORIGUAL

    MENORQUE        shift and go to state 60
    MAYORQUE        shift and go to state 61
    DIFERENTE       shift and go to state 62
    COMPARA_IGUAL   shift and go to state 63
    MAYORIGUAL      shift and go to state 64
    MENORIGUAL      shift and go to state 65

    sigcomparacion                 shift and go to state 72

state 48

    (21) dato -> VARIABLE .

    MENORQUE        reduce using rule 21 (dato -> VARIABLE .)
    MAYORQUE        reduce using rule 21 (dato -> VARIABLE .)
    DIFERENTE       reduce using rule 21 (dato -> VARIABLE .)
    COMPARA_IGUAL   reduce using rule 21 (dato -> VARIABLE .)
    MAYORIGUAL      reduce using rule 21 (dato -> VARIABLE .)
    MENORIGUAL      reduce using rule 21 (dato -> VARIABLE .)
    RPAREN          reduce using rule 21 (dato -> VARIABLE .)
    PRINT           reduce using rule 21 (dato -> VARIABLE .)
    PRINTLN         reduce using rule 21 (dato -> VARIABLE .)
    FOR             reduce using rule 21 (dato -> VARIABLE .)
    VARIABLE        reduce using rule 21 (dato -> VARIABLE .)
    IF              reduce using rule 21 (dato -> VARIABLE .)
    VAR             reduce using rule 21 (dato -> VARIABLE .)
    STRING          reduce using rule 21 (dato -> VARIABLE .)
    INT             reduce using rule 21 (dato -> VARIABLE .)
    SWITCH          reduce using rule 21 (dato -> VARIABLE .)
    FUNC            reduce using rule 21 (dato -> VARIABLE .)
    $end            reduce using rule 21 (dato -> VARIABLE .)
    RCBRACKET       reduce using rule 21 (dato -> VARIABLE .)
    RETURN          reduce using rule 21 (dato -> VARIABLE .)
    CASE            reduce using rule 21 (dato -> VARIABLE .)
    DEFAULT         reduce using rule 21 (dato -> VARIABLE .)
    LCBRACKET       reduce using rule 21 (dato -> VARIABLE .)
    COMMA           reduce using rule 21 (dato -> VARIABLE .)
    COLON           reduce using rule 21 (dato -> VARIABLE .)


state 49

    (34) array -> VAR VARIABLE . EQUALS LBRACKET INT RBRACKET TDATA LCBRACKET elementArray RCBRACKET
    (70) ArraySemantica -> VAR VARIABLE . EQUALS LBRACKET INT RBRACKET TSTRING LCBRACKET elementStringS RCBRACKET
    (65) varsimple -> VAR VARIABLE . TDATA EQUALS dato
    (66) varobviado -> VAR VARIABLE . EQUALS dato
    (54) TDATA -> . TSTRING
    (55) TDATA -> . TINT
    (56) TDATA -> . TFLOAT

    EQUALS          shift and go to state 73
    TSTRING         shift and go to state 75
    TINT            shift and go to state 76
    TFLOAT          shift and go to state 77

    TDATA                          shift and go to state 74

state 50

    (68) concatDatos -> STRING MAS . STRING

    STRING          shift and go to state 78


state 51

    (77) switchh -> SWITCH VARIABLE . LCBRACKET cases def RCBRACKET

    LCBRACKET       shift and go to state 79


state 52

    (42) funSimple -> FUNC nombreFuncion . LPAREN RPAREN LCBRACKET bloqueI RCBRACKET
    (43) funcPa -> FUNC nombreFuncion . LPAREN parametrosF RPAREN LCBRACKET bloqueI RCBRACKET
    (44) funcRetorno -> FUNC nombreFuncion . LPAREN RPAREN LPAREN datoReturn RPAREN LCBRACKET bloqueI returnF RCBRACKET
    (45) funcCompleta -> FUNC nombreFuncion . LPAREN parametrosF RPAREN LPAREN datoReturn RPAREN LCBRACKET bloqueI returnF RCBRACKET

    LPAREN          shift and go to state 80


state 53

    (46) nombreFuncion -> VARIABLE .

    LPAREN          reduce using rule 46 (nombreFuncion -> VARIABLE .)


state 54

    (16) impresion -> PRINT LPAREN dato . RPAREN

    RPAREN          shift and go to state 81


state 55

    (17) impresion -> PRINTLN LPAREN dato . RPAREN

    RPAREN          shift and go to state 82


state 56

    (22) for -> FOR VARIABLE FASTDEC . INT PUNTO_COMA VARIABLE sigcomparacion INT PUNTO_COMA VARIABLE incremento LCBRACKET bloqueI RCBRACKET

    INT             shift and go to state 83


state 57

    (24) for3 -> FOR LCBRACKET bloqueI . RCBRACKET

    RCBRACKET       shift and go to state 84


state 58

    (23) for2 -> FOR comparacionF LCBRACKET . bloqueI RCBRACKET
    (1) bloqueI -> . instrucciones
    (2) bloqueI -> . instrucciones bloqueI
    (3) instrucciones -> . impresion
    (4) instrucciones -> . for
    (5) instrucciones -> . for2
    (6) instrucciones -> . for3
    (7) instrucciones -> . mapa
    (8) instrucciones -> . si
    (9) instrucciones -> . array
    (10) instrucciones -> . funcion
    (11) instrucciones -> . concatDatos
    (12) instrucciones -> . ArraySemantica
    (13) instrucciones -> . switchh
    (14) instrucciones -> . asignaciones
    (15) instrucciones -> . expresionCondicion
    (16) impresion -> . PRINT LPAREN dato RPAREN
    (17) impresion -> . PRINTLN LPAREN dato RPAREN
    (22) for -> . FOR VARIABLE FASTDEC INT PUNTO_COMA VARIABLE sigcomparacion INT PUNTO_COMA VARIABLE incremento LCBRACKET bloqueI RCBRACKET
    (23) for2 -> . FOR comparacionF LCBRACKET bloqueI RCBRACKET
    (24) for3 -> . FOR LCBRACKET bloqueI RCBRACKET
    (53) mapa -> . VARIABLE EQUALS MAP LBRACKET TDATA RBRACKET TDATA LCBRACKET adentro RCBRACKET
    (60) si -> . IF comparacion LCBRACKET instrucciones RCBRACKET
    (34) array -> . VAR VARIABLE EQUALS LBRACKET INT RBRACKET TDATA LCBRACKET elementArray RCBRACKET
    (35) array -> . VARIABLE FASTDEC LBRACKET INT RBRACKET TDATA LCBRACKET elementArray RCBRACKET
    (38) funcion -> . funSimple
    (39) funcion -> . funcPa
    (40) funcion -> . funcRetorno
    (41) funcion -> . funcCompleta
    (68) concatDatos -> . STRING MAS STRING
    (69) concatDatos -> . INT MAS INT
    (70) ArraySemantica -> . VAR VARIABLE EQUALS LBRACKET INT RBRACKET TSTRING LCBRACKET elementStringS RCBRACKET
    (71) ArraySemantica -> . VARIABLE FASTDEC LBRACKET INT TINT LCBRACKET elementIntS RCBRACKET
    (77) switchh -> . SWITCH VARIABLE LCBRACKET cases def RCBRACKET
    (62) asignaciones -> . varsimple
    (63) asignaciones -> . varobviado
    (64) asignaciones -> . decfast
    (76) expresionCondicion -> . VARIABLE FASTDEC comparacion
    (42) funSimple -> . FUNC nombreFuncion LPAREN RPAREN LCBRACKET bloqueI RCBRACKET
    (43) funcPa -> . FUNC nombreFuncion LPAREN parametrosF RPAREN LCBRACKET bloqueI RCBRACKET
    (44) funcRetorno -> . FUNC nombreFuncion LPAREN RPAREN LPAREN datoReturn RPAREN LCBRACKET bloqueI returnF RCBRACKET
    (45) funcCompleta -> . FUNC nombreFuncion LPAREN parametrosF RPAREN LPAREN datoReturn RPAREN LCBRACKET bloqueI returnF RCBRACKET
    (65) varsimple -> . VAR VARIABLE TDATA EQUALS dato
    (66) varobviado -> . VAR VARIABLE EQUALS dato
    (67) decfast -> . VARIABLE FASTDEC dato

    PRINT           shift and go to state 16
    PRINTLN         shift and go to state 17
    FOR             shift and go to state 18
    VARIABLE        shift and go to state 19
    IF              shift and go to state 21
    VAR             shift and go to state 22
    STRING          shift and go to state 27
    INT             shift and go to state 20
    SWITCH          shift and go to state 28
    FUNC            shift and go to state 32

    bloqueI                        shift and go to state 85
    instrucciones                  shift and go to state 2
    impresion                      shift and go to state 3
    for                            shift and go to state 4
    for2                           shift and go to state 5
    for3                           shift and go to state 6
    mapa                           shift and go to state 7
    si                             shift and go to state 8
    array                          shift and go to state 9
    funcion                        shift and go to state 10
    concatDatos                    shift and go to state 11
    ArraySemantica                 shift and go to state 12
    switchh                        shift and go to state 13
    asignaciones                   shift and go to state 14
    expresionCondicion             shift and go to state 15
    funSimple                      shift and go to state 23
    funcPa                         shift and go to state 24
    funcRetorno                    shift and go to state 25
    funcCompleta                   shift and go to state 26
    varsimple                      shift and go to state 29
    varobviado                     shift and go to state 30
    decfast                        shift and go to state 31

state 59

    (33) comparacionF -> dato sigcomparacion . dato
    (18) dato -> . INT
    (19) dato -> . STRING
    (20) dato -> . FLOAT
    (21) dato -> . VARIABLE

    INT             shift and go to state 37
    STRING          shift and go to state 41
    FLOAT           shift and go to state 42
    VARIABLE        shift and go to state 48

    dato                           shift and go to state 86

state 60

    (27) sigcomparacion -> MENORQUE .

    INT             reduce using rule 27 (sigcomparacion -> MENORQUE .)
    STRING          reduce using rule 27 (sigcomparacion -> MENORQUE .)
    FLOAT           reduce using rule 27 (sigcomparacion -> MENORQUE .)
    VARIABLE        reduce using rule 27 (sigcomparacion -> MENORQUE .)


state 61

    (28) sigcomparacion -> MAYORQUE .

    INT             reduce using rule 28 (sigcomparacion -> MAYORQUE .)
    STRING          reduce using rule 28 (sigcomparacion -> MAYORQUE .)
    FLOAT           reduce using rule 28 (sigcomparacion -> MAYORQUE .)
    VARIABLE        reduce using rule 28 (sigcomparacion -> MAYORQUE .)


state 62

    (29) sigcomparacion -> DIFERENTE .

    INT             reduce using rule 29 (sigcomparacion -> DIFERENTE .)
    STRING          reduce using rule 29 (sigcomparacion -> DIFERENTE .)
    FLOAT           reduce using rule 29 (sigcomparacion -> DIFERENTE .)
    VARIABLE        reduce using rule 29 (sigcomparacion -> DIFERENTE .)


state 63

    (30) sigcomparacion -> COMPARA_IGUAL .

    INT             reduce using rule 30 (sigcomparacion -> COMPARA_IGUAL .)
    STRING          reduce using rule 30 (sigcomparacion -> COMPARA_IGUAL .)
    FLOAT           reduce using rule 30 (sigcomparacion -> COMPARA_IGUAL .)
    VARIABLE        reduce using rule 30 (sigcomparacion -> COMPARA_IGUAL .)


state 64

    (31) sigcomparacion -> MAYORIGUAL .

    INT             reduce using rule 31 (sigcomparacion -> MAYORIGUAL .)
    STRING          reduce using rule 31 (sigcomparacion -> MAYORIGUAL .)
    FLOAT           reduce using rule 31 (sigcomparacion -> MAYORIGUAL .)
    VARIABLE        reduce using rule 31 (sigcomparacion -> MAYORIGUAL .)


state 65

    (32) sigcomparacion -> MENORIGUAL .

    INT             reduce using rule 32 (sigcomparacion -> MENORIGUAL .)
    STRING          reduce using rule 32 (sigcomparacion -> MENORIGUAL .)
    FLOAT           reduce using rule 32 (sigcomparacion -> MENORIGUAL .)
    VARIABLE        reduce using rule 32 (sigcomparacion -> MENORIGUAL .)


state 66

    (53) mapa -> VARIABLE EQUALS MAP . LBRACKET TDATA RBRACKET TDATA LCBRACKET adentro RCBRACKET

    LBRACKET        shift and go to state 87


state 67

    (35) array -> VARIABLE FASTDEC LBRACKET . INT RBRACKET TDATA LCBRACKET elementArray RCBRACKET
    (71) ArraySemantica -> VARIABLE FASTDEC LBRACKET . INT TINT LCBRACKET elementIntS RCBRACKET

    INT             shift and go to state 88


state 68

    (76) expresionCondicion -> VARIABLE FASTDEC comparacion .

    PRINT           reduce using rule 76 (expresionCondicion -> VARIABLE FASTDEC comparacion .)
    PRINTLN         reduce using rule 76 (expresionCondicion -> VARIABLE FASTDEC comparacion .)
    FOR             reduce using rule 76 (expresionCondicion -> VARIABLE FASTDEC comparacion .)
    VARIABLE        reduce using rule 76 (expresionCondicion -> VARIABLE FASTDEC comparacion .)
    IF              reduce using rule 76 (expresionCondicion -> VARIABLE FASTDEC comparacion .)
    VAR             reduce using rule 76 (expresionCondicion -> VARIABLE FASTDEC comparacion .)
    STRING          reduce using rule 76 (expresionCondicion -> VARIABLE FASTDEC comparacion .)
    INT             reduce using rule 76 (expresionCondicion -> VARIABLE FASTDEC comparacion .)
    SWITCH          reduce using rule 76 (expresionCondicion -> VARIABLE FASTDEC comparacion .)
    FUNC            reduce using rule 76 (expresionCondicion -> VARIABLE FASTDEC comparacion .)
    $end            reduce using rule 76 (expresionCondicion -> VARIABLE FASTDEC comparacion .)
    RCBRACKET       reduce using rule 76 (expresionCondicion -> VARIABLE FASTDEC comparacion .)
    RETURN          reduce using rule 76 (expresionCondicion -> VARIABLE FASTDEC comparacion .)
    CASE            reduce using rule 76 (expresionCondicion -> VARIABLE FASTDEC comparacion .)
    DEFAULT         reduce using rule 76 (expresionCondicion -> VARIABLE FASTDEC comparacion .)


state 69

    (67) decfast -> VARIABLE FASTDEC dato .
    (61) comparacion -> dato . sigcomparacion dato
    (27) sigcomparacion -> . MENORQUE
    (28) sigcomparacion -> . MAYORQUE
    (29) sigcomparacion -> . DIFERENTE
    (30) sigcomparacion -> . COMPARA_IGUAL
    (31) sigcomparacion -> . MAYORIGUAL
    (32) sigcomparacion -> . MENORIGUAL

    PRINT           reduce using rule 67 (decfast -> VARIABLE FASTDEC dato .)
    PRINTLN         reduce using rule 67 (decfast -> VARIABLE FASTDEC dato .)
    FOR             reduce using rule 67 (decfast -> VARIABLE FASTDEC dato .)
    VARIABLE        reduce using rule 67 (decfast -> VARIABLE FASTDEC dato .)
    IF              reduce using rule 67 (decfast -> VARIABLE FASTDEC dato .)
    VAR             reduce using rule 67 (decfast -> VARIABLE FASTDEC dato .)
    STRING          reduce using rule 67 (decfast -> VARIABLE FASTDEC dato .)
    INT             reduce using rule 67 (decfast -> VARIABLE FASTDEC dato .)
    SWITCH          reduce using rule 67 (decfast -> VARIABLE FASTDEC dato .)
    FUNC            reduce using rule 67 (decfast -> VARIABLE FASTDEC dato .)
    $end            reduce using rule 67 (decfast -> VARIABLE FASTDEC dato .)
    RCBRACKET       reduce using rule 67 (decfast -> VARIABLE FASTDEC dato .)
    RETURN          reduce using rule 67 (decfast -> VARIABLE FASTDEC dato .)
    CASE            reduce using rule 67 (decfast -> VARIABLE FASTDEC dato .)
    DEFAULT         reduce using rule 67 (decfast -> VARIABLE FASTDEC dato .)
    MENORQUE        shift and go to state 60
    MAYORQUE        shift and go to state 61
    DIFERENTE       shift and go to state 62
    COMPARA_IGUAL   shift and go to state 63
    MAYORIGUAL      shift and go to state 64
    MENORIGUAL      shift and go to state 65

    sigcomparacion                 shift and go to state 72

state 70

    (69) concatDatos -> INT MAS INT .

    PRINT           reduce using rule 69 (concatDatos -> INT MAS INT .)
    PRINTLN         reduce using rule 69 (concatDatos -> INT MAS INT .)
    FOR             reduce using rule 69 (concatDatos -> INT MAS INT .)
    VARIABLE        reduce using rule 69 (concatDatos -> INT MAS INT .)
    IF              reduce using rule 69 (concatDatos -> INT MAS INT .)
    VAR             reduce using rule 69 (concatDatos -> INT MAS INT .)
    STRING          reduce using rule 69 (concatDatos -> INT MAS INT .)
    INT             reduce using rule 69 (concatDatos -> INT MAS INT .)
    SWITCH          reduce using rule 69 (concatDatos -> INT MAS INT .)
    FUNC            reduce using rule 69 (concatDatos -> INT MAS INT .)
    $end            reduce using rule 69 (concatDatos -> INT MAS INT .)
    RCBRACKET       reduce using rule 69 (concatDatos -> INT MAS INT .)
    RETURN          reduce using rule 69 (concatDatos -> INT MAS INT .)
    CASE            reduce using rule 69 (concatDatos -> INT MAS INT .)
    DEFAULT         reduce using rule 69 (concatDatos -> INT MAS INT .)


state 71

    (60) si -> IF comparacion LCBRACKET . instrucciones RCBRACKET
    (3) instrucciones -> . impresion
    (4) instrucciones -> . for
    (5) instrucciones -> . for2
    (6) instrucciones -> . for3
    (7) instrucciones -> . mapa
    (8) instrucciones -> . si
    (9) instrucciones -> . array
    (10) instrucciones -> . funcion
    (11) instrucciones -> . concatDatos
    (12) instrucciones -> . ArraySemantica
    (13) instrucciones -> . switchh
    (14) instrucciones -> . asignaciones
    (15) instrucciones -> . expresionCondicion
    (16) impresion -> . PRINT LPAREN dato RPAREN
    (17) impresion -> . PRINTLN LPAREN dato RPAREN
    (22) for -> . FOR VARIABLE FASTDEC INT PUNTO_COMA VARIABLE sigcomparacion INT PUNTO_COMA VARIABLE incremento LCBRACKET bloqueI RCBRACKET
    (23) for2 -> . FOR comparacionF LCBRACKET bloqueI RCBRACKET
    (24) for3 -> . FOR LCBRACKET bloqueI RCBRACKET
    (53) mapa -> . VARIABLE EQUALS MAP LBRACKET TDATA RBRACKET TDATA LCBRACKET adentro RCBRACKET
    (60) si -> . IF comparacion LCBRACKET instrucciones RCBRACKET
    (34) array -> . VAR VARIABLE EQUALS LBRACKET INT RBRACKET TDATA LCBRACKET elementArray RCBRACKET
    (35) array -> . VARIABLE FASTDEC LBRACKET INT RBRACKET TDATA LCBRACKET elementArray RCBRACKET
    (38) funcion -> . funSimple
    (39) funcion -> . funcPa
    (40) funcion -> . funcRetorno
    (41) funcion -> . funcCompleta
    (68) concatDatos -> . STRING MAS STRING
    (69) concatDatos -> . INT MAS INT
    (70) ArraySemantica -> . VAR VARIABLE EQUALS LBRACKET INT RBRACKET TSTRING LCBRACKET elementStringS RCBRACKET
    (71) ArraySemantica -> . VARIABLE FASTDEC LBRACKET INT TINT LCBRACKET elementIntS RCBRACKET
    (77) switchh -> . SWITCH VARIABLE LCBRACKET cases def RCBRACKET
    (62) asignaciones -> . varsimple
    (63) asignaciones -> . varobviado
    (64) asignaciones -> . decfast
    (76) expresionCondicion -> . VARIABLE FASTDEC comparacion
    (42) funSimple -> . FUNC nombreFuncion LPAREN RPAREN LCBRACKET bloqueI RCBRACKET
    (43) funcPa -> . FUNC nombreFuncion LPAREN parametrosF RPAREN LCBRACKET bloqueI RCBRACKET
    (44) funcRetorno -> . FUNC nombreFuncion LPAREN RPAREN LPAREN datoReturn RPAREN LCBRACKET bloqueI returnF RCBRACKET
    (45) funcCompleta -> . FUNC nombreFuncion LPAREN parametrosF RPAREN LPAREN datoReturn RPAREN LCBRACKET bloqueI returnF RCBRACKET
    (65) varsimple -> . VAR VARIABLE TDATA EQUALS dato
    (66) varobviado -> . VAR VARIABLE EQUALS dato
    (67) decfast -> . VARIABLE FASTDEC dato

    PRINT           shift and go to state 16
    PRINTLN         shift and go to state 17
    FOR             shift and go to state 18
    VARIABLE        shift and go to state 19
    IF              shift and go to state 21
    VAR             shift and go to state 22
    STRING          shift and go to state 27
    INT             shift and go to state 20
    SWITCH          shift and go to state 28
    FUNC            shift and go to state 32

    instrucciones                  shift and go to state 89
    impresion                      shift and go to state 3
    for                            shift and go to state 4
    for2                           shift and go to state 5
    for3                           shift and go to state 6
    mapa                           shift and go to state 7
    si                             shift and go to state 8
    array                          shift and go to state 9
    funcion                        shift and go to state 10
    concatDatos                    shift and go to state 11
    ArraySemantica                 shift and go to state 12
    switchh                        shift and go to state 13
    asignaciones                   shift and go to state 14
    expresionCondicion             shift and go to state 15
    funSimple                      shift and go to state 23
    funcPa                         shift and go to state 24
    funcRetorno                    shift and go to state 25
    funcCompleta                   shift and go to state 26
    varsimple                      shift and go to state 29
    varobviado                     shift and go to state 30
    decfast                        shift and go to state 31

state 72

    (61) comparacion -> dato sigcomparacion . dato
    (18) dato -> . INT
    (19) dato -> . STRING
    (20) dato -> . FLOAT
    (21) dato -> . VARIABLE

    INT             shift and go to state 37
    STRING          shift and go to state 41
    FLOAT           shift and go to state 42
    VARIABLE        shift and go to state 48

    dato                           shift and go to state 90

state 73

    (34) array -> VAR VARIABLE EQUALS . LBRACKET INT RBRACKET TDATA LCBRACKET elementArray RCBRACKET
    (70) ArraySemantica -> VAR VARIABLE EQUALS . LBRACKET INT RBRACKET TSTRING LCBRACKET elementStringS RCBRACKET
    (66) varobviado -> VAR VARIABLE EQUALS . dato
    (18) dato -> . INT
    (19) dato -> . STRING
    (20) dato -> . FLOAT
    (21) dato -> . VARIABLE

    LBRACKET        shift and go to state 91
    INT             shift and go to state 37
    STRING          shift and go to state 41
    FLOAT           shift and go to state 42
    VARIABLE        shift and go to state 48

    dato                           shift and go to state 92

state 74

    (65) varsimple -> VAR VARIABLE TDATA . EQUALS dato

    EQUALS          shift and go to state 93


state 75

    (54) TDATA -> TSTRING .

    EQUALS          reduce using rule 54 (TDATA -> TSTRING .)
    RBRACKET        reduce using rule 54 (TDATA -> TSTRING .)
    COMMA           reduce using rule 54 (TDATA -> TSTRING .)
    RPAREN          reduce using rule 54 (TDATA -> TSTRING .)
    LCBRACKET       reduce using rule 54 (TDATA -> TSTRING .)


state 76

    (55) TDATA -> TINT .

    EQUALS          reduce using rule 55 (TDATA -> TINT .)
    RBRACKET        reduce using rule 55 (TDATA -> TINT .)
    COMMA           reduce using rule 55 (TDATA -> TINT .)
    RPAREN          reduce using rule 55 (TDATA -> TINT .)
    LCBRACKET       reduce using rule 55 (TDATA -> TINT .)


state 77

    (56) TDATA -> TFLOAT .

    EQUALS          reduce using rule 56 (TDATA -> TFLOAT .)
    RBRACKET        reduce using rule 56 (TDATA -> TFLOAT .)
    COMMA           reduce using rule 56 (TDATA -> TFLOAT .)
    RPAREN          reduce using rule 56 (TDATA -> TFLOAT .)
    LCBRACKET       reduce using rule 56 (TDATA -> TFLOAT .)


state 78

    (68) concatDatos -> STRING MAS STRING .

    PRINT           reduce using rule 68 (concatDatos -> STRING MAS STRING .)
    PRINTLN         reduce using rule 68 (concatDatos -> STRING MAS STRING .)
    FOR             reduce using rule 68 (concatDatos -> STRING MAS STRING .)
    VARIABLE        reduce using rule 68 (concatDatos -> STRING MAS STRING .)
    IF              reduce using rule 68 (concatDatos -> STRING MAS STRING .)
    VAR             reduce using rule 68 (concatDatos -> STRING MAS STRING .)
    STRING          reduce using rule 68 (concatDatos -> STRING MAS STRING .)
    INT             reduce using rule 68 (concatDatos -> STRING MAS STRING .)
    SWITCH          reduce using rule 68 (concatDatos -> STRING MAS STRING .)
    FUNC            reduce using rule 68 (concatDatos -> STRING MAS STRING .)
    $end            reduce using rule 68 (concatDatos -> STRING MAS STRING .)
    RCBRACKET       reduce using rule 68 (concatDatos -> STRING MAS STRING .)
    RETURN          reduce using rule 68 (concatDatos -> STRING MAS STRING .)
    CASE            reduce using rule 68 (concatDatos -> STRING MAS STRING .)
    DEFAULT         reduce using rule 68 (concatDatos -> STRING MAS STRING .)


state 79

    (77) switchh -> SWITCH VARIABLE LCBRACKET . cases def RCBRACKET
    (78) cases -> . case1
    (79) cases -> . case1 cases
    (80) case1 -> . CASE INT COLON instrucciones

    CASE            shift and go to state 96

    cases                          shift and go to state 94
    case1                          shift and go to state 95

state 80

    (42) funSimple -> FUNC nombreFuncion LPAREN . RPAREN LCBRACKET bloqueI RCBRACKET
    (43) funcPa -> FUNC nombreFuncion LPAREN . parametrosF RPAREN LCBRACKET bloqueI RCBRACKET
    (44) funcRetorno -> FUNC nombreFuncion LPAREN . RPAREN LPAREN datoReturn RPAREN LCBRACKET bloqueI returnF RCBRACKET
    (45) funcCompleta -> FUNC nombreFuncion LPAREN . parametrosF RPAREN LPAREN datoReturn RPAREN LCBRACKET bloqueI returnF RCBRACKET
    (47) parametrosF -> . VARIABLE TDATA
    (48) parametrosF -> . VARIABLE TDATA COMMA parametrosF

    RPAREN          shift and go to state 97
    VARIABLE        shift and go to state 99

    parametrosF                    shift and go to state 98

state 81

    (16) impresion -> PRINT LPAREN dato RPAREN .

    PRINT           reduce using rule 16 (impresion -> PRINT LPAREN dato RPAREN .)
    PRINTLN         reduce using rule 16 (impresion -> PRINT LPAREN dato RPAREN .)
    FOR             reduce using rule 16 (impresion -> PRINT LPAREN dato RPAREN .)
    VARIABLE        reduce using rule 16 (impresion -> PRINT LPAREN dato RPAREN .)
    IF              reduce using rule 16 (impresion -> PRINT LPAREN dato RPAREN .)
    VAR             reduce using rule 16 (impresion -> PRINT LPAREN dato RPAREN .)
    STRING          reduce using rule 16 (impresion -> PRINT LPAREN dato RPAREN .)
    INT             reduce using rule 16 (impresion -> PRINT LPAREN dato RPAREN .)
    SWITCH          reduce using rule 16 (impresion -> PRINT LPAREN dato RPAREN .)
    FUNC            reduce using rule 16 (impresion -> PRINT LPAREN dato RPAREN .)
    $end            reduce using rule 16 (impresion -> PRINT LPAREN dato RPAREN .)
    RCBRACKET       reduce using rule 16 (impresion -> PRINT LPAREN dato RPAREN .)
    RETURN          reduce using rule 16 (impresion -> PRINT LPAREN dato RPAREN .)
    CASE            reduce using rule 16 (impresion -> PRINT LPAREN dato RPAREN .)
    DEFAULT         reduce using rule 16 (impresion -> PRINT LPAREN dato RPAREN .)


state 82

    (17) impresion -> PRINTLN LPAREN dato RPAREN .

    PRINT           reduce using rule 17 (impresion -> PRINTLN LPAREN dato RPAREN .)
    PRINTLN         reduce using rule 17 (impresion -> PRINTLN LPAREN dato RPAREN .)
    FOR             reduce using rule 17 (impresion -> PRINTLN LPAREN dato RPAREN .)
    VARIABLE        reduce using rule 17 (impresion -> PRINTLN LPAREN dato RPAREN .)
    IF              reduce using rule 17 (impresion -> PRINTLN LPAREN dato RPAREN .)
    VAR             reduce using rule 17 (impresion -> PRINTLN LPAREN dato RPAREN .)
    STRING          reduce using rule 17 (impresion -> PRINTLN LPAREN dato RPAREN .)
    INT             reduce using rule 17 (impresion -> PRINTLN LPAREN dato RPAREN .)
    SWITCH          reduce using rule 17 (impresion -> PRINTLN LPAREN dato RPAREN .)
    FUNC            reduce using rule 17 (impresion -> PRINTLN LPAREN dato RPAREN .)
    $end            reduce using rule 17 (impresion -> PRINTLN LPAREN dato RPAREN .)
    RCBRACKET       reduce using rule 17 (impresion -> PRINTLN LPAREN dato RPAREN .)
    RETURN          reduce using rule 17 (impresion -> PRINTLN LPAREN dato RPAREN .)
    CASE            reduce using rule 17 (impresion -> PRINTLN LPAREN dato RPAREN .)
    DEFAULT         reduce using rule 17 (impresion -> PRINTLN LPAREN dato RPAREN .)


state 83

    (22) for -> FOR VARIABLE FASTDEC INT . PUNTO_COMA VARIABLE sigcomparacion INT PUNTO_COMA VARIABLE incremento LCBRACKET bloqueI RCBRACKET

    PUNTO_COMA      shift and go to state 100


state 84

    (24) for3 -> FOR LCBRACKET bloqueI RCBRACKET .

    PRINT           reduce using rule 24 (for3 -> FOR LCBRACKET bloqueI RCBRACKET .)
    PRINTLN         reduce using rule 24 (for3 -> FOR LCBRACKET bloqueI RCBRACKET .)
    FOR             reduce using rule 24 (for3 -> FOR LCBRACKET bloqueI RCBRACKET .)
    VARIABLE        reduce using rule 24 (for3 -> FOR LCBRACKET bloqueI RCBRACKET .)
    IF              reduce using rule 24 (for3 -> FOR LCBRACKET bloqueI RCBRACKET .)
    VAR             reduce using rule 24 (for3 -> FOR LCBRACKET bloqueI RCBRACKET .)
    STRING          reduce using rule 24 (for3 -> FOR LCBRACKET bloqueI RCBRACKET .)
    INT             reduce using rule 24 (for3 -> FOR LCBRACKET bloqueI RCBRACKET .)
    SWITCH          reduce using rule 24 (for3 -> FOR LCBRACKET bloqueI RCBRACKET .)
    FUNC            reduce using rule 24 (for3 -> FOR LCBRACKET bloqueI RCBRACKET .)
    $end            reduce using rule 24 (for3 -> FOR LCBRACKET bloqueI RCBRACKET .)
    RCBRACKET       reduce using rule 24 (for3 -> FOR LCBRACKET bloqueI RCBRACKET .)
    RETURN          reduce using rule 24 (for3 -> FOR LCBRACKET bloqueI RCBRACKET .)
    CASE            reduce using rule 24 (for3 -> FOR LCBRACKET bloqueI RCBRACKET .)
    DEFAULT         reduce using rule 24 (for3 -> FOR LCBRACKET bloqueI RCBRACKET .)


state 85

    (23) for2 -> FOR comparacionF LCBRACKET bloqueI . RCBRACKET

    RCBRACKET       shift and go to state 101


state 86

    (33) comparacionF -> dato sigcomparacion dato .

    LCBRACKET       reduce using rule 33 (comparacionF -> dato sigcomparacion dato .)


state 87

    (53) mapa -> VARIABLE EQUALS MAP LBRACKET . TDATA RBRACKET TDATA LCBRACKET adentro RCBRACKET
    (54) TDATA -> . TSTRING
    (55) TDATA -> . TINT
    (56) TDATA -> . TFLOAT

    TSTRING         shift and go to state 75
    TINT            shift and go to state 76
    TFLOAT          shift and go to state 77

    TDATA                          shift and go to state 102

state 88

    (35) array -> VARIABLE FASTDEC LBRACKET INT . RBRACKET TDATA LCBRACKET elementArray RCBRACKET
    (71) ArraySemantica -> VARIABLE FASTDEC LBRACKET INT . TINT LCBRACKET elementIntS RCBRACKET

    RBRACKET        shift and go to state 103
    TINT            shift and go to state 104


state 89

    (60) si -> IF comparacion LCBRACKET instrucciones . RCBRACKET

    RCBRACKET       shift and go to state 105


state 90

    (61) comparacion -> dato sigcomparacion dato .

    LCBRACKET       reduce using rule 61 (comparacion -> dato sigcomparacion dato .)
    PRINT           reduce using rule 61 (comparacion -> dato sigcomparacion dato .)
    PRINTLN         reduce using rule 61 (comparacion -> dato sigcomparacion dato .)
    FOR             reduce using rule 61 (comparacion -> dato sigcomparacion dato .)
    VARIABLE        reduce using rule 61 (comparacion -> dato sigcomparacion dato .)
    IF              reduce using rule 61 (comparacion -> dato sigcomparacion dato .)
    VAR             reduce using rule 61 (comparacion -> dato sigcomparacion dato .)
    STRING          reduce using rule 61 (comparacion -> dato sigcomparacion dato .)
    INT             reduce using rule 61 (comparacion -> dato sigcomparacion dato .)
    SWITCH          reduce using rule 61 (comparacion -> dato sigcomparacion dato .)
    FUNC            reduce using rule 61 (comparacion -> dato sigcomparacion dato .)
    $end            reduce using rule 61 (comparacion -> dato sigcomparacion dato .)
    RCBRACKET       reduce using rule 61 (comparacion -> dato sigcomparacion dato .)
    RETURN          reduce using rule 61 (comparacion -> dato sigcomparacion dato .)
    CASE            reduce using rule 61 (comparacion -> dato sigcomparacion dato .)
    DEFAULT         reduce using rule 61 (comparacion -> dato sigcomparacion dato .)


state 91

    (34) array -> VAR VARIABLE EQUALS LBRACKET . INT RBRACKET TDATA LCBRACKET elementArray RCBRACKET
    (70) ArraySemantica -> VAR VARIABLE EQUALS LBRACKET . INT RBRACKET TSTRING LCBRACKET elementStringS RCBRACKET

    INT             shift and go to state 106


state 92

    (66) varobviado -> VAR VARIABLE EQUALS dato .

    PRINT           reduce using rule 66 (varobviado -> VAR VARIABLE EQUALS dato .)
    PRINTLN         reduce using rule 66 (varobviado -> VAR VARIABLE EQUALS dato .)
    FOR             reduce using rule 66 (varobviado -> VAR VARIABLE EQUALS dato .)
    VARIABLE        reduce using rule 66 (varobviado -> VAR VARIABLE EQUALS dato .)
    IF              reduce using rule 66 (varobviado -> VAR VARIABLE EQUALS dato .)
    VAR             reduce using rule 66 (varobviado -> VAR VARIABLE EQUALS dato .)
    STRING          reduce using rule 66 (varobviado -> VAR VARIABLE EQUALS dato .)
    INT             reduce using rule 66 (varobviado -> VAR VARIABLE EQUALS dato .)
    SWITCH          reduce using rule 66 (varobviado -> VAR VARIABLE EQUALS dato .)
    FUNC            reduce using rule 66 (varobviado -> VAR VARIABLE EQUALS dato .)
    $end            reduce using rule 66 (varobviado -> VAR VARIABLE EQUALS dato .)
    RCBRACKET       reduce using rule 66 (varobviado -> VAR VARIABLE EQUALS dato .)
    RETURN          reduce using rule 66 (varobviado -> VAR VARIABLE EQUALS dato .)
    CASE            reduce using rule 66 (varobviado -> VAR VARIABLE EQUALS dato .)
    DEFAULT         reduce using rule 66 (varobviado -> VAR VARIABLE EQUALS dato .)


state 93

    (65) varsimple -> VAR VARIABLE TDATA EQUALS . dato
    (18) dato -> . INT
    (19) dato -> . STRING
    (20) dato -> . FLOAT
    (21) dato -> . VARIABLE

    INT             shift and go to state 37
    STRING          shift and go to state 41
    FLOAT           shift and go to state 42
    VARIABLE        shift and go to state 48

    dato                           shift and go to state 107

state 94

    (77) switchh -> SWITCH VARIABLE LCBRACKET cases . def RCBRACKET
    (81) def -> . DEFAULT COLON instrucciones

    DEFAULT         shift and go to state 109

    def                            shift and go to state 108

state 95

    (78) cases -> case1 .
    (79) cases -> case1 . cases
    (78) cases -> . case1
    (79) cases -> . case1 cases
    (80) case1 -> . CASE INT COLON instrucciones

    DEFAULT         reduce using rule 78 (cases -> case1 .)
    CASE            shift and go to state 96

    case1                          shift and go to state 95
    cases                          shift and go to state 110

state 96

    (80) case1 -> CASE . INT COLON instrucciones

    INT             shift and go to state 111


state 97

    (42) funSimple -> FUNC nombreFuncion LPAREN RPAREN . LCBRACKET bloqueI RCBRACKET
    (44) funcRetorno -> FUNC nombreFuncion LPAREN RPAREN . LPAREN datoReturn RPAREN LCBRACKET bloqueI returnF RCBRACKET

    LCBRACKET       shift and go to state 113
    LPAREN          shift and go to state 112


state 98

    (43) funcPa -> FUNC nombreFuncion LPAREN parametrosF . RPAREN LCBRACKET bloqueI RCBRACKET
    (45) funcCompleta -> FUNC nombreFuncion LPAREN parametrosF . RPAREN LPAREN datoReturn RPAREN LCBRACKET bloqueI returnF RCBRACKET

    RPAREN          shift and go to state 114


state 99

    (47) parametrosF -> VARIABLE . TDATA
    (48) parametrosF -> VARIABLE . TDATA COMMA parametrosF
    (54) TDATA -> . TSTRING
    (55) TDATA -> . TINT
    (56) TDATA -> . TFLOAT

    TSTRING         shift and go to state 75
    TINT            shift and go to state 76
    TFLOAT          shift and go to state 77

    TDATA                          shift and go to state 115

state 100

    (22) for -> FOR VARIABLE FASTDEC INT PUNTO_COMA . VARIABLE sigcomparacion INT PUNTO_COMA VARIABLE incremento LCBRACKET bloqueI RCBRACKET

    VARIABLE        shift and go to state 116


state 101

    (23) for2 -> FOR comparacionF LCBRACKET bloqueI RCBRACKET .

    PRINT           reduce using rule 23 (for2 -> FOR comparacionF LCBRACKET bloqueI RCBRACKET .)
    PRINTLN         reduce using rule 23 (for2 -> FOR comparacionF LCBRACKET bloqueI RCBRACKET .)
    FOR             reduce using rule 23 (for2 -> FOR comparacionF LCBRACKET bloqueI RCBRACKET .)
    VARIABLE        reduce using rule 23 (for2 -> FOR comparacionF LCBRACKET bloqueI RCBRACKET .)
    IF              reduce using rule 23 (for2 -> FOR comparacionF LCBRACKET bloqueI RCBRACKET .)
    VAR             reduce using rule 23 (for2 -> FOR comparacionF LCBRACKET bloqueI RCBRACKET .)
    STRING          reduce using rule 23 (for2 -> FOR comparacionF LCBRACKET bloqueI RCBRACKET .)
    INT             reduce using rule 23 (for2 -> FOR comparacionF LCBRACKET bloqueI RCBRACKET .)
    SWITCH          reduce using rule 23 (for2 -> FOR comparacionF LCBRACKET bloqueI RCBRACKET .)
    FUNC            reduce using rule 23 (for2 -> FOR comparacionF LCBRACKET bloqueI RCBRACKET .)
    $end            reduce using rule 23 (for2 -> FOR comparacionF LCBRACKET bloqueI RCBRACKET .)
    RCBRACKET       reduce using rule 23 (for2 -> FOR comparacionF LCBRACKET bloqueI RCBRACKET .)
    RETURN          reduce using rule 23 (for2 -> FOR comparacionF LCBRACKET bloqueI RCBRACKET .)
    CASE            reduce using rule 23 (for2 -> FOR comparacionF LCBRACKET bloqueI RCBRACKET .)
    DEFAULT         reduce using rule 23 (for2 -> FOR comparacionF LCBRACKET bloqueI RCBRACKET .)


state 102

    (53) mapa -> VARIABLE EQUALS MAP LBRACKET TDATA . RBRACKET TDATA LCBRACKET adentro RCBRACKET

    RBRACKET        shift and go to state 117


state 103

    (35) array -> VARIABLE FASTDEC LBRACKET INT RBRACKET . TDATA LCBRACKET elementArray RCBRACKET
    (54) TDATA -> . TSTRING
    (55) TDATA -> . TINT
    (56) TDATA -> . TFLOAT

    TSTRING         shift and go to state 75
    TINT            shift and go to state 76
    TFLOAT          shift and go to state 77

    TDATA                          shift and go to state 118

state 104

    (71) ArraySemantica -> VARIABLE FASTDEC LBRACKET INT TINT . LCBRACKET elementIntS RCBRACKET

    LCBRACKET       shift and go to state 119


state 105

    (60) si -> IF comparacion LCBRACKET instrucciones RCBRACKET .

    PRINT           reduce using rule 60 (si -> IF comparacion LCBRACKET instrucciones RCBRACKET .)
    PRINTLN         reduce using rule 60 (si -> IF comparacion LCBRACKET instrucciones RCBRACKET .)
    FOR             reduce using rule 60 (si -> IF comparacion LCBRACKET instrucciones RCBRACKET .)
    VARIABLE        reduce using rule 60 (si -> IF comparacion LCBRACKET instrucciones RCBRACKET .)
    IF              reduce using rule 60 (si -> IF comparacion LCBRACKET instrucciones RCBRACKET .)
    VAR             reduce using rule 60 (si -> IF comparacion LCBRACKET instrucciones RCBRACKET .)
    STRING          reduce using rule 60 (si -> IF comparacion LCBRACKET instrucciones RCBRACKET .)
    INT             reduce using rule 60 (si -> IF comparacion LCBRACKET instrucciones RCBRACKET .)
    SWITCH          reduce using rule 60 (si -> IF comparacion LCBRACKET instrucciones RCBRACKET .)
    FUNC            reduce using rule 60 (si -> IF comparacion LCBRACKET instrucciones RCBRACKET .)
    $end            reduce using rule 60 (si -> IF comparacion LCBRACKET instrucciones RCBRACKET .)
    RCBRACKET       reduce using rule 60 (si -> IF comparacion LCBRACKET instrucciones RCBRACKET .)
    RETURN          reduce using rule 60 (si -> IF comparacion LCBRACKET instrucciones RCBRACKET .)
    CASE            reduce using rule 60 (si -> IF comparacion LCBRACKET instrucciones RCBRACKET .)
    DEFAULT         reduce using rule 60 (si -> IF comparacion LCBRACKET instrucciones RCBRACKET .)


state 106

    (34) array -> VAR VARIABLE EQUALS LBRACKET INT . RBRACKET TDATA LCBRACKET elementArray RCBRACKET
    (70) ArraySemantica -> VAR VARIABLE EQUALS LBRACKET INT . RBRACKET TSTRING LCBRACKET elementStringS RCBRACKET

    RBRACKET        shift and go to state 120


state 107

    (65) varsimple -> VAR VARIABLE TDATA EQUALS dato .

    PRINT           reduce using rule 65 (varsimple -> VAR VARIABLE TDATA EQUALS dato .)
    PRINTLN         reduce using rule 65 (varsimple -> VAR VARIABLE TDATA EQUALS dato .)
    FOR             reduce using rule 65 (varsimple -> VAR VARIABLE TDATA EQUALS dato .)
    VARIABLE        reduce using rule 65 (varsimple -> VAR VARIABLE TDATA EQUALS dato .)
    IF              reduce using rule 65 (varsimple -> VAR VARIABLE TDATA EQUALS dato .)
    VAR             reduce using rule 65 (varsimple -> VAR VARIABLE TDATA EQUALS dato .)
    STRING          reduce using rule 65 (varsimple -> VAR VARIABLE TDATA EQUALS dato .)
    INT             reduce using rule 65 (varsimple -> VAR VARIABLE TDATA EQUALS dato .)
    SWITCH          reduce using rule 65 (varsimple -> VAR VARIABLE TDATA EQUALS dato .)
    FUNC            reduce using rule 65 (varsimple -> VAR VARIABLE TDATA EQUALS dato .)
    $end            reduce using rule 65 (varsimple -> VAR VARIABLE TDATA EQUALS dato .)
    RCBRACKET       reduce using rule 65 (varsimple -> VAR VARIABLE TDATA EQUALS dato .)
    RETURN          reduce using rule 65 (varsimple -> VAR VARIABLE TDATA EQUALS dato .)
    CASE            reduce using rule 65 (varsimple -> VAR VARIABLE TDATA EQUALS dato .)
    DEFAULT         reduce using rule 65 (varsimple -> VAR VARIABLE TDATA EQUALS dato .)


state 108

    (77) switchh -> SWITCH VARIABLE LCBRACKET cases def . RCBRACKET

    RCBRACKET       shift and go to state 121


state 109

    (81) def -> DEFAULT . COLON instrucciones

    COLON           shift and go to state 122


state 110

    (79) cases -> case1 cases .

    DEFAULT         reduce using rule 79 (cases -> case1 cases .)


state 111

    (80) case1 -> CASE INT . COLON instrucciones

    COLON           shift and go to state 123


state 112

    (44) funcRetorno -> FUNC nombreFuncion LPAREN RPAREN LPAREN . datoReturn RPAREN LCBRACKET bloqueI returnF RCBRACKET
    (49) datoReturn -> . TDATA
    (50) datoReturn -> . TDATA COMMA TDATA
    (54) TDATA -> . TSTRING
    (55) TDATA -> . TINT
    (56) TDATA -> . TFLOAT

    TSTRING         shift and go to state 75
    TINT            shift and go to state 76
    TFLOAT          shift and go to state 77

    datoReturn                     shift and go to state 124
    TDATA                          shift and go to state 125

state 113

    (42) funSimple -> FUNC nombreFuncion LPAREN RPAREN LCBRACKET . bloqueI RCBRACKET
    (1) bloqueI -> . instrucciones
    (2) bloqueI -> . instrucciones bloqueI
    (3) instrucciones -> . impresion
    (4) instrucciones -> . for
    (5) instrucciones -> . for2
    (6) instrucciones -> . for3
    (7) instrucciones -> . mapa
    (8) instrucciones -> . si
    (9) instrucciones -> . array
    (10) instrucciones -> . funcion
    (11) instrucciones -> . concatDatos
    (12) instrucciones -> . ArraySemantica
    (13) instrucciones -> . switchh
    (14) instrucciones -> . asignaciones
    (15) instrucciones -> . expresionCondicion
    (16) impresion -> . PRINT LPAREN dato RPAREN
    (17) impresion -> . PRINTLN LPAREN dato RPAREN
    (22) for -> . FOR VARIABLE FASTDEC INT PUNTO_COMA VARIABLE sigcomparacion INT PUNTO_COMA VARIABLE incremento LCBRACKET bloqueI RCBRACKET
    (23) for2 -> . FOR comparacionF LCBRACKET bloqueI RCBRACKET
    (24) for3 -> . FOR LCBRACKET bloqueI RCBRACKET
    (53) mapa -> . VARIABLE EQUALS MAP LBRACKET TDATA RBRACKET TDATA LCBRACKET adentro RCBRACKET
    (60) si -> . IF comparacion LCBRACKET instrucciones RCBRACKET
    (34) array -> . VAR VARIABLE EQUALS LBRACKET INT RBRACKET TDATA LCBRACKET elementArray RCBRACKET
    (35) array -> . VARIABLE FASTDEC LBRACKET INT RBRACKET TDATA LCBRACKET elementArray RCBRACKET
    (38) funcion -> . funSimple
    (39) funcion -> . funcPa
    (40) funcion -> . funcRetorno
    (41) funcion -> . funcCompleta
    (68) concatDatos -> . STRING MAS STRING
    (69) concatDatos -> . INT MAS INT
    (70) ArraySemantica -> . VAR VARIABLE EQUALS LBRACKET INT RBRACKET TSTRING LCBRACKET elementStringS RCBRACKET
    (71) ArraySemantica -> . VARIABLE FASTDEC LBRACKET INT TINT LCBRACKET elementIntS RCBRACKET
    (77) switchh -> . SWITCH VARIABLE LCBRACKET cases def RCBRACKET
    (62) asignaciones -> . varsimple
    (63) asignaciones -> . varobviado
    (64) asignaciones -> . decfast
    (76) expresionCondicion -> . VARIABLE FASTDEC comparacion
    (42) funSimple -> . FUNC nombreFuncion LPAREN RPAREN LCBRACKET bloqueI RCBRACKET
    (43) funcPa -> . FUNC nombreFuncion LPAREN parametrosF RPAREN LCBRACKET bloqueI RCBRACKET
    (44) funcRetorno -> . FUNC nombreFuncion LPAREN RPAREN LPAREN datoReturn RPAREN LCBRACKET bloqueI returnF RCBRACKET
    (45) funcCompleta -> . FUNC nombreFuncion LPAREN parametrosF RPAREN LPAREN datoReturn RPAREN LCBRACKET bloqueI returnF RCBRACKET
    (65) varsimple -> . VAR VARIABLE TDATA EQUALS dato
    (66) varobviado -> . VAR VARIABLE EQUALS dato
    (67) decfast -> . VARIABLE FASTDEC dato

    PRINT           shift and go to state 16
    PRINTLN         shift and go to state 17
    FOR             shift and go to state 18
    VARIABLE        shift and go to state 19
    IF              shift and go to state 21
    VAR             shift and go to state 22
    STRING          shift and go to state 27
    INT             shift and go to state 20
    SWITCH          shift and go to state 28
    FUNC            shift and go to state 32

    bloqueI                        shift and go to state 126
    instrucciones                  shift and go to state 2
    impresion                      shift and go to state 3
    for                            shift and go to state 4
    for2                           shift and go to state 5
    for3                           shift and go to state 6
    mapa                           shift and go to state 7
    si                             shift and go to state 8
    array                          shift and go to state 9
    funcion                        shift and go to state 10
    concatDatos                    shift and go to state 11
    ArraySemantica                 shift and go to state 12
    switchh                        shift and go to state 13
    asignaciones                   shift and go to state 14
    expresionCondicion             shift and go to state 15
    funSimple                      shift and go to state 23
    funcPa                         shift and go to state 24
    funcRetorno                    shift and go to state 25
    funcCompleta                   shift and go to state 26
    varsimple                      shift and go to state 29
    varobviado                     shift and go to state 30
    decfast                        shift and go to state 31

state 114

    (43) funcPa -> FUNC nombreFuncion LPAREN parametrosF RPAREN . LCBRACKET bloqueI RCBRACKET
    (45) funcCompleta -> FUNC nombreFuncion LPAREN parametrosF RPAREN . LPAREN datoReturn RPAREN LCBRACKET bloqueI returnF RCBRACKET

    LCBRACKET       shift and go to state 128
    LPAREN          shift and go to state 127


state 115

    (47) parametrosF -> VARIABLE TDATA .
    (48) parametrosF -> VARIABLE TDATA . COMMA parametrosF

    RPAREN          reduce using rule 47 (parametrosF -> VARIABLE TDATA .)
    COMMA           shift and go to state 129


state 116

    (22) for -> FOR VARIABLE FASTDEC INT PUNTO_COMA VARIABLE . sigcomparacion INT PUNTO_COMA VARIABLE incremento LCBRACKET bloqueI RCBRACKET
    (27) sigcomparacion -> . MENORQUE
    (28) sigcomparacion -> . MAYORQUE
    (29) sigcomparacion -> . DIFERENTE
    (30) sigcomparacion -> . COMPARA_IGUAL
    (31) sigcomparacion -> . MAYORIGUAL
    (32) sigcomparacion -> . MENORIGUAL

    MENORQUE        shift and go to state 60
    MAYORQUE        shift and go to state 61
    DIFERENTE       shift and go to state 62
    COMPARA_IGUAL   shift and go to state 63
    MAYORIGUAL      shift and go to state 64
    MENORIGUAL      shift and go to state 65

    sigcomparacion                 shift and go to state 130

state 117

    (53) mapa -> VARIABLE EQUALS MAP LBRACKET TDATA RBRACKET . TDATA LCBRACKET adentro RCBRACKET
    (54) TDATA -> . TSTRING
    (55) TDATA -> . TINT
    (56) TDATA -> . TFLOAT

    TSTRING         shift and go to state 75
    TINT            shift and go to state 76
    TFLOAT          shift and go to state 77

    TDATA                          shift and go to state 131

state 118

    (35) array -> VARIABLE FASTDEC LBRACKET INT RBRACKET TDATA . LCBRACKET elementArray RCBRACKET

    LCBRACKET       shift and go to state 132


state 119

    (71) ArraySemantica -> VARIABLE FASTDEC LBRACKET INT TINT LCBRACKET . elementIntS RCBRACKET
    (74) elementIntS -> . INT
    (75) elementIntS -> . INT COMMA elementIntS

    INT             shift and go to state 133

    elementIntS                    shift and go to state 134

state 120

    (34) array -> VAR VARIABLE EQUALS LBRACKET INT RBRACKET . TDATA LCBRACKET elementArray RCBRACKET
    (70) ArraySemantica -> VAR VARIABLE EQUALS LBRACKET INT RBRACKET . TSTRING LCBRACKET elementStringS RCBRACKET
    (54) TDATA -> . TSTRING
    (55) TDATA -> . TINT
    (56) TDATA -> . TFLOAT

    TSTRING         shift and go to state 136
    TINT            shift and go to state 76
    TFLOAT          shift and go to state 77

    TDATA                          shift and go to state 135

state 121

    (77) switchh -> SWITCH VARIABLE LCBRACKET cases def RCBRACKET .

    PRINT           reduce using rule 77 (switchh -> SWITCH VARIABLE LCBRACKET cases def RCBRACKET .)
    PRINTLN         reduce using rule 77 (switchh -> SWITCH VARIABLE LCBRACKET cases def RCBRACKET .)
    FOR             reduce using rule 77 (switchh -> SWITCH VARIABLE LCBRACKET cases def RCBRACKET .)
    VARIABLE        reduce using rule 77 (switchh -> SWITCH VARIABLE LCBRACKET cases def RCBRACKET .)
    IF              reduce using rule 77 (switchh -> SWITCH VARIABLE LCBRACKET cases def RCBRACKET .)
    VAR             reduce using rule 77 (switchh -> SWITCH VARIABLE LCBRACKET cases def RCBRACKET .)
    STRING          reduce using rule 77 (switchh -> SWITCH VARIABLE LCBRACKET cases def RCBRACKET .)
    INT             reduce using rule 77 (switchh -> SWITCH VARIABLE LCBRACKET cases def RCBRACKET .)
    SWITCH          reduce using rule 77 (switchh -> SWITCH VARIABLE LCBRACKET cases def RCBRACKET .)
    FUNC            reduce using rule 77 (switchh -> SWITCH VARIABLE LCBRACKET cases def RCBRACKET .)
    $end            reduce using rule 77 (switchh -> SWITCH VARIABLE LCBRACKET cases def RCBRACKET .)
    RCBRACKET       reduce using rule 77 (switchh -> SWITCH VARIABLE LCBRACKET cases def RCBRACKET .)
    RETURN          reduce using rule 77 (switchh -> SWITCH VARIABLE LCBRACKET cases def RCBRACKET .)
    CASE            reduce using rule 77 (switchh -> SWITCH VARIABLE LCBRACKET cases def RCBRACKET .)
    DEFAULT         reduce using rule 77 (switchh -> SWITCH VARIABLE LCBRACKET cases def RCBRACKET .)


state 122

    (81) def -> DEFAULT COLON . instrucciones
    (3) instrucciones -> . impresion
    (4) instrucciones -> . for
    (5) instrucciones -> . for2
    (6) instrucciones -> . for3
    (7) instrucciones -> . mapa
    (8) instrucciones -> . si
    (9) instrucciones -> . array
    (10) instrucciones -> . funcion
    (11) instrucciones -> . concatDatos
    (12) instrucciones -> . ArraySemantica
    (13) instrucciones -> . switchh
    (14) instrucciones -> . asignaciones
    (15) instrucciones -> . expresionCondicion
    (16) impresion -> . PRINT LPAREN dato RPAREN
    (17) impresion -> . PRINTLN LPAREN dato RPAREN
    (22) for -> . FOR VARIABLE FASTDEC INT PUNTO_COMA VARIABLE sigcomparacion INT PUNTO_COMA VARIABLE incremento LCBRACKET bloqueI RCBRACKET
    (23) for2 -> . FOR comparacionF LCBRACKET bloqueI RCBRACKET
    (24) for3 -> . FOR LCBRACKET bloqueI RCBRACKET
    (53) mapa -> . VARIABLE EQUALS MAP LBRACKET TDATA RBRACKET TDATA LCBRACKET adentro RCBRACKET
    (60) si -> . IF comparacion LCBRACKET instrucciones RCBRACKET
    (34) array -> . VAR VARIABLE EQUALS LBRACKET INT RBRACKET TDATA LCBRACKET elementArray RCBRACKET
    (35) array -> . VARIABLE FASTDEC LBRACKET INT RBRACKET TDATA LCBRACKET elementArray RCBRACKET
    (38) funcion -> . funSimple
    (39) funcion -> . funcPa
    (40) funcion -> . funcRetorno
    (41) funcion -> . funcCompleta
    (68) concatDatos -> . STRING MAS STRING
    (69) concatDatos -> . INT MAS INT
    (70) ArraySemantica -> . VAR VARIABLE EQUALS LBRACKET INT RBRACKET TSTRING LCBRACKET elementStringS RCBRACKET
    (71) ArraySemantica -> . VARIABLE FASTDEC LBRACKET INT TINT LCBRACKET elementIntS RCBRACKET
    (77) switchh -> . SWITCH VARIABLE LCBRACKET cases def RCBRACKET
    (62) asignaciones -> . varsimple
    (63) asignaciones -> . varobviado
    (64) asignaciones -> . decfast
    (76) expresionCondicion -> . VARIABLE FASTDEC comparacion
    (42) funSimple -> . FUNC nombreFuncion LPAREN RPAREN LCBRACKET bloqueI RCBRACKET
    (43) funcPa -> . FUNC nombreFuncion LPAREN parametrosF RPAREN LCBRACKET bloqueI RCBRACKET
    (44) funcRetorno -> . FUNC nombreFuncion LPAREN RPAREN LPAREN datoReturn RPAREN LCBRACKET bloqueI returnF RCBRACKET
    (45) funcCompleta -> . FUNC nombreFuncion LPAREN parametrosF RPAREN LPAREN datoReturn RPAREN LCBRACKET bloqueI returnF RCBRACKET
    (65) varsimple -> . VAR VARIABLE TDATA EQUALS dato
    (66) varobviado -> . VAR VARIABLE EQUALS dato
    (67) decfast -> . VARIABLE FASTDEC dato

    PRINT           shift and go to state 16
    PRINTLN         shift and go to state 17
    FOR             shift and go to state 18
    VARIABLE        shift and go to state 19
    IF              shift and go to state 21
    VAR             shift and go to state 22
    STRING          shift and go to state 27
    INT             shift and go to state 20
    SWITCH          shift and go to state 28
    FUNC            shift and go to state 32

    instrucciones                  shift and go to state 137
    impresion                      shift and go to state 3
    for                            shift and go to state 4
    for2                           shift and go to state 5
    for3                           shift and go to state 6
    mapa                           shift and go to state 7
    si                             shift and go to state 8
    array                          shift and go to state 9
    funcion                        shift and go to state 10
    concatDatos                    shift and go to state 11
    ArraySemantica                 shift and go to state 12
    switchh                        shift and go to state 13
    asignaciones                   shift and go to state 14
    expresionCondicion             shift and go to state 15
    funSimple                      shift and go to state 23
    funcPa                         shift and go to state 24
    funcRetorno                    shift and go to state 25
    funcCompleta                   shift and go to state 26
    varsimple                      shift and go to state 29
    varobviado                     shift and go to state 30
    decfast                        shift and go to state 31

state 123

    (80) case1 -> CASE INT COLON . instrucciones
    (3) instrucciones -> . impresion
    (4) instrucciones -> . for
    (5) instrucciones -> . for2
    (6) instrucciones -> . for3
    (7) instrucciones -> . mapa
    (8) instrucciones -> . si
    (9) instrucciones -> . array
    (10) instrucciones -> . funcion
    (11) instrucciones -> . concatDatos
    (12) instrucciones -> . ArraySemantica
    (13) instrucciones -> . switchh
    (14) instrucciones -> . asignaciones
    (15) instrucciones -> . expresionCondicion
    (16) impresion -> . PRINT LPAREN dato RPAREN
    (17) impresion -> . PRINTLN LPAREN dato RPAREN
    (22) for -> . FOR VARIABLE FASTDEC INT PUNTO_COMA VARIABLE sigcomparacion INT PUNTO_COMA VARIABLE incremento LCBRACKET bloqueI RCBRACKET
    (23) for2 -> . FOR comparacionF LCBRACKET bloqueI RCBRACKET
    (24) for3 -> . FOR LCBRACKET bloqueI RCBRACKET
    (53) mapa -> . VARIABLE EQUALS MAP LBRACKET TDATA RBRACKET TDATA LCBRACKET adentro RCBRACKET
    (60) si -> . IF comparacion LCBRACKET instrucciones RCBRACKET
    (34) array -> . VAR VARIABLE EQUALS LBRACKET INT RBRACKET TDATA LCBRACKET elementArray RCBRACKET
    (35) array -> . VARIABLE FASTDEC LBRACKET INT RBRACKET TDATA LCBRACKET elementArray RCBRACKET
    (38) funcion -> . funSimple
    (39) funcion -> . funcPa
    (40) funcion -> . funcRetorno
    (41) funcion -> . funcCompleta
    (68) concatDatos -> . STRING MAS STRING
    (69) concatDatos -> . INT MAS INT
    (70) ArraySemantica -> . VAR VARIABLE EQUALS LBRACKET INT RBRACKET TSTRING LCBRACKET elementStringS RCBRACKET
    (71) ArraySemantica -> . VARIABLE FASTDEC LBRACKET INT TINT LCBRACKET elementIntS RCBRACKET
    (77) switchh -> . SWITCH VARIABLE LCBRACKET cases def RCBRACKET
    (62) asignaciones -> . varsimple
    (63) asignaciones -> . varobviado
    (64) asignaciones -> . decfast
    (76) expresionCondicion -> . VARIABLE FASTDEC comparacion
    (42) funSimple -> . FUNC nombreFuncion LPAREN RPAREN LCBRACKET bloqueI RCBRACKET
    (43) funcPa -> . FUNC nombreFuncion LPAREN parametrosF RPAREN LCBRACKET bloqueI RCBRACKET
    (44) funcRetorno -> . FUNC nombreFuncion LPAREN RPAREN LPAREN datoReturn RPAREN LCBRACKET bloqueI returnF RCBRACKET
    (45) funcCompleta -> . FUNC nombreFuncion LPAREN parametrosF RPAREN LPAREN datoReturn RPAREN LCBRACKET bloqueI returnF RCBRACKET
    (65) varsimple -> . VAR VARIABLE TDATA EQUALS dato
    (66) varobviado -> . VAR VARIABLE EQUALS dato
    (67) decfast -> . VARIABLE FASTDEC dato

    PRINT           shift and go to state 16
    PRINTLN         shift and go to state 17
    FOR             shift and go to state 18
    VARIABLE        shift and go to state 19
    IF              shift and go to state 21
    VAR             shift and go to state 22
    STRING          shift and go to state 27
    INT             shift and go to state 20
    SWITCH          shift and go to state 28
    FUNC            shift and go to state 32

    instrucciones                  shift and go to state 138
    impresion                      shift and go to state 3
    for                            shift and go to state 4
    for2                           shift and go to state 5
    for3                           shift and go to state 6
    mapa                           shift and go to state 7
    si                             shift and go to state 8
    array                          shift and go to state 9
    funcion                        shift and go to state 10
    concatDatos                    shift and go to state 11
    ArraySemantica                 shift and go to state 12
    switchh                        shift and go to state 13
    asignaciones                   shift and go to state 14
    expresionCondicion             shift and go to state 15
    funSimple                      shift and go to state 23
    funcPa                         shift and go to state 24
    funcRetorno                    shift and go to state 25
    funcCompleta                   shift and go to state 26
    varsimple                      shift and go to state 29
    varobviado                     shift and go to state 30
    decfast                        shift and go to state 31

state 124

    (44) funcRetorno -> FUNC nombreFuncion LPAREN RPAREN LPAREN datoReturn . RPAREN LCBRACKET bloqueI returnF RCBRACKET

    RPAREN          shift and go to state 139


state 125

    (49) datoReturn -> TDATA .
    (50) datoReturn -> TDATA . COMMA TDATA

    RPAREN          reduce using rule 49 (datoReturn -> TDATA .)
    COMMA           shift and go to state 140


state 126

    (42) funSimple -> FUNC nombreFuncion LPAREN RPAREN LCBRACKET bloqueI . RCBRACKET

    RCBRACKET       shift and go to state 141


state 127

    (45) funcCompleta -> FUNC nombreFuncion LPAREN parametrosF RPAREN LPAREN . datoReturn RPAREN LCBRACKET bloqueI returnF RCBRACKET
    (49) datoReturn -> . TDATA
    (50) datoReturn -> . TDATA COMMA TDATA
    (54) TDATA -> . TSTRING
    (55) TDATA -> . TINT
    (56) TDATA -> . TFLOAT

    TSTRING         shift and go to state 75
    TINT            shift and go to state 76
    TFLOAT          shift and go to state 77

    datoReturn                     shift and go to state 142
    TDATA                          shift and go to state 125

state 128

    (43) funcPa -> FUNC nombreFuncion LPAREN parametrosF RPAREN LCBRACKET . bloqueI RCBRACKET
    (1) bloqueI -> . instrucciones
    (2) bloqueI -> . instrucciones bloqueI
    (3) instrucciones -> . impresion
    (4) instrucciones -> . for
    (5) instrucciones -> . for2
    (6) instrucciones -> . for3
    (7) instrucciones -> . mapa
    (8) instrucciones -> . si
    (9) instrucciones -> . array
    (10) instrucciones -> . funcion
    (11) instrucciones -> . concatDatos
    (12) instrucciones -> . ArraySemantica
    (13) instrucciones -> . switchh
    (14) instrucciones -> . asignaciones
    (15) instrucciones -> . expresionCondicion
    (16) impresion -> . PRINT LPAREN dato RPAREN
    (17) impresion -> . PRINTLN LPAREN dato RPAREN
    (22) for -> . FOR VARIABLE FASTDEC INT PUNTO_COMA VARIABLE sigcomparacion INT PUNTO_COMA VARIABLE incremento LCBRACKET bloqueI RCBRACKET
    (23) for2 -> . FOR comparacionF LCBRACKET bloqueI RCBRACKET
    (24) for3 -> . FOR LCBRACKET bloqueI RCBRACKET
    (53) mapa -> . VARIABLE EQUALS MAP LBRACKET TDATA RBRACKET TDATA LCBRACKET adentro RCBRACKET
    (60) si -> . IF comparacion LCBRACKET instrucciones RCBRACKET
    (34) array -> . VAR VARIABLE EQUALS LBRACKET INT RBRACKET TDATA LCBRACKET elementArray RCBRACKET
    (35) array -> . VARIABLE FASTDEC LBRACKET INT RBRACKET TDATA LCBRACKET elementArray RCBRACKET
    (38) funcion -> . funSimple
    (39) funcion -> . funcPa
    (40) funcion -> . funcRetorno
    (41) funcion -> . funcCompleta
    (68) concatDatos -> . STRING MAS STRING
    (69) concatDatos -> . INT MAS INT
    (70) ArraySemantica -> . VAR VARIABLE EQUALS LBRACKET INT RBRACKET TSTRING LCBRACKET elementStringS RCBRACKET
    (71) ArraySemantica -> . VARIABLE FASTDEC LBRACKET INT TINT LCBRACKET elementIntS RCBRACKET
    (77) switchh -> . SWITCH VARIABLE LCBRACKET cases def RCBRACKET
    (62) asignaciones -> . varsimple
    (63) asignaciones -> . varobviado
    (64) asignaciones -> . decfast
    (76) expresionCondicion -> . VARIABLE FASTDEC comparacion
    (42) funSimple -> . FUNC nombreFuncion LPAREN RPAREN LCBRACKET bloqueI RCBRACKET
    (43) funcPa -> . FUNC nombreFuncion LPAREN parametrosF RPAREN LCBRACKET bloqueI RCBRACKET
    (44) funcRetorno -> . FUNC nombreFuncion LPAREN RPAREN LPAREN datoReturn RPAREN LCBRACKET bloqueI returnF RCBRACKET
    (45) funcCompleta -> . FUNC nombreFuncion LPAREN parametrosF RPAREN LPAREN datoReturn RPAREN LCBRACKET bloqueI returnF RCBRACKET
    (65) varsimple -> . VAR VARIABLE TDATA EQUALS dato
    (66) varobviado -> . VAR VARIABLE EQUALS dato
    (67) decfast -> . VARIABLE FASTDEC dato

    PRINT           shift and go to state 16
    PRINTLN         shift and go to state 17
    FOR             shift and go to state 18
    VARIABLE        shift and go to state 19
    IF              shift and go to state 21
    VAR             shift and go to state 22
    STRING          shift and go to state 27
    INT             shift and go to state 20
    SWITCH          shift and go to state 28
    FUNC            shift and go to state 32

    bloqueI                        shift and go to state 143
    instrucciones                  shift and go to state 2
    impresion                      shift and go to state 3
    for                            shift and go to state 4
    for2                           shift and go to state 5
    for3                           shift and go to state 6
    mapa                           shift and go to state 7
    si                             shift and go to state 8
    array                          shift and go to state 9
    funcion                        shift and go to state 10
    concatDatos                    shift and go to state 11
    ArraySemantica                 shift and go to state 12
    switchh                        shift and go to state 13
    asignaciones                   shift and go to state 14
    expresionCondicion             shift and go to state 15
    funSimple                      shift and go to state 23
    funcPa                         shift and go to state 24
    funcRetorno                    shift and go to state 25
    funcCompleta                   shift and go to state 26
    varsimple                      shift and go to state 29
    varobviado                     shift and go to state 30
    decfast                        shift and go to state 31

state 129

    (48) parametrosF -> VARIABLE TDATA COMMA . parametrosF
    (47) parametrosF -> . VARIABLE TDATA
    (48) parametrosF -> . VARIABLE TDATA COMMA parametrosF

    VARIABLE        shift and go to state 99

    parametrosF                    shift and go to state 144

state 130

    (22) for -> FOR VARIABLE FASTDEC INT PUNTO_COMA VARIABLE sigcomparacion . INT PUNTO_COMA VARIABLE incremento LCBRACKET bloqueI RCBRACKET

    INT             shift and go to state 145


state 131

    (53) mapa -> VARIABLE EQUALS MAP LBRACKET TDATA RBRACKET TDATA . LCBRACKET adentro RCBRACKET

    LCBRACKET       shift and go to state 146


state 132

    (35) array -> VARIABLE FASTDEC LBRACKET INT RBRACKET TDATA LCBRACKET . elementArray RCBRACKET
    (36) elementArray -> . dato
    (37) elementArray -> . dato COMMA elementArray
    (18) dato -> . INT
    (19) dato -> . STRING
    (20) dato -> . FLOAT
    (21) dato -> . VARIABLE

    INT             shift and go to state 37
    STRING          shift and go to state 41
    FLOAT           shift and go to state 42
    VARIABLE        shift and go to state 48

    elementArray                   shift and go to state 147
    dato                           shift and go to state 148

state 133

    (74) elementIntS -> INT .
    (75) elementIntS -> INT . COMMA elementIntS

    RCBRACKET       reduce using rule 74 (elementIntS -> INT .)
    COMMA           shift and go to state 149


state 134

    (71) ArraySemantica -> VARIABLE FASTDEC LBRACKET INT TINT LCBRACKET elementIntS . RCBRACKET

    RCBRACKET       shift and go to state 150


state 135

    (34) array -> VAR VARIABLE EQUALS LBRACKET INT RBRACKET TDATA . LCBRACKET elementArray RCBRACKET

    LCBRACKET       shift and go to state 151


state 136

    (70) ArraySemantica -> VAR VARIABLE EQUALS LBRACKET INT RBRACKET TSTRING . LCBRACKET elementStringS RCBRACKET
    (54) TDATA -> TSTRING .

  ! shift/reduce conflict for LCBRACKET resolved as shift
    LCBRACKET       shift and go to state 152

  ! LCBRACKET       [ reduce using rule 54 (TDATA -> TSTRING .) ]


state 137

    (81) def -> DEFAULT COLON instrucciones .

    RCBRACKET       reduce using rule 81 (def -> DEFAULT COLON instrucciones .)


state 138

    (80) case1 -> CASE INT COLON instrucciones .

    CASE            reduce using rule 80 (case1 -> CASE INT COLON instrucciones .)
    DEFAULT         reduce using rule 80 (case1 -> CASE INT COLON instrucciones .)


state 139

    (44) funcRetorno -> FUNC nombreFuncion LPAREN RPAREN LPAREN datoReturn RPAREN . LCBRACKET bloqueI returnF RCBRACKET

    LCBRACKET       shift and go to state 153


state 140

    (50) datoReturn -> TDATA COMMA . TDATA
    (54) TDATA -> . TSTRING
    (55) TDATA -> . TINT
    (56) TDATA -> . TFLOAT

    TSTRING         shift and go to state 75
    TINT            shift and go to state 76
    TFLOAT          shift and go to state 77

    TDATA                          shift and go to state 154

state 141

    (42) funSimple -> FUNC nombreFuncion LPAREN RPAREN LCBRACKET bloqueI RCBRACKET .

    PRINT           reduce using rule 42 (funSimple -> FUNC nombreFuncion LPAREN RPAREN LCBRACKET bloqueI RCBRACKET .)
    PRINTLN         reduce using rule 42 (funSimple -> FUNC nombreFuncion LPAREN RPAREN LCBRACKET bloqueI RCBRACKET .)
    FOR             reduce using rule 42 (funSimple -> FUNC nombreFuncion LPAREN RPAREN LCBRACKET bloqueI RCBRACKET .)
    VARIABLE        reduce using rule 42 (funSimple -> FUNC nombreFuncion LPAREN RPAREN LCBRACKET bloqueI RCBRACKET .)
    IF              reduce using rule 42 (funSimple -> FUNC nombreFuncion LPAREN RPAREN LCBRACKET bloqueI RCBRACKET .)
    VAR             reduce using rule 42 (funSimple -> FUNC nombreFuncion LPAREN RPAREN LCBRACKET bloqueI RCBRACKET .)
    STRING          reduce using rule 42 (funSimple -> FUNC nombreFuncion LPAREN RPAREN LCBRACKET bloqueI RCBRACKET .)
    INT             reduce using rule 42 (funSimple -> FUNC nombreFuncion LPAREN RPAREN LCBRACKET bloqueI RCBRACKET .)
    SWITCH          reduce using rule 42 (funSimple -> FUNC nombreFuncion LPAREN RPAREN LCBRACKET bloqueI RCBRACKET .)
    FUNC            reduce using rule 42 (funSimple -> FUNC nombreFuncion LPAREN RPAREN LCBRACKET bloqueI RCBRACKET .)
    $end            reduce using rule 42 (funSimple -> FUNC nombreFuncion LPAREN RPAREN LCBRACKET bloqueI RCBRACKET .)
    RCBRACKET       reduce using rule 42 (funSimple -> FUNC nombreFuncion LPAREN RPAREN LCBRACKET bloqueI RCBRACKET .)
    RETURN          reduce using rule 42 (funSimple -> FUNC nombreFuncion LPAREN RPAREN LCBRACKET bloqueI RCBRACKET .)
    CASE            reduce using rule 42 (funSimple -> FUNC nombreFuncion LPAREN RPAREN LCBRACKET bloqueI RCBRACKET .)
    DEFAULT         reduce using rule 42 (funSimple -> FUNC nombreFuncion LPAREN RPAREN LCBRACKET bloqueI RCBRACKET .)


state 142

    (45) funcCompleta -> FUNC nombreFuncion LPAREN parametrosF RPAREN LPAREN datoReturn . RPAREN LCBRACKET bloqueI returnF RCBRACKET

    RPAREN          shift and go to state 155


state 143

    (43) funcPa -> FUNC nombreFuncion LPAREN parametrosF RPAREN LCBRACKET bloqueI . RCBRACKET

    RCBRACKET       shift and go to state 156


state 144

    (48) parametrosF -> VARIABLE TDATA COMMA parametrosF .

    RPAREN          reduce using rule 48 (parametrosF -> VARIABLE TDATA COMMA parametrosF .)


state 145

    (22) for -> FOR VARIABLE FASTDEC INT PUNTO_COMA VARIABLE sigcomparacion INT . PUNTO_COMA VARIABLE incremento LCBRACKET bloqueI RCBRACKET

    PUNTO_COMA      shift and go to state 157


state 146

    (53) mapa -> VARIABLE EQUALS MAP LBRACKET TDATA RBRACKET TDATA LCBRACKET . adentro RCBRACKET
    (57) adentro -> . definicion
    (58) adentro -> . definicion COMMA adentro
    (59) definicion -> . dato COLON dato
    (18) dato -> . INT
    (19) dato -> . STRING
    (20) dato -> . FLOAT
    (21) dato -> . VARIABLE

    INT             shift and go to state 37
    STRING          shift and go to state 41
    FLOAT           shift and go to state 42
    VARIABLE        shift and go to state 48

    adentro                        shift and go to state 158
    definicion                     shift and go to state 159
    dato                           shift and go to state 160

state 147

    (35) array -> VARIABLE FASTDEC LBRACKET INT RBRACKET TDATA LCBRACKET elementArray . RCBRACKET

    RCBRACKET       shift and go to state 161


state 148

    (36) elementArray -> dato .
    (37) elementArray -> dato . COMMA elementArray

    RCBRACKET       reduce using rule 36 (elementArray -> dato .)
    COMMA           shift and go to state 162


state 149

    (75) elementIntS -> INT COMMA . elementIntS
    (74) elementIntS -> . INT
    (75) elementIntS -> . INT COMMA elementIntS

    INT             shift and go to state 133

    elementIntS                    shift and go to state 163

state 150

    (71) ArraySemantica -> VARIABLE FASTDEC LBRACKET INT TINT LCBRACKET elementIntS RCBRACKET .

    PRINT           reduce using rule 71 (ArraySemantica -> VARIABLE FASTDEC LBRACKET INT TINT LCBRACKET elementIntS RCBRACKET .)
    PRINTLN         reduce using rule 71 (ArraySemantica -> VARIABLE FASTDEC LBRACKET INT TINT LCBRACKET elementIntS RCBRACKET .)
    FOR             reduce using rule 71 (ArraySemantica -> VARIABLE FASTDEC LBRACKET INT TINT LCBRACKET elementIntS RCBRACKET .)
    VARIABLE        reduce using rule 71 (ArraySemantica -> VARIABLE FASTDEC LBRACKET INT TINT LCBRACKET elementIntS RCBRACKET .)
    IF              reduce using rule 71 (ArraySemantica -> VARIABLE FASTDEC LBRACKET INT TINT LCBRACKET elementIntS RCBRACKET .)
    VAR             reduce using rule 71 (ArraySemantica -> VARIABLE FASTDEC LBRACKET INT TINT LCBRACKET elementIntS RCBRACKET .)
    STRING          reduce using rule 71 (ArraySemantica -> VARIABLE FASTDEC LBRACKET INT TINT LCBRACKET elementIntS RCBRACKET .)
    INT             reduce using rule 71 (ArraySemantica -> VARIABLE FASTDEC LBRACKET INT TINT LCBRACKET elementIntS RCBRACKET .)
    SWITCH          reduce using rule 71 (ArraySemantica -> VARIABLE FASTDEC LBRACKET INT TINT LCBRACKET elementIntS RCBRACKET .)
    FUNC            reduce using rule 71 (ArraySemantica -> VARIABLE FASTDEC LBRACKET INT TINT LCBRACKET elementIntS RCBRACKET .)
    $end            reduce using rule 71 (ArraySemantica -> VARIABLE FASTDEC LBRACKET INT TINT LCBRACKET elementIntS RCBRACKET .)
    RCBRACKET       reduce using rule 71 (ArraySemantica -> VARIABLE FASTDEC LBRACKET INT TINT LCBRACKET elementIntS RCBRACKET .)
    RETURN          reduce using rule 71 (ArraySemantica -> VARIABLE FASTDEC LBRACKET INT TINT LCBRACKET elementIntS RCBRACKET .)
    CASE            reduce using rule 71 (ArraySemantica -> VARIABLE FASTDEC LBRACKET INT TINT LCBRACKET elementIntS RCBRACKET .)
    DEFAULT         reduce using rule 71 (ArraySemantica -> VARIABLE FASTDEC LBRACKET INT TINT LCBRACKET elementIntS RCBRACKET .)


state 151

    (34) array -> VAR VARIABLE EQUALS LBRACKET INT RBRACKET TDATA LCBRACKET . elementArray RCBRACKET
    (36) elementArray -> . dato
    (37) elementArray -> . dato COMMA elementArray
    (18) dato -> . INT
    (19) dato -> . STRING
    (20) dato -> . FLOAT
    (21) dato -> . VARIABLE

    INT             shift and go to state 37
    STRING          shift and go to state 41
    FLOAT           shift and go to state 42
    VARIABLE        shift and go to state 48

    elementArray                   shift and go to state 164
    dato                           shift and go to state 148

state 152

    (70) ArraySemantica -> VAR VARIABLE EQUALS LBRACKET INT RBRACKET TSTRING LCBRACKET . elementStringS RCBRACKET
    (72) elementStringS -> . STRING
    (73) elementStringS -> . STRING COMMA elementStringS

    STRING          shift and go to state 166

    elementStringS                 shift and go to state 165

state 153

    (44) funcRetorno -> FUNC nombreFuncion LPAREN RPAREN LPAREN datoReturn RPAREN LCBRACKET . bloqueI returnF RCBRACKET
    (1) bloqueI -> . instrucciones
    (2) bloqueI -> . instrucciones bloqueI
    (3) instrucciones -> . impresion
    (4) instrucciones -> . for
    (5) instrucciones -> . for2
    (6) instrucciones -> . for3
    (7) instrucciones -> . mapa
    (8) instrucciones -> . si
    (9) instrucciones -> . array
    (10) instrucciones -> . funcion
    (11) instrucciones -> . concatDatos
    (12) instrucciones -> . ArraySemantica
    (13) instrucciones -> . switchh
    (14) instrucciones -> . asignaciones
    (15) instrucciones -> . expresionCondicion
    (16) impresion -> . PRINT LPAREN dato RPAREN
    (17) impresion -> . PRINTLN LPAREN dato RPAREN
    (22) for -> . FOR VARIABLE FASTDEC INT PUNTO_COMA VARIABLE sigcomparacion INT PUNTO_COMA VARIABLE incremento LCBRACKET bloqueI RCBRACKET
    (23) for2 -> . FOR comparacionF LCBRACKET bloqueI RCBRACKET
    (24) for3 -> . FOR LCBRACKET bloqueI RCBRACKET
    (53) mapa -> . VARIABLE EQUALS MAP LBRACKET TDATA RBRACKET TDATA LCBRACKET adentro RCBRACKET
    (60) si -> . IF comparacion LCBRACKET instrucciones RCBRACKET
    (34) array -> . VAR VARIABLE EQUALS LBRACKET INT RBRACKET TDATA LCBRACKET elementArray RCBRACKET
    (35) array -> . VARIABLE FASTDEC LBRACKET INT RBRACKET TDATA LCBRACKET elementArray RCBRACKET
    (38) funcion -> . funSimple
    (39) funcion -> . funcPa
    (40) funcion -> . funcRetorno
    (41) funcion -> . funcCompleta
    (68) concatDatos -> . STRING MAS STRING
    (69) concatDatos -> . INT MAS INT
    (70) ArraySemantica -> . VAR VARIABLE EQUALS LBRACKET INT RBRACKET TSTRING LCBRACKET elementStringS RCBRACKET
    (71) ArraySemantica -> . VARIABLE FASTDEC LBRACKET INT TINT LCBRACKET elementIntS RCBRACKET
    (77) switchh -> . SWITCH VARIABLE LCBRACKET cases def RCBRACKET
    (62) asignaciones -> . varsimple
    (63) asignaciones -> . varobviado
    (64) asignaciones -> . decfast
    (76) expresionCondicion -> . VARIABLE FASTDEC comparacion
    (42) funSimple -> . FUNC nombreFuncion LPAREN RPAREN LCBRACKET bloqueI RCBRACKET
    (43) funcPa -> . FUNC nombreFuncion LPAREN parametrosF RPAREN LCBRACKET bloqueI RCBRACKET
    (44) funcRetorno -> . FUNC nombreFuncion LPAREN RPAREN LPAREN datoReturn RPAREN LCBRACKET bloqueI returnF RCBRACKET
    (45) funcCompleta -> . FUNC nombreFuncion LPAREN parametrosF RPAREN LPAREN datoReturn RPAREN LCBRACKET bloqueI returnF RCBRACKET
    (65) varsimple -> . VAR VARIABLE TDATA EQUALS dato
    (66) varobviado -> . VAR VARIABLE EQUALS dato
    (67) decfast -> . VARIABLE FASTDEC dato

    PRINT           shift and go to state 16
    PRINTLN         shift and go to state 17
    FOR             shift and go to state 18
    VARIABLE        shift and go to state 19
    IF              shift and go to state 21
    VAR             shift and go to state 22
    STRING          shift and go to state 27
    INT             shift and go to state 20
    SWITCH          shift and go to state 28
    FUNC            shift and go to state 32

    bloqueI                        shift and go to state 167
    instrucciones                  shift and go to state 2
    impresion                      shift and go to state 3
    for                            shift and go to state 4
    for2                           shift and go to state 5
    for3                           shift and go to state 6
    mapa                           shift and go to state 7
    si                             shift and go to state 8
    array                          shift and go to state 9
    funcion                        shift and go to state 10
    concatDatos                    shift and go to state 11
    ArraySemantica                 shift and go to state 12
    switchh                        shift and go to state 13
    asignaciones                   shift and go to state 14
    expresionCondicion             shift and go to state 15
    funSimple                      shift and go to state 23
    funcPa                         shift and go to state 24
    funcRetorno                    shift and go to state 25
    funcCompleta                   shift and go to state 26
    varsimple                      shift and go to state 29
    varobviado                     shift and go to state 30
    decfast                        shift and go to state 31

state 154

    (50) datoReturn -> TDATA COMMA TDATA .

    RPAREN          reduce using rule 50 (datoReturn -> TDATA COMMA TDATA .)


state 155

    (45) funcCompleta -> FUNC nombreFuncion LPAREN parametrosF RPAREN LPAREN datoReturn RPAREN . LCBRACKET bloqueI returnF RCBRACKET

    LCBRACKET       shift and go to state 168


state 156

    (43) funcPa -> FUNC nombreFuncion LPAREN parametrosF RPAREN LCBRACKET bloqueI RCBRACKET .

    PRINT           reduce using rule 43 (funcPa -> FUNC nombreFuncion LPAREN parametrosF RPAREN LCBRACKET bloqueI RCBRACKET .)
    PRINTLN         reduce using rule 43 (funcPa -> FUNC nombreFuncion LPAREN parametrosF RPAREN LCBRACKET bloqueI RCBRACKET .)
    FOR             reduce using rule 43 (funcPa -> FUNC nombreFuncion LPAREN parametrosF RPAREN LCBRACKET bloqueI RCBRACKET .)
    VARIABLE        reduce using rule 43 (funcPa -> FUNC nombreFuncion LPAREN parametrosF RPAREN LCBRACKET bloqueI RCBRACKET .)
    IF              reduce using rule 43 (funcPa -> FUNC nombreFuncion LPAREN parametrosF RPAREN LCBRACKET bloqueI RCBRACKET .)
    VAR             reduce using rule 43 (funcPa -> FUNC nombreFuncion LPAREN parametrosF RPAREN LCBRACKET bloqueI RCBRACKET .)
    STRING          reduce using rule 43 (funcPa -> FUNC nombreFuncion LPAREN parametrosF RPAREN LCBRACKET bloqueI RCBRACKET .)
    INT             reduce using rule 43 (funcPa -> FUNC nombreFuncion LPAREN parametrosF RPAREN LCBRACKET bloqueI RCBRACKET .)
    SWITCH          reduce using rule 43 (funcPa -> FUNC nombreFuncion LPAREN parametrosF RPAREN LCBRACKET bloqueI RCBRACKET .)
    FUNC            reduce using rule 43 (funcPa -> FUNC nombreFuncion LPAREN parametrosF RPAREN LCBRACKET bloqueI RCBRACKET .)
    $end            reduce using rule 43 (funcPa -> FUNC nombreFuncion LPAREN parametrosF RPAREN LCBRACKET bloqueI RCBRACKET .)
    RCBRACKET       reduce using rule 43 (funcPa -> FUNC nombreFuncion LPAREN parametrosF RPAREN LCBRACKET bloqueI RCBRACKET .)
    RETURN          reduce using rule 43 (funcPa -> FUNC nombreFuncion LPAREN parametrosF RPAREN LCBRACKET bloqueI RCBRACKET .)
    CASE            reduce using rule 43 (funcPa -> FUNC nombreFuncion LPAREN parametrosF RPAREN LCBRACKET bloqueI RCBRACKET .)
    DEFAULT         reduce using rule 43 (funcPa -> FUNC nombreFuncion LPAREN parametrosF RPAREN LCBRACKET bloqueI RCBRACKET .)


state 157

    (22) for -> FOR VARIABLE FASTDEC INT PUNTO_COMA VARIABLE sigcomparacion INT PUNTO_COMA . VARIABLE incremento LCBRACKET bloqueI RCBRACKET

    VARIABLE        shift and go to state 169


state 158

    (53) mapa -> VARIABLE EQUALS MAP LBRACKET TDATA RBRACKET TDATA LCBRACKET adentro . RCBRACKET

    RCBRACKET       shift and go to state 170


state 159

    (57) adentro -> definicion .
    (58) adentro -> definicion . COMMA adentro

    RCBRACKET       reduce using rule 57 (adentro -> definicion .)
    COMMA           shift and go to state 171


state 160

    (59) definicion -> dato . COLON dato

    COLON           shift and go to state 172


state 161

    (35) array -> VARIABLE FASTDEC LBRACKET INT RBRACKET TDATA LCBRACKET elementArray RCBRACKET .

    PRINT           reduce using rule 35 (array -> VARIABLE FASTDEC LBRACKET INT RBRACKET TDATA LCBRACKET elementArray RCBRACKET .)
    PRINTLN         reduce using rule 35 (array -> VARIABLE FASTDEC LBRACKET INT RBRACKET TDATA LCBRACKET elementArray RCBRACKET .)
    FOR             reduce using rule 35 (array -> VARIABLE FASTDEC LBRACKET INT RBRACKET TDATA LCBRACKET elementArray RCBRACKET .)
    VARIABLE        reduce using rule 35 (array -> VARIABLE FASTDEC LBRACKET INT RBRACKET TDATA LCBRACKET elementArray RCBRACKET .)
    IF              reduce using rule 35 (array -> VARIABLE FASTDEC LBRACKET INT RBRACKET TDATA LCBRACKET elementArray RCBRACKET .)
    VAR             reduce using rule 35 (array -> VARIABLE FASTDEC LBRACKET INT RBRACKET TDATA LCBRACKET elementArray RCBRACKET .)
    STRING          reduce using rule 35 (array -> VARIABLE FASTDEC LBRACKET INT RBRACKET TDATA LCBRACKET elementArray RCBRACKET .)
    INT             reduce using rule 35 (array -> VARIABLE FASTDEC LBRACKET INT RBRACKET TDATA LCBRACKET elementArray RCBRACKET .)
    SWITCH          reduce using rule 35 (array -> VARIABLE FASTDEC LBRACKET INT RBRACKET TDATA LCBRACKET elementArray RCBRACKET .)
    FUNC            reduce using rule 35 (array -> VARIABLE FASTDEC LBRACKET INT RBRACKET TDATA LCBRACKET elementArray RCBRACKET .)
    $end            reduce using rule 35 (array -> VARIABLE FASTDEC LBRACKET INT RBRACKET TDATA LCBRACKET elementArray RCBRACKET .)
    RCBRACKET       reduce using rule 35 (array -> VARIABLE FASTDEC LBRACKET INT RBRACKET TDATA LCBRACKET elementArray RCBRACKET .)
    RETURN          reduce using rule 35 (array -> VARIABLE FASTDEC LBRACKET INT RBRACKET TDATA LCBRACKET elementArray RCBRACKET .)
    CASE            reduce using rule 35 (array -> VARIABLE FASTDEC LBRACKET INT RBRACKET TDATA LCBRACKET elementArray RCBRACKET .)
    DEFAULT         reduce using rule 35 (array -> VARIABLE FASTDEC LBRACKET INT RBRACKET TDATA LCBRACKET elementArray RCBRACKET .)


state 162

    (37) elementArray -> dato COMMA . elementArray
    (36) elementArray -> . dato
    (37) elementArray -> . dato COMMA elementArray
    (18) dato -> . INT
    (19) dato -> . STRING
    (20) dato -> . FLOAT
    (21) dato -> . VARIABLE

    INT             shift and go to state 37
    STRING          shift and go to state 41
    FLOAT           shift and go to state 42
    VARIABLE        shift and go to state 48

    dato                           shift and go to state 148
    elementArray                   shift and go to state 173

state 163

    (75) elementIntS -> INT COMMA elementIntS .

    RCBRACKET       reduce using rule 75 (elementIntS -> INT COMMA elementIntS .)


state 164

    (34) array -> VAR VARIABLE EQUALS LBRACKET INT RBRACKET TDATA LCBRACKET elementArray . RCBRACKET

    RCBRACKET       shift and go to state 174


state 165

    (70) ArraySemantica -> VAR VARIABLE EQUALS LBRACKET INT RBRACKET TSTRING LCBRACKET elementStringS . RCBRACKET

    RCBRACKET       shift and go to state 175


state 166

    (72) elementStringS -> STRING .
    (73) elementStringS -> STRING . COMMA elementStringS

    RCBRACKET       reduce using rule 72 (elementStringS -> STRING .)
    COMMA           shift and go to state 176


state 167

    (44) funcRetorno -> FUNC nombreFuncion LPAREN RPAREN LPAREN datoReturn RPAREN LCBRACKET bloqueI . returnF RCBRACKET
    (51) returnF -> . RETURN dato
    (52) returnF -> . RETURN elementArray

    RETURN          shift and go to state 178

    returnF                        shift and go to state 177

state 168

    (45) funcCompleta -> FUNC nombreFuncion LPAREN parametrosF RPAREN LPAREN datoReturn RPAREN LCBRACKET . bloqueI returnF RCBRACKET
    (1) bloqueI -> . instrucciones
    (2) bloqueI -> . instrucciones bloqueI
    (3) instrucciones -> . impresion
    (4) instrucciones -> . for
    (5) instrucciones -> . for2
    (6) instrucciones -> . for3
    (7) instrucciones -> . mapa
    (8) instrucciones -> . si
    (9) instrucciones -> . array
    (10) instrucciones -> . funcion
    (11) instrucciones -> . concatDatos
    (12) instrucciones -> . ArraySemantica
    (13) instrucciones -> . switchh
    (14) instrucciones -> . asignaciones
    (15) instrucciones -> . expresionCondicion
    (16) impresion -> . PRINT LPAREN dato RPAREN
    (17) impresion -> . PRINTLN LPAREN dato RPAREN
    (22) for -> . FOR VARIABLE FASTDEC INT PUNTO_COMA VARIABLE sigcomparacion INT PUNTO_COMA VARIABLE incremento LCBRACKET bloqueI RCBRACKET
    (23) for2 -> . FOR comparacionF LCBRACKET bloqueI RCBRACKET
    (24) for3 -> . FOR LCBRACKET bloqueI RCBRACKET
    (53) mapa -> . VARIABLE EQUALS MAP LBRACKET TDATA RBRACKET TDATA LCBRACKET adentro RCBRACKET
    (60) si -> . IF comparacion LCBRACKET instrucciones RCBRACKET
    (34) array -> . VAR VARIABLE EQUALS LBRACKET INT RBRACKET TDATA LCBRACKET elementArray RCBRACKET
    (35) array -> . VARIABLE FASTDEC LBRACKET INT RBRACKET TDATA LCBRACKET elementArray RCBRACKET
    (38) funcion -> . funSimple
    (39) funcion -> . funcPa
    (40) funcion -> . funcRetorno
    (41) funcion -> . funcCompleta
    (68) concatDatos -> . STRING MAS STRING
    (69) concatDatos -> . INT MAS INT
    (70) ArraySemantica -> . VAR VARIABLE EQUALS LBRACKET INT RBRACKET TSTRING LCBRACKET elementStringS RCBRACKET
    (71) ArraySemantica -> . VARIABLE FASTDEC LBRACKET INT TINT LCBRACKET elementIntS RCBRACKET
    (77) switchh -> . SWITCH VARIABLE LCBRACKET cases def RCBRACKET
    (62) asignaciones -> . varsimple
    (63) asignaciones -> . varobviado
    (64) asignaciones -> . decfast
    (76) expresionCondicion -> . VARIABLE FASTDEC comparacion
    (42) funSimple -> . FUNC nombreFuncion LPAREN RPAREN LCBRACKET bloqueI RCBRACKET
    (43) funcPa -> . FUNC nombreFuncion LPAREN parametrosF RPAREN LCBRACKET bloqueI RCBRACKET
    (44) funcRetorno -> . FUNC nombreFuncion LPAREN RPAREN LPAREN datoReturn RPAREN LCBRACKET bloqueI returnF RCBRACKET
    (45) funcCompleta -> . FUNC nombreFuncion LPAREN parametrosF RPAREN LPAREN datoReturn RPAREN LCBRACKET bloqueI returnF RCBRACKET
    (65) varsimple -> . VAR VARIABLE TDATA EQUALS dato
    (66) varobviado -> . VAR VARIABLE EQUALS dato
    (67) decfast -> . VARIABLE FASTDEC dato

    PRINT           shift and go to state 16
    PRINTLN         shift and go to state 17
    FOR             shift and go to state 18
    VARIABLE        shift and go to state 19
    IF              shift and go to state 21
    VAR             shift and go to state 22
    STRING          shift and go to state 27
    INT             shift and go to state 20
    SWITCH          shift and go to state 28
    FUNC            shift and go to state 32

    bloqueI                        shift and go to state 179
    instrucciones                  shift and go to state 2
    impresion                      shift and go to state 3
    for                            shift and go to state 4
    for2                           shift and go to state 5
    for3                           shift and go to state 6
    mapa                           shift and go to state 7
    si                             shift and go to state 8
    array                          shift and go to state 9
    funcion                        shift and go to state 10
    concatDatos                    shift and go to state 11
    ArraySemantica                 shift and go to state 12
    switchh                        shift and go to state 13
    asignaciones                   shift and go to state 14
    expresionCondicion             shift and go to state 15
    funSimple                      shift and go to state 23
    funcPa                         shift and go to state 24
    funcRetorno                    shift and go to state 25
    funcCompleta                   shift and go to state 26
    varsimple                      shift and go to state 29
    varobviado                     shift and go to state 30
    decfast                        shift and go to state 31

state 169

    (22) for -> FOR VARIABLE FASTDEC INT PUNTO_COMA VARIABLE sigcomparacion INT PUNTO_COMA VARIABLE . incremento LCBRACKET bloqueI RCBRACKET
    (25) incremento -> . MASMAS
    (26) incremento -> . MENOSMENOS

    MASMAS          shift and go to state 181
    MENOSMENOS      shift and go to state 182

    incremento                     shift and go to state 180

state 170

    (53) mapa -> VARIABLE EQUALS MAP LBRACKET TDATA RBRACKET TDATA LCBRACKET adentro RCBRACKET .

    PRINT           reduce using rule 53 (mapa -> VARIABLE EQUALS MAP LBRACKET TDATA RBRACKET TDATA LCBRACKET adentro RCBRACKET .)
    PRINTLN         reduce using rule 53 (mapa -> VARIABLE EQUALS MAP LBRACKET TDATA RBRACKET TDATA LCBRACKET adentro RCBRACKET .)
    FOR             reduce using rule 53 (mapa -> VARIABLE EQUALS MAP LBRACKET TDATA RBRACKET TDATA LCBRACKET adentro RCBRACKET .)
    VARIABLE        reduce using rule 53 (mapa -> VARIABLE EQUALS MAP LBRACKET TDATA RBRACKET TDATA LCBRACKET adentro RCBRACKET .)
    IF              reduce using rule 53 (mapa -> VARIABLE EQUALS MAP LBRACKET TDATA RBRACKET TDATA LCBRACKET adentro RCBRACKET .)
    VAR             reduce using rule 53 (mapa -> VARIABLE EQUALS MAP LBRACKET TDATA RBRACKET TDATA LCBRACKET adentro RCBRACKET .)
    STRING          reduce using rule 53 (mapa -> VARIABLE EQUALS MAP LBRACKET TDATA RBRACKET TDATA LCBRACKET adentro RCBRACKET .)
    INT             reduce using rule 53 (mapa -> VARIABLE EQUALS MAP LBRACKET TDATA RBRACKET TDATA LCBRACKET adentro RCBRACKET .)
    SWITCH          reduce using rule 53 (mapa -> VARIABLE EQUALS MAP LBRACKET TDATA RBRACKET TDATA LCBRACKET adentro RCBRACKET .)
    FUNC            reduce using rule 53 (mapa -> VARIABLE EQUALS MAP LBRACKET TDATA RBRACKET TDATA LCBRACKET adentro RCBRACKET .)
    $end            reduce using rule 53 (mapa -> VARIABLE EQUALS MAP LBRACKET TDATA RBRACKET TDATA LCBRACKET adentro RCBRACKET .)
    RCBRACKET       reduce using rule 53 (mapa -> VARIABLE EQUALS MAP LBRACKET TDATA RBRACKET TDATA LCBRACKET adentro RCBRACKET .)
    RETURN          reduce using rule 53 (mapa -> VARIABLE EQUALS MAP LBRACKET TDATA RBRACKET TDATA LCBRACKET adentro RCBRACKET .)
    CASE            reduce using rule 53 (mapa -> VARIABLE EQUALS MAP LBRACKET TDATA RBRACKET TDATA LCBRACKET adentro RCBRACKET .)
    DEFAULT         reduce using rule 53 (mapa -> VARIABLE EQUALS MAP LBRACKET TDATA RBRACKET TDATA LCBRACKET adentro RCBRACKET .)


state 171

    (58) adentro -> definicion COMMA . adentro
    (57) adentro -> . definicion
    (58) adentro -> . definicion COMMA adentro
    (59) definicion -> . dato COLON dato
    (18) dato -> . INT
    (19) dato -> . STRING
    (20) dato -> . FLOAT
    (21) dato -> . VARIABLE

    INT             shift and go to state 37
    STRING          shift and go to state 41
    FLOAT           shift and go to state 42
    VARIABLE        shift and go to state 48

    definicion                     shift and go to state 159
    adentro                        shift and go to state 183
    dato                           shift and go to state 160

state 172

    (59) definicion -> dato COLON . dato
    (18) dato -> . INT
    (19) dato -> . STRING
    (20) dato -> . FLOAT
    (21) dato -> . VARIABLE

    INT             shift and go to state 37
    STRING          shift and go to state 41
    FLOAT           shift and go to state 42
    VARIABLE        shift and go to state 48

    dato                           shift and go to state 184

state 173

    (37) elementArray -> dato COMMA elementArray .

    RCBRACKET       reduce using rule 37 (elementArray -> dato COMMA elementArray .)


state 174

    (34) array -> VAR VARIABLE EQUALS LBRACKET INT RBRACKET TDATA LCBRACKET elementArray RCBRACKET .

    PRINT           reduce using rule 34 (array -> VAR VARIABLE EQUALS LBRACKET INT RBRACKET TDATA LCBRACKET elementArray RCBRACKET .)
    PRINTLN         reduce using rule 34 (array -> VAR VARIABLE EQUALS LBRACKET INT RBRACKET TDATA LCBRACKET elementArray RCBRACKET .)
    FOR             reduce using rule 34 (array -> VAR VARIABLE EQUALS LBRACKET INT RBRACKET TDATA LCBRACKET elementArray RCBRACKET .)
    VARIABLE        reduce using rule 34 (array -> VAR VARIABLE EQUALS LBRACKET INT RBRACKET TDATA LCBRACKET elementArray RCBRACKET .)
    IF              reduce using rule 34 (array -> VAR VARIABLE EQUALS LBRACKET INT RBRACKET TDATA LCBRACKET elementArray RCBRACKET .)
    VAR             reduce using rule 34 (array -> VAR VARIABLE EQUALS LBRACKET INT RBRACKET TDATA LCBRACKET elementArray RCBRACKET .)
    STRING          reduce using rule 34 (array -> VAR VARIABLE EQUALS LBRACKET INT RBRACKET TDATA LCBRACKET elementArray RCBRACKET .)
    INT             reduce using rule 34 (array -> VAR VARIABLE EQUALS LBRACKET INT RBRACKET TDATA LCBRACKET elementArray RCBRACKET .)
    SWITCH          reduce using rule 34 (array -> VAR VARIABLE EQUALS LBRACKET INT RBRACKET TDATA LCBRACKET elementArray RCBRACKET .)
    FUNC            reduce using rule 34 (array -> VAR VARIABLE EQUALS LBRACKET INT RBRACKET TDATA LCBRACKET elementArray RCBRACKET .)
    $end            reduce using rule 34 (array -> VAR VARIABLE EQUALS LBRACKET INT RBRACKET TDATA LCBRACKET elementArray RCBRACKET .)
    RCBRACKET       reduce using rule 34 (array -> VAR VARIABLE EQUALS LBRACKET INT RBRACKET TDATA LCBRACKET elementArray RCBRACKET .)
    RETURN          reduce using rule 34 (array -> VAR VARIABLE EQUALS LBRACKET INT RBRACKET TDATA LCBRACKET elementArray RCBRACKET .)
    CASE            reduce using rule 34 (array -> VAR VARIABLE EQUALS LBRACKET INT RBRACKET TDATA LCBRACKET elementArray RCBRACKET .)
    DEFAULT         reduce using rule 34 (array -> VAR VARIABLE EQUALS LBRACKET INT RBRACKET TDATA LCBRACKET elementArray RCBRACKET .)


state 175

    (70) ArraySemantica -> VAR VARIABLE EQUALS LBRACKET INT RBRACKET TSTRING LCBRACKET elementStringS RCBRACKET .

    PRINT           reduce using rule 70 (ArraySemantica -> VAR VARIABLE EQUALS LBRACKET INT RBRACKET TSTRING LCBRACKET elementStringS RCBRACKET .)
    PRINTLN         reduce using rule 70 (ArraySemantica -> VAR VARIABLE EQUALS LBRACKET INT RBRACKET TSTRING LCBRACKET elementStringS RCBRACKET .)
    FOR             reduce using rule 70 (ArraySemantica -> VAR VARIABLE EQUALS LBRACKET INT RBRACKET TSTRING LCBRACKET elementStringS RCBRACKET .)
    VARIABLE        reduce using rule 70 (ArraySemantica -> VAR VARIABLE EQUALS LBRACKET INT RBRACKET TSTRING LCBRACKET elementStringS RCBRACKET .)
    IF              reduce using rule 70 (ArraySemantica -> VAR VARIABLE EQUALS LBRACKET INT RBRACKET TSTRING LCBRACKET elementStringS RCBRACKET .)
    VAR             reduce using rule 70 (ArraySemantica -> VAR VARIABLE EQUALS LBRACKET INT RBRACKET TSTRING LCBRACKET elementStringS RCBRACKET .)
    STRING          reduce using rule 70 (ArraySemantica -> VAR VARIABLE EQUALS LBRACKET INT RBRACKET TSTRING LCBRACKET elementStringS RCBRACKET .)
    INT             reduce using rule 70 (ArraySemantica -> VAR VARIABLE EQUALS LBRACKET INT RBRACKET TSTRING LCBRACKET elementStringS RCBRACKET .)
    SWITCH          reduce using rule 70 (ArraySemantica -> VAR VARIABLE EQUALS LBRACKET INT RBRACKET TSTRING LCBRACKET elementStringS RCBRACKET .)
    FUNC            reduce using rule 70 (ArraySemantica -> VAR VARIABLE EQUALS LBRACKET INT RBRACKET TSTRING LCBRACKET elementStringS RCBRACKET .)
    $end            reduce using rule 70 (ArraySemantica -> VAR VARIABLE EQUALS LBRACKET INT RBRACKET TSTRING LCBRACKET elementStringS RCBRACKET .)
    RCBRACKET       reduce using rule 70 (ArraySemantica -> VAR VARIABLE EQUALS LBRACKET INT RBRACKET TSTRING LCBRACKET elementStringS RCBRACKET .)
    RETURN          reduce using rule 70 (ArraySemantica -> VAR VARIABLE EQUALS LBRACKET INT RBRACKET TSTRING LCBRACKET elementStringS RCBRACKET .)
    CASE            reduce using rule 70 (ArraySemantica -> VAR VARIABLE EQUALS LBRACKET INT RBRACKET TSTRING LCBRACKET elementStringS RCBRACKET .)
    DEFAULT         reduce using rule 70 (ArraySemantica -> VAR VARIABLE EQUALS LBRACKET INT RBRACKET TSTRING LCBRACKET elementStringS RCBRACKET .)


state 176

    (73) elementStringS -> STRING COMMA . elementStringS
    (72) elementStringS -> . STRING
    (73) elementStringS -> . STRING COMMA elementStringS

    STRING          shift and go to state 166

    elementStringS                 shift and go to state 185

state 177

    (44) funcRetorno -> FUNC nombreFuncion LPAREN RPAREN LPAREN datoReturn RPAREN LCBRACKET bloqueI returnF . RCBRACKET

    RCBRACKET       shift and go to state 186


state 178

    (51) returnF -> RETURN . dato
    (52) returnF -> RETURN . elementArray
    (18) dato -> . INT
    (19) dato -> . STRING
    (20) dato -> . FLOAT
    (21) dato -> . VARIABLE
    (36) elementArray -> . dato
    (37) elementArray -> . dato COMMA elementArray

    INT             shift and go to state 37
    STRING          shift and go to state 41
    FLOAT           shift and go to state 42
    VARIABLE        shift and go to state 48

    dato                           shift and go to state 187
    elementArray                   shift and go to state 188

state 179

    (45) funcCompleta -> FUNC nombreFuncion LPAREN parametrosF RPAREN LPAREN datoReturn RPAREN LCBRACKET bloqueI . returnF RCBRACKET
    (51) returnF -> . RETURN dato
    (52) returnF -> . RETURN elementArray

    RETURN          shift and go to state 178

    returnF                        shift and go to state 189

state 180

    (22) for -> FOR VARIABLE FASTDEC INT PUNTO_COMA VARIABLE sigcomparacion INT PUNTO_COMA VARIABLE incremento . LCBRACKET bloqueI RCBRACKET

    LCBRACKET       shift and go to state 190


state 181

    (25) incremento -> MASMAS .

    LCBRACKET       reduce using rule 25 (incremento -> MASMAS .)


state 182

    (26) incremento -> MENOSMENOS .

    LCBRACKET       reduce using rule 26 (incremento -> MENOSMENOS .)


state 183

    (58) adentro -> definicion COMMA adentro .

    RCBRACKET       reduce using rule 58 (adentro -> definicion COMMA adentro .)


state 184

    (59) definicion -> dato COLON dato .

    COMMA           reduce using rule 59 (definicion -> dato COLON dato .)
    RCBRACKET       reduce using rule 59 (definicion -> dato COLON dato .)


state 185

    (73) elementStringS -> STRING COMMA elementStringS .

    RCBRACKET       reduce using rule 73 (elementStringS -> STRING COMMA elementStringS .)


state 186

    (44) funcRetorno -> FUNC nombreFuncion LPAREN RPAREN LPAREN datoReturn RPAREN LCBRACKET bloqueI returnF RCBRACKET .

    PRINT           reduce using rule 44 (funcRetorno -> FUNC nombreFuncion LPAREN RPAREN LPAREN datoReturn RPAREN LCBRACKET bloqueI returnF RCBRACKET .)
    PRINTLN         reduce using rule 44 (funcRetorno -> FUNC nombreFuncion LPAREN RPAREN LPAREN datoReturn RPAREN LCBRACKET bloqueI returnF RCBRACKET .)
    FOR             reduce using rule 44 (funcRetorno -> FUNC nombreFuncion LPAREN RPAREN LPAREN datoReturn RPAREN LCBRACKET bloqueI returnF RCBRACKET .)
    VARIABLE        reduce using rule 44 (funcRetorno -> FUNC nombreFuncion LPAREN RPAREN LPAREN datoReturn RPAREN LCBRACKET bloqueI returnF RCBRACKET .)
    IF              reduce using rule 44 (funcRetorno -> FUNC nombreFuncion LPAREN RPAREN LPAREN datoReturn RPAREN LCBRACKET bloqueI returnF RCBRACKET .)
    VAR             reduce using rule 44 (funcRetorno -> FUNC nombreFuncion LPAREN RPAREN LPAREN datoReturn RPAREN LCBRACKET bloqueI returnF RCBRACKET .)
    STRING          reduce using rule 44 (funcRetorno -> FUNC nombreFuncion LPAREN RPAREN LPAREN datoReturn RPAREN LCBRACKET bloqueI returnF RCBRACKET .)
    INT             reduce using rule 44 (funcRetorno -> FUNC nombreFuncion LPAREN RPAREN LPAREN datoReturn RPAREN LCBRACKET bloqueI returnF RCBRACKET .)
    SWITCH          reduce using rule 44 (funcRetorno -> FUNC nombreFuncion LPAREN RPAREN LPAREN datoReturn RPAREN LCBRACKET bloqueI returnF RCBRACKET .)
    FUNC            reduce using rule 44 (funcRetorno -> FUNC nombreFuncion LPAREN RPAREN LPAREN datoReturn RPAREN LCBRACKET bloqueI returnF RCBRACKET .)
    $end            reduce using rule 44 (funcRetorno -> FUNC nombreFuncion LPAREN RPAREN LPAREN datoReturn RPAREN LCBRACKET bloqueI returnF RCBRACKET .)
    RCBRACKET       reduce using rule 44 (funcRetorno -> FUNC nombreFuncion LPAREN RPAREN LPAREN datoReturn RPAREN LCBRACKET bloqueI returnF RCBRACKET .)
    RETURN          reduce using rule 44 (funcRetorno -> FUNC nombreFuncion LPAREN RPAREN LPAREN datoReturn RPAREN LCBRACKET bloqueI returnF RCBRACKET .)
    CASE            reduce using rule 44 (funcRetorno -> FUNC nombreFuncion LPAREN RPAREN LPAREN datoReturn RPAREN LCBRACKET bloqueI returnF RCBRACKET .)
    DEFAULT         reduce using rule 44 (funcRetorno -> FUNC nombreFuncion LPAREN RPAREN LPAREN datoReturn RPAREN LCBRACKET bloqueI returnF RCBRACKET .)


state 187

    (51) returnF -> RETURN dato .
    (36) elementArray -> dato .
    (37) elementArray -> dato . COMMA elementArray

  ! reduce/reduce conflict for RCBRACKET resolved using rule 36 (elementArray -> dato .)
    RCBRACKET       reduce using rule 36 (elementArray -> dato .)
    COMMA           shift and go to state 162

  ! RCBRACKET       [ reduce using rule 51 (returnF -> RETURN dato .) ]


state 188

    (52) returnF -> RETURN elementArray .

    RCBRACKET       reduce using rule 52 (returnF -> RETURN elementArray .)


state 189

    (45) funcCompleta -> FUNC nombreFuncion LPAREN parametrosF RPAREN LPAREN datoReturn RPAREN LCBRACKET bloqueI returnF . RCBRACKET

    RCBRACKET       shift and go to state 191


state 190

    (22) for -> FOR VARIABLE FASTDEC INT PUNTO_COMA VARIABLE sigcomparacion INT PUNTO_COMA VARIABLE incremento LCBRACKET . bloqueI RCBRACKET
    (1) bloqueI -> . instrucciones
    (2) bloqueI -> . instrucciones bloqueI
    (3) instrucciones -> . impresion
    (4) instrucciones -> . for
    (5) instrucciones -> . for2
    (6) instrucciones -> . for3
    (7) instrucciones -> . mapa
    (8) instrucciones -> . si
    (9) instrucciones -> . array
    (10) instrucciones -> . funcion
    (11) instrucciones -> . concatDatos
    (12) instrucciones -> . ArraySemantica
    (13) instrucciones -> . switchh
    (14) instrucciones -> . asignaciones
    (15) instrucciones -> . expresionCondicion
    (16) impresion -> . PRINT LPAREN dato RPAREN
    (17) impresion -> . PRINTLN LPAREN dato RPAREN
    (22) for -> . FOR VARIABLE FASTDEC INT PUNTO_COMA VARIABLE sigcomparacion INT PUNTO_COMA VARIABLE incremento LCBRACKET bloqueI RCBRACKET
    (23) for2 -> . FOR comparacionF LCBRACKET bloqueI RCBRACKET
    (24) for3 -> . FOR LCBRACKET bloqueI RCBRACKET
    (53) mapa -> . VARIABLE EQUALS MAP LBRACKET TDATA RBRACKET TDATA LCBRACKET adentro RCBRACKET
    (60) si -> . IF comparacion LCBRACKET instrucciones RCBRACKET
    (34) array -> . VAR VARIABLE EQUALS LBRACKET INT RBRACKET TDATA LCBRACKET elementArray RCBRACKET
    (35) array -> . VARIABLE FASTDEC LBRACKET INT RBRACKET TDATA LCBRACKET elementArray RCBRACKET
    (38) funcion -> . funSimple
    (39) funcion -> . funcPa
    (40) funcion -> . funcRetorno
    (41) funcion -> . funcCompleta
    (68) concatDatos -> . STRING MAS STRING
    (69) concatDatos -> . INT MAS INT
    (70) ArraySemantica -> . VAR VARIABLE EQUALS LBRACKET INT RBRACKET TSTRING LCBRACKET elementStringS RCBRACKET
    (71) ArraySemantica -> . VARIABLE FASTDEC LBRACKET INT TINT LCBRACKET elementIntS RCBRACKET
    (77) switchh -> . SWITCH VARIABLE LCBRACKET cases def RCBRACKET
    (62) asignaciones -> . varsimple
    (63) asignaciones -> . varobviado
    (64) asignaciones -> . decfast
    (76) expresionCondicion -> . VARIABLE FASTDEC comparacion
    (42) funSimple -> . FUNC nombreFuncion LPAREN RPAREN LCBRACKET bloqueI RCBRACKET
    (43) funcPa -> . FUNC nombreFuncion LPAREN parametrosF RPAREN LCBRACKET bloqueI RCBRACKET
    (44) funcRetorno -> . FUNC nombreFuncion LPAREN RPAREN LPAREN datoReturn RPAREN LCBRACKET bloqueI returnF RCBRACKET
    (45) funcCompleta -> . FUNC nombreFuncion LPAREN parametrosF RPAREN LPAREN datoReturn RPAREN LCBRACKET bloqueI returnF RCBRACKET
    (65) varsimple -> . VAR VARIABLE TDATA EQUALS dato
    (66) varobviado -> . VAR VARIABLE EQUALS dato
    (67) decfast -> . VARIABLE FASTDEC dato

    PRINT           shift and go to state 16
    PRINTLN         shift and go to state 17
    FOR             shift and go to state 18
    VARIABLE        shift and go to state 19
    IF              shift and go to state 21
    VAR             shift and go to state 22
    STRING          shift and go to state 27
    INT             shift and go to state 20
    SWITCH          shift and go to state 28
    FUNC            shift and go to state 32

    bloqueI                        shift and go to state 192
    instrucciones                  shift and go to state 2
    impresion                      shift and go to state 3
    for                            shift and go to state 4
    for2                           shift and go to state 5
    for3                           shift and go to state 6
    mapa                           shift and go to state 7
    si                             shift and go to state 8
    array                          shift and go to state 9
    funcion                        shift and go to state 10
    concatDatos                    shift and go to state 11
    ArraySemantica                 shift and go to state 12
    switchh                        shift and go to state 13
    asignaciones                   shift and go to state 14
    expresionCondicion             shift and go to state 15
    funSimple                      shift and go to state 23
    funcPa                         shift and go to state 24
    funcRetorno                    shift and go to state 25
    funcCompleta                   shift and go to state 26
    varsimple                      shift and go to state 29
    varobviado                     shift and go to state 30
    decfast                        shift and go to state 31

state 191

    (45) funcCompleta -> FUNC nombreFuncion LPAREN parametrosF RPAREN LPAREN datoReturn RPAREN LCBRACKET bloqueI returnF RCBRACKET .

    PRINT           reduce using rule 45 (funcCompleta -> FUNC nombreFuncion LPAREN parametrosF RPAREN LPAREN datoReturn RPAREN LCBRACKET bloqueI returnF RCBRACKET .)
    PRINTLN         reduce using rule 45 (funcCompleta -> FUNC nombreFuncion LPAREN parametrosF RPAREN LPAREN datoReturn RPAREN LCBRACKET bloqueI returnF RCBRACKET .)
    FOR             reduce using rule 45 (funcCompleta -> FUNC nombreFuncion LPAREN parametrosF RPAREN LPAREN datoReturn RPAREN LCBRACKET bloqueI returnF RCBRACKET .)
    VARIABLE        reduce using rule 45 (funcCompleta -> FUNC nombreFuncion LPAREN parametrosF RPAREN LPAREN datoReturn RPAREN LCBRACKET bloqueI returnF RCBRACKET .)
    IF              reduce using rule 45 (funcCompleta -> FUNC nombreFuncion LPAREN parametrosF RPAREN LPAREN datoReturn RPAREN LCBRACKET bloqueI returnF RCBRACKET .)
    VAR             reduce using rule 45 (funcCompleta -> FUNC nombreFuncion LPAREN parametrosF RPAREN LPAREN datoReturn RPAREN LCBRACKET bloqueI returnF RCBRACKET .)
    STRING          reduce using rule 45 (funcCompleta -> FUNC nombreFuncion LPAREN parametrosF RPAREN LPAREN datoReturn RPAREN LCBRACKET bloqueI returnF RCBRACKET .)
    INT             reduce using rule 45 (funcCompleta -> FUNC nombreFuncion LPAREN parametrosF RPAREN LPAREN datoReturn RPAREN LCBRACKET bloqueI returnF RCBRACKET .)
    SWITCH          reduce using rule 45 (funcCompleta -> FUNC nombreFuncion LPAREN parametrosF RPAREN LPAREN datoReturn RPAREN LCBRACKET bloqueI returnF RCBRACKET .)
    FUNC            reduce using rule 45 (funcCompleta -> FUNC nombreFuncion LPAREN parametrosF RPAREN LPAREN datoReturn RPAREN LCBRACKET bloqueI returnF RCBRACKET .)
    $end            reduce using rule 45 (funcCompleta -> FUNC nombreFuncion LPAREN parametrosF RPAREN LPAREN datoReturn RPAREN LCBRACKET bloqueI returnF RCBRACKET .)
    RCBRACKET       reduce using rule 45 (funcCompleta -> FUNC nombreFuncion LPAREN parametrosF RPAREN LPAREN datoReturn RPAREN LCBRACKET bloqueI returnF RCBRACKET .)
    RETURN          reduce using rule 45 (funcCompleta -> FUNC nombreFuncion LPAREN parametrosF RPAREN LPAREN datoReturn RPAREN LCBRACKET bloqueI returnF RCBRACKET .)
    CASE            reduce using rule 45 (funcCompleta -> FUNC nombreFuncion LPAREN parametrosF RPAREN LPAREN datoReturn RPAREN LCBRACKET bloqueI returnF RCBRACKET .)
    DEFAULT         reduce using rule 45 (funcCompleta -> FUNC nombreFuncion LPAREN parametrosF RPAREN LPAREN datoReturn RPAREN LCBRACKET bloqueI returnF RCBRACKET .)


state 192

    (22) for -> FOR VARIABLE FASTDEC INT PUNTO_COMA VARIABLE sigcomparacion INT PUNTO_COMA VARIABLE incremento LCBRACKET bloqueI . RCBRACKET

    RCBRACKET       shift and go to state 193


state 193

    (22) for -> FOR VARIABLE FASTDEC INT PUNTO_COMA VARIABLE sigcomparacion INT PUNTO_COMA VARIABLE incremento LCBRACKET bloqueI RCBRACKET .

    PRINT           reduce using rule 22 (for -> FOR VARIABLE FASTDEC INT PUNTO_COMA VARIABLE sigcomparacion INT PUNTO_COMA VARIABLE incremento LCBRACKET bloqueI RCBRACKET .)
    PRINTLN         reduce using rule 22 (for -> FOR VARIABLE FASTDEC INT PUNTO_COMA VARIABLE sigcomparacion INT PUNTO_COMA VARIABLE incremento LCBRACKET bloqueI RCBRACKET .)
    FOR             reduce using rule 22 (for -> FOR VARIABLE FASTDEC INT PUNTO_COMA VARIABLE sigcomparacion INT PUNTO_COMA VARIABLE incremento LCBRACKET bloqueI RCBRACKET .)
    VARIABLE        reduce using rule 22 (for -> FOR VARIABLE FASTDEC INT PUNTO_COMA VARIABLE sigcomparacion INT PUNTO_COMA VARIABLE incremento LCBRACKET bloqueI RCBRACKET .)
    IF              reduce using rule 22 (for -> FOR VARIABLE FASTDEC INT PUNTO_COMA VARIABLE sigcomparacion INT PUNTO_COMA VARIABLE incremento LCBRACKET bloqueI RCBRACKET .)
    VAR             reduce using rule 22 (for -> FOR VARIABLE FASTDEC INT PUNTO_COMA VARIABLE sigcomparacion INT PUNTO_COMA VARIABLE incremento LCBRACKET bloqueI RCBRACKET .)
    STRING          reduce using rule 22 (for -> FOR VARIABLE FASTDEC INT PUNTO_COMA VARIABLE sigcomparacion INT PUNTO_COMA VARIABLE incremento LCBRACKET bloqueI RCBRACKET .)
    INT             reduce using rule 22 (for -> FOR VARIABLE FASTDEC INT PUNTO_COMA VARIABLE sigcomparacion INT PUNTO_COMA VARIABLE incremento LCBRACKET bloqueI RCBRACKET .)
    SWITCH          reduce using rule 22 (for -> FOR VARIABLE FASTDEC INT PUNTO_COMA VARIABLE sigcomparacion INT PUNTO_COMA VARIABLE incremento LCBRACKET bloqueI RCBRACKET .)
    FUNC            reduce using rule 22 (for -> FOR VARIABLE FASTDEC INT PUNTO_COMA VARIABLE sigcomparacion INT PUNTO_COMA VARIABLE incremento LCBRACKET bloqueI RCBRACKET .)
    $end            reduce using rule 22 (for -> FOR VARIABLE FASTDEC INT PUNTO_COMA VARIABLE sigcomparacion INT PUNTO_COMA VARIABLE incremento LCBRACKET bloqueI RCBRACKET .)
    RCBRACKET       reduce using rule 22 (for -> FOR VARIABLE FASTDEC INT PUNTO_COMA VARIABLE sigcomparacion INT PUNTO_COMA VARIABLE incremento LCBRACKET bloqueI RCBRACKET .)
    RETURN          reduce using rule 22 (for -> FOR VARIABLE FASTDEC INT PUNTO_COMA VARIABLE sigcomparacion INT PUNTO_COMA VARIABLE incremento LCBRACKET bloqueI RCBRACKET .)
    CASE            reduce using rule 22 (for -> FOR VARIABLE FASTDEC INT PUNTO_COMA VARIABLE sigcomparacion INT PUNTO_COMA VARIABLE incremento LCBRACKET bloqueI RCBRACKET .)
    DEFAULT         reduce using rule 22 (for -> FOR VARIABLE FASTDEC INT PUNTO_COMA VARIABLE sigcomparacion INT PUNTO_COMA VARIABLE incremento LCBRACKET bloqueI RCBRACKET .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LCBRACKET in state 136 resolved as shift
WARNING: reduce/reduce conflict in state 187 resolved using rule (elementArray -> dato)
WARNING: rejected rule (returnF -> RETURN dato) in state 187
WARNING: Rule (returnF -> RETURN dato) is never reduced
