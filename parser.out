Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    DIV
    DQMARK
    ELSE
    FALLTHROUGH
    MENOS
    MENOSMENOS
    MUL
    RANGE

Grammar

Rule 0     S' -> instrucciones
Rule 1     instrucciones -> impresion
Rule 2     instrucciones -> for
Rule 3     instrucciones -> for2
Rule 4     instrucciones -> for3
Rule 5     instrucciones -> mapa
Rule 6     instrucciones -> si
Rule 7     instrucciones -> array
Rule 8     instrucciones -> funcion
Rule 9     instrucciones -> concatDatos
Rule 10    instrucciones -> ArraySemantica
Rule 11    instrucciones -> switchh
Rule 12    instrucciones -> asignaciones
Rule 13    instrucciones -> expresionCondicion
Rule 14    impresion -> PRINT LPAREN dato RPAREN
Rule 15    impresion -> PRINTLN LPAREN dato RPAREN
Rule 16    dato -> INT
Rule 17    dato -> STRING
Rule 18    dato -> FLOAT
Rule 19    dato -> VARIABLE
Rule 20    for -> FOR VARIABLE FASTDEC INT PUNTO_COMA VARIABLE sigcomparacion INT PUNTO_COMA VARIABLE MASMAS LCBRACKET
Rule 21    for2 -> FOR VARIABLE sigcomparacion INT LCBRACKET
Rule 22    for3 -> FOR LCBRACKET instrucciones RCBRACKET
Rule 23    sigcomparacion -> MENORQUE
Rule 24    sigcomparacion -> MAYORQUE
Rule 25    sigcomparacion -> DIFERENTE
Rule 26    sigcomparacion -> COMPARA_IGUAL
Rule 27    sigcomparacion -> MAYORIGUAL
Rule 28    sigcomparacion -> MENORIGUAL
Rule 29    array -> VAR VARIABLE EQUALS LBRACKET INT RBRACKET TDATA LCBRACKET elementArray RCBRACKET
Rule 30    array -> VARIABLE FASTDEC LBRACKET INT TDATA LCBRACKET elementArray RCBRACKET
Rule 31    elementArray -> dato
Rule 32    elementArray -> dato COMMA elementArray
Rule 33    funcion -> funSimple
Rule 34    funcion -> funcPa
Rule 35    funcion -> funcRetorno
Rule 36    funcion -> funcCompleta
Rule 37    funSimple -> FUNC nombreFuncion LPAREN RPAREN LCBRACKET instrucciones RCBRACKET
Rule 38    funcPa -> FUNC nombreFuncion LPAREN parametrosF RPAREN LCBRACKET instrucciones RCBRACKET
Rule 39    funcRetorno -> FUNC nombreFuncion LPAREN RPAREN LPAREN datoReturn RPAREN LCBRACKET instrucciones returnF RCBRACKET
Rule 40    funcCompleta -> FUNC nombreFuncion LPAREN parametrosF RPAREN LPAREN datoReturn RPAREN LCBRACKET instrucciones returnF RCBRACKET
Rule 41    nombreFuncion -> VARIABLE
Rule 42    parametrosF -> VARIABLE TDATA
Rule 43    parametrosF -> VARIABLE TDATA COMMA parametrosF
Rule 44    datoReturn -> TDATA
Rule 45    datoReturn -> TDATA COMMA TDATA
Rule 46    returnF -> RETURN dato
Rule 47    returnF -> RETURN elementArray
Rule 48    mapa -> VARIABLE EQUALS MAP LBRACKET TDATA RBRACKET TDATA LCBRACKET adentro RCBRACKET
Rule 49    TDATA -> TSTRING
Rule 50    TDATA -> TINT
Rule 51    TDATA -> TFLOAT
Rule 52    adentro -> definicion
Rule 53    adentro -> definicion COMMA adentro
Rule 54    definicion -> dato COLON dato
Rule 55    si -> IF comparacion LCBRACKET instrucciones RCBRACKET
Rule 56    comparacion -> dato sigcomparacion dato
Rule 57    asignaciones -> varsimple
Rule 58    asignaciones -> varobviado
Rule 59    asignaciones -> decfast
Rule 60    varsimple -> VAR VARIABLE TDATA EQUALS dato
Rule 61    varobviado -> VAR VARIABLE EQUALS dato
Rule 62    decfast -> VARIABLE FASTDEC dato
Rule 63    concatDatos -> STRING MAS STRING
Rule 64    concatDatos -> INT MAS INT
Rule 65    ArraySemantica -> VAR VARIABLE EQUALS LBRACKET INT RBRACKET TSTRING LCBRACKET elementStringS RCBRACKET
Rule 66    ArraySemantica -> VARIABLE FASTDEC LBRACKET INT TINT LCBRACKET elementIntS RCBRACKET
Rule 67    elementStringS -> STRING
Rule 68    elementStringS -> STRING COMMA elementStringS
Rule 69    elementIntS -> INT
Rule 70    elementIntS -> INT COMMA elementIntS
Rule 71    expresionCondicion -> VARIABLE FASTDEC comparacion
Rule 72    switchh -> SWITCH VARIABLE LCBRACKET cases def RCBRACKET
Rule 73    cases -> case1
Rule 74    cases -> case1 cases
Rule 75    case1 -> CASE INT COLON instrucciones
Rule 76    def -> DEFAULT COMMA instrucciones

Terminals, with rules where they appear

CASE                 : 75
COLON                : 54 75
COMMA                : 32 43 45 53 68 70 76
COMPARA_IGUAL        : 26
DEFAULT              : 76
DIFERENTE            : 25
DIV                  : 
DQMARK               : 
ELSE                 : 
EQUALS               : 29 48 60 61 65
FALLTHROUGH          : 
FASTDEC              : 20 30 62 66 71
FLOAT                : 18
FOR                  : 20 21 22
FUNC                 : 37 38 39 40
IF                   : 55
INT                  : 16 20 20 21 29 30 64 64 65 66 69 70 75
LBRACKET             : 29 30 48 65 66
LCBRACKET            : 20 21 22 29 30 37 38 39 40 48 55 65 66 72
LPAREN               : 14 15 37 38 39 39 40 40
MAP                  : 48
MAS                  : 63 64
MASMAS               : 20
MAYORIGUAL           : 27
MAYORQUE             : 24
MENORIGUAL           : 28
MENORQUE             : 23
MENOS                : 
MENOSMENOS           : 
MUL                  : 
PRINT                : 14
PRINTLN              : 15
PUNTO_COMA           : 20 20
RANGE                : 
RBRACKET             : 29 48 65
RCBRACKET            : 22 29 30 37 38 39 40 48 55 65 66 72
RETURN               : 46 47
RPAREN               : 14 15 37 38 39 39 40 40
STRING               : 17 63 63 67 68
SWITCH               : 72
TFLOAT               : 51
TINT                 : 50 66
TSTRING              : 49 65
VAR                  : 29 60 61 65
VARIABLE             : 19 20 20 20 21 29 30 41 42 43 48 60 61 62 65 66 71 72
error                : 

Nonterminals, with rules where they appear

ArraySemantica       : 10
TDATA                : 29 30 42 43 44 45 45 48 48 60
adentro              : 48 53
array                : 7
asignaciones         : 12
case1                : 73 74
cases                : 72 74
comparacion          : 55 71
concatDatos          : 9
dato                 : 14 15 31 32 46 54 54 56 56 60 61 62
datoReturn           : 39 40
decfast              : 59
def                  : 72
definicion           : 52 53
elementArray         : 29 30 32 47
elementIntS          : 66 70
elementStringS       : 65 68
expresionCondicion   : 13
for                  : 2
for2                 : 3
for3                 : 4
funSimple            : 33
funcCompleta         : 36
funcPa               : 34
funcRetorno          : 35
funcion              : 8
impresion            : 1
instrucciones        : 22 37 38 39 40 55 75 76 0
mapa                 : 5
nombreFuncion        : 37 38 39 40
parametrosF          : 38 40 43
returnF              : 39 40
si                   : 6
sigcomparacion       : 20 21 56
switchh              : 11
varobviado           : 58
varsimple            : 57

Parsing method: LALR

state 0

    (0) S' -> . instrucciones
    (1) instrucciones -> . impresion
    (2) instrucciones -> . for
    (3) instrucciones -> . for2
    (4) instrucciones -> . for3
    (5) instrucciones -> . mapa
    (6) instrucciones -> . si
    (7) instrucciones -> . array
    (8) instrucciones -> . funcion
    (9) instrucciones -> . concatDatos
    (10) instrucciones -> . ArraySemantica
    (11) instrucciones -> . switchh
    (12) instrucciones -> . asignaciones
    (13) instrucciones -> . expresionCondicion
    (14) impresion -> . PRINT LPAREN dato RPAREN
    (15) impresion -> . PRINTLN LPAREN dato RPAREN
    (20) for -> . FOR VARIABLE FASTDEC INT PUNTO_COMA VARIABLE sigcomparacion INT PUNTO_COMA VARIABLE MASMAS LCBRACKET
    (21) for2 -> . FOR VARIABLE sigcomparacion INT LCBRACKET
    (22) for3 -> . FOR LCBRACKET instrucciones RCBRACKET
    (48) mapa -> . VARIABLE EQUALS MAP LBRACKET TDATA RBRACKET TDATA LCBRACKET adentro RCBRACKET
    (55) si -> . IF comparacion LCBRACKET instrucciones RCBRACKET
    (29) array -> . VAR VARIABLE EQUALS LBRACKET INT RBRACKET TDATA LCBRACKET elementArray RCBRACKET
    (30) array -> . VARIABLE FASTDEC LBRACKET INT TDATA LCBRACKET elementArray RCBRACKET
    (33) funcion -> . funSimple
    (34) funcion -> . funcPa
    (35) funcion -> . funcRetorno
    (36) funcion -> . funcCompleta
    (63) concatDatos -> . STRING MAS STRING
    (64) concatDatos -> . INT MAS INT
    (65) ArraySemantica -> . VAR VARIABLE EQUALS LBRACKET INT RBRACKET TSTRING LCBRACKET elementStringS RCBRACKET
    (66) ArraySemantica -> . VARIABLE FASTDEC LBRACKET INT TINT LCBRACKET elementIntS RCBRACKET
    (72) switchh -> . SWITCH VARIABLE LCBRACKET cases def RCBRACKET
    (57) asignaciones -> . varsimple
    (58) asignaciones -> . varobviado
    (59) asignaciones -> . decfast
    (71) expresionCondicion -> . VARIABLE FASTDEC comparacion
    (37) funSimple -> . FUNC nombreFuncion LPAREN RPAREN LCBRACKET instrucciones RCBRACKET
    (38) funcPa -> . FUNC nombreFuncion LPAREN parametrosF RPAREN LCBRACKET instrucciones RCBRACKET
    (39) funcRetorno -> . FUNC nombreFuncion LPAREN RPAREN LPAREN datoReturn RPAREN LCBRACKET instrucciones returnF RCBRACKET
    (40) funcCompleta -> . FUNC nombreFuncion LPAREN parametrosF RPAREN LPAREN datoReturn RPAREN LCBRACKET instrucciones returnF RCBRACKET
    (60) varsimple -> . VAR VARIABLE TDATA EQUALS dato
    (61) varobviado -> . VAR VARIABLE EQUALS dato
    (62) decfast -> . VARIABLE FASTDEC dato

    PRINT           shift and go to state 15
    PRINTLN         shift and go to state 16
    FOR             shift and go to state 17
    VARIABLE        shift and go to state 18
    IF              shift and go to state 20
    VAR             shift and go to state 21
    STRING          shift and go to state 26
    INT             shift and go to state 19
    SWITCH          shift and go to state 27
    FUNC            shift and go to state 31

    instrucciones                  shift and go to state 1
    impresion                      shift and go to state 2
    for                            shift and go to state 3
    for2                           shift and go to state 4
    for3                           shift and go to state 5
    mapa                           shift and go to state 6
    si                             shift and go to state 7
    array                          shift and go to state 8
    funcion                        shift and go to state 9
    concatDatos                    shift and go to state 10
    ArraySemantica                 shift and go to state 11
    switchh                        shift and go to state 12
    asignaciones                   shift and go to state 13
    expresionCondicion             shift and go to state 14
    funSimple                      shift and go to state 22
    funcPa                         shift and go to state 23
    funcRetorno                    shift and go to state 24
    funcCompleta                   shift and go to state 25
    varsimple                      shift and go to state 28
    varobviado                     shift and go to state 29
    decfast                        shift and go to state 30

state 1

    (0) S' -> instrucciones .



state 2

    (1) instrucciones -> impresion .

    $end            reduce using rule 1 (instrucciones -> impresion .)
    RCBRACKET       reduce using rule 1 (instrucciones -> impresion .)
    CASE            reduce using rule 1 (instrucciones -> impresion .)
    DEFAULT         reduce using rule 1 (instrucciones -> impresion .)
    RETURN          reduce using rule 1 (instrucciones -> impresion .)


state 3

    (2) instrucciones -> for .

    $end            reduce using rule 2 (instrucciones -> for .)
    RCBRACKET       reduce using rule 2 (instrucciones -> for .)
    CASE            reduce using rule 2 (instrucciones -> for .)
    DEFAULT         reduce using rule 2 (instrucciones -> for .)
    RETURN          reduce using rule 2 (instrucciones -> for .)


state 4

    (3) instrucciones -> for2 .

    $end            reduce using rule 3 (instrucciones -> for2 .)
    RCBRACKET       reduce using rule 3 (instrucciones -> for2 .)
    CASE            reduce using rule 3 (instrucciones -> for2 .)
    DEFAULT         reduce using rule 3 (instrucciones -> for2 .)
    RETURN          reduce using rule 3 (instrucciones -> for2 .)


state 5

    (4) instrucciones -> for3 .

    $end            reduce using rule 4 (instrucciones -> for3 .)
    RCBRACKET       reduce using rule 4 (instrucciones -> for3 .)
    CASE            reduce using rule 4 (instrucciones -> for3 .)
    DEFAULT         reduce using rule 4 (instrucciones -> for3 .)
    RETURN          reduce using rule 4 (instrucciones -> for3 .)


state 6

    (5) instrucciones -> mapa .

    $end            reduce using rule 5 (instrucciones -> mapa .)
    RCBRACKET       reduce using rule 5 (instrucciones -> mapa .)
    CASE            reduce using rule 5 (instrucciones -> mapa .)
    DEFAULT         reduce using rule 5 (instrucciones -> mapa .)
    RETURN          reduce using rule 5 (instrucciones -> mapa .)


state 7

    (6) instrucciones -> si .

    $end            reduce using rule 6 (instrucciones -> si .)
    RCBRACKET       reduce using rule 6 (instrucciones -> si .)
    CASE            reduce using rule 6 (instrucciones -> si .)
    DEFAULT         reduce using rule 6 (instrucciones -> si .)
    RETURN          reduce using rule 6 (instrucciones -> si .)


state 8

    (7) instrucciones -> array .

    $end            reduce using rule 7 (instrucciones -> array .)
    RCBRACKET       reduce using rule 7 (instrucciones -> array .)
    CASE            reduce using rule 7 (instrucciones -> array .)
    DEFAULT         reduce using rule 7 (instrucciones -> array .)
    RETURN          reduce using rule 7 (instrucciones -> array .)


state 9

    (8) instrucciones -> funcion .

    $end            reduce using rule 8 (instrucciones -> funcion .)
    RCBRACKET       reduce using rule 8 (instrucciones -> funcion .)
    CASE            reduce using rule 8 (instrucciones -> funcion .)
    DEFAULT         reduce using rule 8 (instrucciones -> funcion .)
    RETURN          reduce using rule 8 (instrucciones -> funcion .)


state 10

    (9) instrucciones -> concatDatos .

    $end            reduce using rule 9 (instrucciones -> concatDatos .)
    RCBRACKET       reduce using rule 9 (instrucciones -> concatDatos .)
    CASE            reduce using rule 9 (instrucciones -> concatDatos .)
    DEFAULT         reduce using rule 9 (instrucciones -> concatDatos .)
    RETURN          reduce using rule 9 (instrucciones -> concatDatos .)


state 11

    (10) instrucciones -> ArraySemantica .

    $end            reduce using rule 10 (instrucciones -> ArraySemantica .)
    RCBRACKET       reduce using rule 10 (instrucciones -> ArraySemantica .)
    CASE            reduce using rule 10 (instrucciones -> ArraySemantica .)
    DEFAULT         reduce using rule 10 (instrucciones -> ArraySemantica .)
    RETURN          reduce using rule 10 (instrucciones -> ArraySemantica .)


state 12

    (11) instrucciones -> switchh .

    $end            reduce using rule 11 (instrucciones -> switchh .)
    RCBRACKET       reduce using rule 11 (instrucciones -> switchh .)
    CASE            reduce using rule 11 (instrucciones -> switchh .)
    DEFAULT         reduce using rule 11 (instrucciones -> switchh .)
    RETURN          reduce using rule 11 (instrucciones -> switchh .)


state 13

    (12) instrucciones -> asignaciones .

    $end            reduce using rule 12 (instrucciones -> asignaciones .)
    RCBRACKET       reduce using rule 12 (instrucciones -> asignaciones .)
    CASE            reduce using rule 12 (instrucciones -> asignaciones .)
    DEFAULT         reduce using rule 12 (instrucciones -> asignaciones .)
    RETURN          reduce using rule 12 (instrucciones -> asignaciones .)


state 14

    (13) instrucciones -> expresionCondicion .

    $end            reduce using rule 13 (instrucciones -> expresionCondicion .)
    RCBRACKET       reduce using rule 13 (instrucciones -> expresionCondicion .)
    CASE            reduce using rule 13 (instrucciones -> expresionCondicion .)
    DEFAULT         reduce using rule 13 (instrucciones -> expresionCondicion .)
    RETURN          reduce using rule 13 (instrucciones -> expresionCondicion .)


state 15

    (14) impresion -> PRINT . LPAREN dato RPAREN

    LPAREN          shift and go to state 32


state 16

    (15) impresion -> PRINTLN . LPAREN dato RPAREN

    LPAREN          shift and go to state 33


state 17

    (20) for -> FOR . VARIABLE FASTDEC INT PUNTO_COMA VARIABLE sigcomparacion INT PUNTO_COMA VARIABLE MASMAS LCBRACKET
    (21) for2 -> FOR . VARIABLE sigcomparacion INT LCBRACKET
    (22) for3 -> FOR . LCBRACKET instrucciones RCBRACKET

    VARIABLE        shift and go to state 34
    LCBRACKET       shift and go to state 35


state 18

    (48) mapa -> VARIABLE . EQUALS MAP LBRACKET TDATA RBRACKET TDATA LCBRACKET adentro RCBRACKET
    (30) array -> VARIABLE . FASTDEC LBRACKET INT TDATA LCBRACKET elementArray RCBRACKET
    (66) ArraySemantica -> VARIABLE . FASTDEC LBRACKET INT TINT LCBRACKET elementIntS RCBRACKET
    (71) expresionCondicion -> VARIABLE . FASTDEC comparacion
    (62) decfast -> VARIABLE . FASTDEC dato

    EQUALS          shift and go to state 36
    FASTDEC         shift and go to state 37


state 19

    (64) concatDatos -> INT . MAS INT

    MAS             shift and go to state 38


state 20

    (55) si -> IF . comparacion LCBRACKET instrucciones RCBRACKET
    (56) comparacion -> . dato sigcomparacion dato
    (16) dato -> . INT
    (17) dato -> . STRING
    (18) dato -> . FLOAT
    (19) dato -> . VARIABLE

    INT             shift and go to state 41
    STRING          shift and go to state 42
    FLOAT           shift and go to state 43
    VARIABLE        shift and go to state 44

    comparacion                    shift and go to state 39
    dato                           shift and go to state 40

state 21

    (29) array -> VAR . VARIABLE EQUALS LBRACKET INT RBRACKET TDATA LCBRACKET elementArray RCBRACKET
    (65) ArraySemantica -> VAR . VARIABLE EQUALS LBRACKET INT RBRACKET TSTRING LCBRACKET elementStringS RCBRACKET
    (60) varsimple -> VAR . VARIABLE TDATA EQUALS dato
    (61) varobviado -> VAR . VARIABLE EQUALS dato

    VARIABLE        shift and go to state 45


state 22

    (33) funcion -> funSimple .

    $end            reduce using rule 33 (funcion -> funSimple .)
    RCBRACKET       reduce using rule 33 (funcion -> funSimple .)
    CASE            reduce using rule 33 (funcion -> funSimple .)
    DEFAULT         reduce using rule 33 (funcion -> funSimple .)
    RETURN          reduce using rule 33 (funcion -> funSimple .)


state 23

    (34) funcion -> funcPa .

    $end            reduce using rule 34 (funcion -> funcPa .)
    RCBRACKET       reduce using rule 34 (funcion -> funcPa .)
    CASE            reduce using rule 34 (funcion -> funcPa .)
    DEFAULT         reduce using rule 34 (funcion -> funcPa .)
    RETURN          reduce using rule 34 (funcion -> funcPa .)


state 24

    (35) funcion -> funcRetorno .

    $end            reduce using rule 35 (funcion -> funcRetorno .)
    RCBRACKET       reduce using rule 35 (funcion -> funcRetorno .)
    CASE            reduce using rule 35 (funcion -> funcRetorno .)
    DEFAULT         reduce using rule 35 (funcion -> funcRetorno .)
    RETURN          reduce using rule 35 (funcion -> funcRetorno .)


state 25

    (36) funcion -> funcCompleta .

    $end            reduce using rule 36 (funcion -> funcCompleta .)
    RCBRACKET       reduce using rule 36 (funcion -> funcCompleta .)
    CASE            reduce using rule 36 (funcion -> funcCompleta .)
    DEFAULT         reduce using rule 36 (funcion -> funcCompleta .)
    RETURN          reduce using rule 36 (funcion -> funcCompleta .)


state 26

    (63) concatDatos -> STRING . MAS STRING

    MAS             shift and go to state 46


state 27

    (72) switchh -> SWITCH . VARIABLE LCBRACKET cases def RCBRACKET

    VARIABLE        shift and go to state 47


state 28

    (57) asignaciones -> varsimple .

    $end            reduce using rule 57 (asignaciones -> varsimple .)
    RCBRACKET       reduce using rule 57 (asignaciones -> varsimple .)
    CASE            reduce using rule 57 (asignaciones -> varsimple .)
    DEFAULT         reduce using rule 57 (asignaciones -> varsimple .)
    RETURN          reduce using rule 57 (asignaciones -> varsimple .)


state 29

    (58) asignaciones -> varobviado .

    $end            reduce using rule 58 (asignaciones -> varobviado .)
    RCBRACKET       reduce using rule 58 (asignaciones -> varobviado .)
    CASE            reduce using rule 58 (asignaciones -> varobviado .)
    DEFAULT         reduce using rule 58 (asignaciones -> varobviado .)
    RETURN          reduce using rule 58 (asignaciones -> varobviado .)


state 30

    (59) asignaciones -> decfast .

    $end            reduce using rule 59 (asignaciones -> decfast .)
    RCBRACKET       reduce using rule 59 (asignaciones -> decfast .)
    CASE            reduce using rule 59 (asignaciones -> decfast .)
    DEFAULT         reduce using rule 59 (asignaciones -> decfast .)
    RETURN          reduce using rule 59 (asignaciones -> decfast .)


state 31

    (37) funSimple -> FUNC . nombreFuncion LPAREN RPAREN LCBRACKET instrucciones RCBRACKET
    (38) funcPa -> FUNC . nombreFuncion LPAREN parametrosF RPAREN LCBRACKET instrucciones RCBRACKET
    (39) funcRetorno -> FUNC . nombreFuncion LPAREN RPAREN LPAREN datoReturn RPAREN LCBRACKET instrucciones returnF RCBRACKET
    (40) funcCompleta -> FUNC . nombreFuncion LPAREN parametrosF RPAREN LPAREN datoReturn RPAREN LCBRACKET instrucciones returnF RCBRACKET
    (41) nombreFuncion -> . VARIABLE

    VARIABLE        shift and go to state 49

    nombreFuncion                  shift and go to state 48

state 32

    (14) impresion -> PRINT LPAREN . dato RPAREN
    (16) dato -> . INT
    (17) dato -> . STRING
    (18) dato -> . FLOAT
    (19) dato -> . VARIABLE

    INT             shift and go to state 41
    STRING          shift and go to state 42
    FLOAT           shift and go to state 43
    VARIABLE        shift and go to state 44

    dato                           shift and go to state 50

state 33

    (15) impresion -> PRINTLN LPAREN . dato RPAREN
    (16) dato -> . INT
    (17) dato -> . STRING
    (18) dato -> . FLOAT
    (19) dato -> . VARIABLE

    INT             shift and go to state 41
    STRING          shift and go to state 42
    FLOAT           shift and go to state 43
    VARIABLE        shift and go to state 44

    dato                           shift and go to state 51

state 34

    (20) for -> FOR VARIABLE . FASTDEC INT PUNTO_COMA VARIABLE sigcomparacion INT PUNTO_COMA VARIABLE MASMAS LCBRACKET
    (21) for2 -> FOR VARIABLE . sigcomparacion INT LCBRACKET
    (23) sigcomparacion -> . MENORQUE
    (24) sigcomparacion -> . MAYORQUE
    (25) sigcomparacion -> . DIFERENTE
    (26) sigcomparacion -> . COMPARA_IGUAL
    (27) sigcomparacion -> . MAYORIGUAL
    (28) sigcomparacion -> . MENORIGUAL

    FASTDEC         shift and go to state 52
    MENORQUE        shift and go to state 54
    MAYORQUE        shift and go to state 55
    DIFERENTE       shift and go to state 56
    COMPARA_IGUAL   shift and go to state 57
    MAYORIGUAL      shift and go to state 58
    MENORIGUAL      shift and go to state 59

    sigcomparacion                 shift and go to state 53

state 35

    (22) for3 -> FOR LCBRACKET . instrucciones RCBRACKET
    (1) instrucciones -> . impresion
    (2) instrucciones -> . for
    (3) instrucciones -> . for2
    (4) instrucciones -> . for3
    (5) instrucciones -> . mapa
    (6) instrucciones -> . si
    (7) instrucciones -> . array
    (8) instrucciones -> . funcion
    (9) instrucciones -> . concatDatos
    (10) instrucciones -> . ArraySemantica
    (11) instrucciones -> . switchh
    (12) instrucciones -> . asignaciones
    (13) instrucciones -> . expresionCondicion
    (14) impresion -> . PRINT LPAREN dato RPAREN
    (15) impresion -> . PRINTLN LPAREN dato RPAREN
    (20) for -> . FOR VARIABLE FASTDEC INT PUNTO_COMA VARIABLE sigcomparacion INT PUNTO_COMA VARIABLE MASMAS LCBRACKET
    (21) for2 -> . FOR VARIABLE sigcomparacion INT LCBRACKET
    (22) for3 -> . FOR LCBRACKET instrucciones RCBRACKET
    (48) mapa -> . VARIABLE EQUALS MAP LBRACKET TDATA RBRACKET TDATA LCBRACKET adentro RCBRACKET
    (55) si -> . IF comparacion LCBRACKET instrucciones RCBRACKET
    (29) array -> . VAR VARIABLE EQUALS LBRACKET INT RBRACKET TDATA LCBRACKET elementArray RCBRACKET
    (30) array -> . VARIABLE FASTDEC LBRACKET INT TDATA LCBRACKET elementArray RCBRACKET
    (33) funcion -> . funSimple
    (34) funcion -> . funcPa
    (35) funcion -> . funcRetorno
    (36) funcion -> . funcCompleta
    (63) concatDatos -> . STRING MAS STRING
    (64) concatDatos -> . INT MAS INT
    (65) ArraySemantica -> . VAR VARIABLE EQUALS LBRACKET INT RBRACKET TSTRING LCBRACKET elementStringS RCBRACKET
    (66) ArraySemantica -> . VARIABLE FASTDEC LBRACKET INT TINT LCBRACKET elementIntS RCBRACKET
    (72) switchh -> . SWITCH VARIABLE LCBRACKET cases def RCBRACKET
    (57) asignaciones -> . varsimple
    (58) asignaciones -> . varobviado
    (59) asignaciones -> . decfast
    (71) expresionCondicion -> . VARIABLE FASTDEC comparacion
    (37) funSimple -> . FUNC nombreFuncion LPAREN RPAREN LCBRACKET instrucciones RCBRACKET
    (38) funcPa -> . FUNC nombreFuncion LPAREN parametrosF RPAREN LCBRACKET instrucciones RCBRACKET
    (39) funcRetorno -> . FUNC nombreFuncion LPAREN RPAREN LPAREN datoReturn RPAREN LCBRACKET instrucciones returnF RCBRACKET
    (40) funcCompleta -> . FUNC nombreFuncion LPAREN parametrosF RPAREN LPAREN datoReturn RPAREN LCBRACKET instrucciones returnF RCBRACKET
    (60) varsimple -> . VAR VARIABLE TDATA EQUALS dato
    (61) varobviado -> . VAR VARIABLE EQUALS dato
    (62) decfast -> . VARIABLE FASTDEC dato

    PRINT           shift and go to state 15
    PRINTLN         shift and go to state 16
    FOR             shift and go to state 17
    VARIABLE        shift and go to state 18
    IF              shift and go to state 20
    VAR             shift and go to state 21
    STRING          shift and go to state 26
    INT             shift and go to state 19
    SWITCH          shift and go to state 27
    FUNC            shift and go to state 31

    instrucciones                  shift and go to state 60
    impresion                      shift and go to state 2
    for                            shift and go to state 3
    for2                           shift and go to state 4
    for3                           shift and go to state 5
    mapa                           shift and go to state 6
    si                             shift and go to state 7
    array                          shift and go to state 8
    funcion                        shift and go to state 9
    concatDatos                    shift and go to state 10
    ArraySemantica                 shift and go to state 11
    switchh                        shift and go to state 12
    asignaciones                   shift and go to state 13
    expresionCondicion             shift and go to state 14
    funSimple                      shift and go to state 22
    funcPa                         shift and go to state 23
    funcRetorno                    shift and go to state 24
    funcCompleta                   shift and go to state 25
    varsimple                      shift and go to state 28
    varobviado                     shift and go to state 29
    decfast                        shift and go to state 30

state 36

    (48) mapa -> VARIABLE EQUALS . MAP LBRACKET TDATA RBRACKET TDATA LCBRACKET adentro RCBRACKET

    MAP             shift and go to state 61


state 37

    (30) array -> VARIABLE FASTDEC . LBRACKET INT TDATA LCBRACKET elementArray RCBRACKET
    (66) ArraySemantica -> VARIABLE FASTDEC . LBRACKET INT TINT LCBRACKET elementIntS RCBRACKET
    (71) expresionCondicion -> VARIABLE FASTDEC . comparacion
    (62) decfast -> VARIABLE FASTDEC . dato
    (56) comparacion -> . dato sigcomparacion dato
    (16) dato -> . INT
    (17) dato -> . STRING
    (18) dato -> . FLOAT
    (19) dato -> . VARIABLE

    LBRACKET        shift and go to state 62
    INT             shift and go to state 41
    STRING          shift and go to state 42
    FLOAT           shift and go to state 43
    VARIABLE        shift and go to state 44

    comparacion                    shift and go to state 63
    dato                           shift and go to state 64

state 38

    (64) concatDatos -> INT MAS . INT

    INT             shift and go to state 65


state 39

    (55) si -> IF comparacion . LCBRACKET instrucciones RCBRACKET

    LCBRACKET       shift and go to state 66


state 40

    (56) comparacion -> dato . sigcomparacion dato
    (23) sigcomparacion -> . MENORQUE
    (24) sigcomparacion -> . MAYORQUE
    (25) sigcomparacion -> . DIFERENTE
    (26) sigcomparacion -> . COMPARA_IGUAL
    (27) sigcomparacion -> . MAYORIGUAL
    (28) sigcomparacion -> . MENORIGUAL

    MENORQUE        shift and go to state 54
    MAYORQUE        shift and go to state 55
    DIFERENTE       shift and go to state 56
    COMPARA_IGUAL   shift and go to state 57
    MAYORIGUAL      shift and go to state 58
    MENORIGUAL      shift and go to state 59

    sigcomparacion                 shift and go to state 67

state 41

    (16) dato -> INT .

    MENORQUE        reduce using rule 16 (dato -> INT .)
    MAYORQUE        reduce using rule 16 (dato -> INT .)
    DIFERENTE       reduce using rule 16 (dato -> INT .)
    COMPARA_IGUAL   reduce using rule 16 (dato -> INT .)
    MAYORIGUAL      reduce using rule 16 (dato -> INT .)
    MENORIGUAL      reduce using rule 16 (dato -> INT .)
    RPAREN          reduce using rule 16 (dato -> INT .)
    $end            reduce using rule 16 (dato -> INT .)
    RCBRACKET       reduce using rule 16 (dato -> INT .)
    CASE            reduce using rule 16 (dato -> INT .)
    DEFAULT         reduce using rule 16 (dato -> INT .)
    RETURN          reduce using rule 16 (dato -> INT .)
    LCBRACKET       reduce using rule 16 (dato -> INT .)
    COMMA           reduce using rule 16 (dato -> INT .)
    COLON           reduce using rule 16 (dato -> INT .)


state 42

    (17) dato -> STRING .

    MENORQUE        reduce using rule 17 (dato -> STRING .)
    MAYORQUE        reduce using rule 17 (dato -> STRING .)
    DIFERENTE       reduce using rule 17 (dato -> STRING .)
    COMPARA_IGUAL   reduce using rule 17 (dato -> STRING .)
    MAYORIGUAL      reduce using rule 17 (dato -> STRING .)
    MENORIGUAL      reduce using rule 17 (dato -> STRING .)
    RPAREN          reduce using rule 17 (dato -> STRING .)
    $end            reduce using rule 17 (dato -> STRING .)
    RCBRACKET       reduce using rule 17 (dato -> STRING .)
    CASE            reduce using rule 17 (dato -> STRING .)
    DEFAULT         reduce using rule 17 (dato -> STRING .)
    RETURN          reduce using rule 17 (dato -> STRING .)
    LCBRACKET       reduce using rule 17 (dato -> STRING .)
    COMMA           reduce using rule 17 (dato -> STRING .)
    COLON           reduce using rule 17 (dato -> STRING .)


state 43

    (18) dato -> FLOAT .

    MENORQUE        reduce using rule 18 (dato -> FLOAT .)
    MAYORQUE        reduce using rule 18 (dato -> FLOAT .)
    DIFERENTE       reduce using rule 18 (dato -> FLOAT .)
    COMPARA_IGUAL   reduce using rule 18 (dato -> FLOAT .)
    MAYORIGUAL      reduce using rule 18 (dato -> FLOAT .)
    MENORIGUAL      reduce using rule 18 (dato -> FLOAT .)
    RPAREN          reduce using rule 18 (dato -> FLOAT .)
    $end            reduce using rule 18 (dato -> FLOAT .)
    RCBRACKET       reduce using rule 18 (dato -> FLOAT .)
    CASE            reduce using rule 18 (dato -> FLOAT .)
    DEFAULT         reduce using rule 18 (dato -> FLOAT .)
    RETURN          reduce using rule 18 (dato -> FLOAT .)
    LCBRACKET       reduce using rule 18 (dato -> FLOAT .)
    COMMA           reduce using rule 18 (dato -> FLOAT .)
    COLON           reduce using rule 18 (dato -> FLOAT .)


state 44

    (19) dato -> VARIABLE .

    MENORQUE        reduce using rule 19 (dato -> VARIABLE .)
    MAYORQUE        reduce using rule 19 (dato -> VARIABLE .)
    DIFERENTE       reduce using rule 19 (dato -> VARIABLE .)
    COMPARA_IGUAL   reduce using rule 19 (dato -> VARIABLE .)
    MAYORIGUAL      reduce using rule 19 (dato -> VARIABLE .)
    MENORIGUAL      reduce using rule 19 (dato -> VARIABLE .)
    RPAREN          reduce using rule 19 (dato -> VARIABLE .)
    $end            reduce using rule 19 (dato -> VARIABLE .)
    RCBRACKET       reduce using rule 19 (dato -> VARIABLE .)
    CASE            reduce using rule 19 (dato -> VARIABLE .)
    DEFAULT         reduce using rule 19 (dato -> VARIABLE .)
    RETURN          reduce using rule 19 (dato -> VARIABLE .)
    LCBRACKET       reduce using rule 19 (dato -> VARIABLE .)
    COMMA           reduce using rule 19 (dato -> VARIABLE .)
    COLON           reduce using rule 19 (dato -> VARIABLE .)


state 45

    (29) array -> VAR VARIABLE . EQUALS LBRACKET INT RBRACKET TDATA LCBRACKET elementArray RCBRACKET
    (65) ArraySemantica -> VAR VARIABLE . EQUALS LBRACKET INT RBRACKET TSTRING LCBRACKET elementStringS RCBRACKET
    (60) varsimple -> VAR VARIABLE . TDATA EQUALS dato
    (61) varobviado -> VAR VARIABLE . EQUALS dato
    (49) TDATA -> . TSTRING
    (50) TDATA -> . TINT
    (51) TDATA -> . TFLOAT

    EQUALS          shift and go to state 68
    TSTRING         shift and go to state 70
    TINT            shift and go to state 71
    TFLOAT          shift and go to state 72

    TDATA                          shift and go to state 69

state 46

    (63) concatDatos -> STRING MAS . STRING

    STRING          shift and go to state 73


state 47

    (72) switchh -> SWITCH VARIABLE . LCBRACKET cases def RCBRACKET

    LCBRACKET       shift and go to state 74


state 48

    (37) funSimple -> FUNC nombreFuncion . LPAREN RPAREN LCBRACKET instrucciones RCBRACKET
    (38) funcPa -> FUNC nombreFuncion . LPAREN parametrosF RPAREN LCBRACKET instrucciones RCBRACKET
    (39) funcRetorno -> FUNC nombreFuncion . LPAREN RPAREN LPAREN datoReturn RPAREN LCBRACKET instrucciones returnF RCBRACKET
    (40) funcCompleta -> FUNC nombreFuncion . LPAREN parametrosF RPAREN LPAREN datoReturn RPAREN LCBRACKET instrucciones returnF RCBRACKET

    LPAREN          shift and go to state 75


state 49

    (41) nombreFuncion -> VARIABLE .

    LPAREN          reduce using rule 41 (nombreFuncion -> VARIABLE .)


state 50

    (14) impresion -> PRINT LPAREN dato . RPAREN

    RPAREN          shift and go to state 76


state 51

    (15) impresion -> PRINTLN LPAREN dato . RPAREN

    RPAREN          shift and go to state 77


state 52

    (20) for -> FOR VARIABLE FASTDEC . INT PUNTO_COMA VARIABLE sigcomparacion INT PUNTO_COMA VARIABLE MASMAS LCBRACKET

    INT             shift and go to state 78


state 53

    (21) for2 -> FOR VARIABLE sigcomparacion . INT LCBRACKET

    INT             shift and go to state 79


state 54

    (23) sigcomparacion -> MENORQUE .

    INT             reduce using rule 23 (sigcomparacion -> MENORQUE .)
    STRING          reduce using rule 23 (sigcomparacion -> MENORQUE .)
    FLOAT           reduce using rule 23 (sigcomparacion -> MENORQUE .)
    VARIABLE        reduce using rule 23 (sigcomparacion -> MENORQUE .)


state 55

    (24) sigcomparacion -> MAYORQUE .

    INT             reduce using rule 24 (sigcomparacion -> MAYORQUE .)
    STRING          reduce using rule 24 (sigcomparacion -> MAYORQUE .)
    FLOAT           reduce using rule 24 (sigcomparacion -> MAYORQUE .)
    VARIABLE        reduce using rule 24 (sigcomparacion -> MAYORQUE .)


state 56

    (25) sigcomparacion -> DIFERENTE .

    INT             reduce using rule 25 (sigcomparacion -> DIFERENTE .)
    STRING          reduce using rule 25 (sigcomparacion -> DIFERENTE .)
    FLOAT           reduce using rule 25 (sigcomparacion -> DIFERENTE .)
    VARIABLE        reduce using rule 25 (sigcomparacion -> DIFERENTE .)


state 57

    (26) sigcomparacion -> COMPARA_IGUAL .

    INT             reduce using rule 26 (sigcomparacion -> COMPARA_IGUAL .)
    STRING          reduce using rule 26 (sigcomparacion -> COMPARA_IGUAL .)
    FLOAT           reduce using rule 26 (sigcomparacion -> COMPARA_IGUAL .)
    VARIABLE        reduce using rule 26 (sigcomparacion -> COMPARA_IGUAL .)


state 58

    (27) sigcomparacion -> MAYORIGUAL .

    INT             reduce using rule 27 (sigcomparacion -> MAYORIGUAL .)
    STRING          reduce using rule 27 (sigcomparacion -> MAYORIGUAL .)
    FLOAT           reduce using rule 27 (sigcomparacion -> MAYORIGUAL .)
    VARIABLE        reduce using rule 27 (sigcomparacion -> MAYORIGUAL .)


state 59

    (28) sigcomparacion -> MENORIGUAL .

    INT             reduce using rule 28 (sigcomparacion -> MENORIGUAL .)
    STRING          reduce using rule 28 (sigcomparacion -> MENORIGUAL .)
    FLOAT           reduce using rule 28 (sigcomparacion -> MENORIGUAL .)
    VARIABLE        reduce using rule 28 (sigcomparacion -> MENORIGUAL .)


state 60

    (22) for3 -> FOR LCBRACKET instrucciones . RCBRACKET

    RCBRACKET       shift and go to state 80


state 61

    (48) mapa -> VARIABLE EQUALS MAP . LBRACKET TDATA RBRACKET TDATA LCBRACKET adentro RCBRACKET

    LBRACKET        shift and go to state 81


state 62

    (30) array -> VARIABLE FASTDEC LBRACKET . INT TDATA LCBRACKET elementArray RCBRACKET
    (66) ArraySemantica -> VARIABLE FASTDEC LBRACKET . INT TINT LCBRACKET elementIntS RCBRACKET

    INT             shift and go to state 82


state 63

    (71) expresionCondicion -> VARIABLE FASTDEC comparacion .

    $end            reduce using rule 71 (expresionCondicion -> VARIABLE FASTDEC comparacion .)
    RCBRACKET       reduce using rule 71 (expresionCondicion -> VARIABLE FASTDEC comparacion .)
    CASE            reduce using rule 71 (expresionCondicion -> VARIABLE FASTDEC comparacion .)
    DEFAULT         reduce using rule 71 (expresionCondicion -> VARIABLE FASTDEC comparacion .)
    RETURN          reduce using rule 71 (expresionCondicion -> VARIABLE FASTDEC comparacion .)


state 64

    (62) decfast -> VARIABLE FASTDEC dato .
    (56) comparacion -> dato . sigcomparacion dato
    (23) sigcomparacion -> . MENORQUE
    (24) sigcomparacion -> . MAYORQUE
    (25) sigcomparacion -> . DIFERENTE
    (26) sigcomparacion -> . COMPARA_IGUAL
    (27) sigcomparacion -> . MAYORIGUAL
    (28) sigcomparacion -> . MENORIGUAL

    $end            reduce using rule 62 (decfast -> VARIABLE FASTDEC dato .)
    RCBRACKET       reduce using rule 62 (decfast -> VARIABLE FASTDEC dato .)
    CASE            reduce using rule 62 (decfast -> VARIABLE FASTDEC dato .)
    DEFAULT         reduce using rule 62 (decfast -> VARIABLE FASTDEC dato .)
    RETURN          reduce using rule 62 (decfast -> VARIABLE FASTDEC dato .)
    MENORQUE        shift and go to state 54
    MAYORQUE        shift and go to state 55
    DIFERENTE       shift and go to state 56
    COMPARA_IGUAL   shift and go to state 57
    MAYORIGUAL      shift and go to state 58
    MENORIGUAL      shift and go to state 59

    sigcomparacion                 shift and go to state 67

state 65

    (64) concatDatos -> INT MAS INT .

    $end            reduce using rule 64 (concatDatos -> INT MAS INT .)
    RCBRACKET       reduce using rule 64 (concatDatos -> INT MAS INT .)
    CASE            reduce using rule 64 (concatDatos -> INT MAS INT .)
    DEFAULT         reduce using rule 64 (concatDatos -> INT MAS INT .)
    RETURN          reduce using rule 64 (concatDatos -> INT MAS INT .)


state 66

    (55) si -> IF comparacion LCBRACKET . instrucciones RCBRACKET
    (1) instrucciones -> . impresion
    (2) instrucciones -> . for
    (3) instrucciones -> . for2
    (4) instrucciones -> . for3
    (5) instrucciones -> . mapa
    (6) instrucciones -> . si
    (7) instrucciones -> . array
    (8) instrucciones -> . funcion
    (9) instrucciones -> . concatDatos
    (10) instrucciones -> . ArraySemantica
    (11) instrucciones -> . switchh
    (12) instrucciones -> . asignaciones
    (13) instrucciones -> . expresionCondicion
    (14) impresion -> . PRINT LPAREN dato RPAREN
    (15) impresion -> . PRINTLN LPAREN dato RPAREN
    (20) for -> . FOR VARIABLE FASTDEC INT PUNTO_COMA VARIABLE sigcomparacion INT PUNTO_COMA VARIABLE MASMAS LCBRACKET
    (21) for2 -> . FOR VARIABLE sigcomparacion INT LCBRACKET
    (22) for3 -> . FOR LCBRACKET instrucciones RCBRACKET
    (48) mapa -> . VARIABLE EQUALS MAP LBRACKET TDATA RBRACKET TDATA LCBRACKET adentro RCBRACKET
    (55) si -> . IF comparacion LCBRACKET instrucciones RCBRACKET
    (29) array -> . VAR VARIABLE EQUALS LBRACKET INT RBRACKET TDATA LCBRACKET elementArray RCBRACKET
    (30) array -> . VARIABLE FASTDEC LBRACKET INT TDATA LCBRACKET elementArray RCBRACKET
    (33) funcion -> . funSimple
    (34) funcion -> . funcPa
    (35) funcion -> . funcRetorno
    (36) funcion -> . funcCompleta
    (63) concatDatos -> . STRING MAS STRING
    (64) concatDatos -> . INT MAS INT
    (65) ArraySemantica -> . VAR VARIABLE EQUALS LBRACKET INT RBRACKET TSTRING LCBRACKET elementStringS RCBRACKET
    (66) ArraySemantica -> . VARIABLE FASTDEC LBRACKET INT TINT LCBRACKET elementIntS RCBRACKET
    (72) switchh -> . SWITCH VARIABLE LCBRACKET cases def RCBRACKET
    (57) asignaciones -> . varsimple
    (58) asignaciones -> . varobviado
    (59) asignaciones -> . decfast
    (71) expresionCondicion -> . VARIABLE FASTDEC comparacion
    (37) funSimple -> . FUNC nombreFuncion LPAREN RPAREN LCBRACKET instrucciones RCBRACKET
    (38) funcPa -> . FUNC nombreFuncion LPAREN parametrosF RPAREN LCBRACKET instrucciones RCBRACKET
    (39) funcRetorno -> . FUNC nombreFuncion LPAREN RPAREN LPAREN datoReturn RPAREN LCBRACKET instrucciones returnF RCBRACKET
    (40) funcCompleta -> . FUNC nombreFuncion LPAREN parametrosF RPAREN LPAREN datoReturn RPAREN LCBRACKET instrucciones returnF RCBRACKET
    (60) varsimple -> . VAR VARIABLE TDATA EQUALS dato
    (61) varobviado -> . VAR VARIABLE EQUALS dato
    (62) decfast -> . VARIABLE FASTDEC dato

    PRINT           shift and go to state 15
    PRINTLN         shift and go to state 16
    FOR             shift and go to state 17
    VARIABLE        shift and go to state 18
    IF              shift and go to state 20
    VAR             shift and go to state 21
    STRING          shift and go to state 26
    INT             shift and go to state 19
    SWITCH          shift and go to state 27
    FUNC            shift and go to state 31

    instrucciones                  shift and go to state 83
    impresion                      shift and go to state 2
    for                            shift and go to state 3
    for2                           shift and go to state 4
    for3                           shift and go to state 5
    mapa                           shift and go to state 6
    si                             shift and go to state 7
    array                          shift and go to state 8
    funcion                        shift and go to state 9
    concatDatos                    shift and go to state 10
    ArraySemantica                 shift and go to state 11
    switchh                        shift and go to state 12
    asignaciones                   shift and go to state 13
    expresionCondicion             shift and go to state 14
    funSimple                      shift and go to state 22
    funcPa                         shift and go to state 23
    funcRetorno                    shift and go to state 24
    funcCompleta                   shift and go to state 25
    varsimple                      shift and go to state 28
    varobviado                     shift and go to state 29
    decfast                        shift and go to state 30

state 67

    (56) comparacion -> dato sigcomparacion . dato
    (16) dato -> . INT
    (17) dato -> . STRING
    (18) dato -> . FLOAT
    (19) dato -> . VARIABLE

    INT             shift and go to state 41
    STRING          shift and go to state 42
    FLOAT           shift and go to state 43
    VARIABLE        shift and go to state 44

    dato                           shift and go to state 84

state 68

    (29) array -> VAR VARIABLE EQUALS . LBRACKET INT RBRACKET TDATA LCBRACKET elementArray RCBRACKET
    (65) ArraySemantica -> VAR VARIABLE EQUALS . LBRACKET INT RBRACKET TSTRING LCBRACKET elementStringS RCBRACKET
    (61) varobviado -> VAR VARIABLE EQUALS . dato
    (16) dato -> . INT
    (17) dato -> . STRING
    (18) dato -> . FLOAT
    (19) dato -> . VARIABLE

    LBRACKET        shift and go to state 85
    INT             shift and go to state 41
    STRING          shift and go to state 42
    FLOAT           shift and go to state 43
    VARIABLE        shift and go to state 44

    dato                           shift and go to state 86

state 69

    (60) varsimple -> VAR VARIABLE TDATA . EQUALS dato

    EQUALS          shift and go to state 87


state 70

    (49) TDATA -> TSTRING .

    EQUALS          reduce using rule 49 (TDATA -> TSTRING .)
    RBRACKET        reduce using rule 49 (TDATA -> TSTRING .)
    LCBRACKET       reduce using rule 49 (TDATA -> TSTRING .)
    COMMA           reduce using rule 49 (TDATA -> TSTRING .)
    RPAREN          reduce using rule 49 (TDATA -> TSTRING .)


state 71

    (50) TDATA -> TINT .

    EQUALS          reduce using rule 50 (TDATA -> TINT .)
    RBRACKET        reduce using rule 50 (TDATA -> TINT .)
    COMMA           reduce using rule 50 (TDATA -> TINT .)
    RPAREN          reduce using rule 50 (TDATA -> TINT .)
    LCBRACKET       reduce using rule 50 (TDATA -> TINT .)


state 72

    (51) TDATA -> TFLOAT .

    EQUALS          reduce using rule 51 (TDATA -> TFLOAT .)
    RBRACKET        reduce using rule 51 (TDATA -> TFLOAT .)
    LCBRACKET       reduce using rule 51 (TDATA -> TFLOAT .)
    COMMA           reduce using rule 51 (TDATA -> TFLOAT .)
    RPAREN          reduce using rule 51 (TDATA -> TFLOAT .)


state 73

    (63) concatDatos -> STRING MAS STRING .

    $end            reduce using rule 63 (concatDatos -> STRING MAS STRING .)
    RCBRACKET       reduce using rule 63 (concatDatos -> STRING MAS STRING .)
    CASE            reduce using rule 63 (concatDatos -> STRING MAS STRING .)
    DEFAULT         reduce using rule 63 (concatDatos -> STRING MAS STRING .)
    RETURN          reduce using rule 63 (concatDatos -> STRING MAS STRING .)


state 74

    (72) switchh -> SWITCH VARIABLE LCBRACKET . cases def RCBRACKET
    (73) cases -> . case1
    (74) cases -> . case1 cases
    (75) case1 -> . CASE INT COLON instrucciones

    CASE            shift and go to state 90

    cases                          shift and go to state 88
    case1                          shift and go to state 89

state 75

    (37) funSimple -> FUNC nombreFuncion LPAREN . RPAREN LCBRACKET instrucciones RCBRACKET
    (38) funcPa -> FUNC nombreFuncion LPAREN . parametrosF RPAREN LCBRACKET instrucciones RCBRACKET
    (39) funcRetorno -> FUNC nombreFuncion LPAREN . RPAREN LPAREN datoReturn RPAREN LCBRACKET instrucciones returnF RCBRACKET
    (40) funcCompleta -> FUNC nombreFuncion LPAREN . parametrosF RPAREN LPAREN datoReturn RPAREN LCBRACKET instrucciones returnF RCBRACKET
    (42) parametrosF -> . VARIABLE TDATA
    (43) parametrosF -> . VARIABLE TDATA COMMA parametrosF

    RPAREN          shift and go to state 91
    VARIABLE        shift and go to state 93

    parametrosF                    shift and go to state 92

state 76

    (14) impresion -> PRINT LPAREN dato RPAREN .

    $end            reduce using rule 14 (impresion -> PRINT LPAREN dato RPAREN .)
    RCBRACKET       reduce using rule 14 (impresion -> PRINT LPAREN dato RPAREN .)
    CASE            reduce using rule 14 (impresion -> PRINT LPAREN dato RPAREN .)
    DEFAULT         reduce using rule 14 (impresion -> PRINT LPAREN dato RPAREN .)
    RETURN          reduce using rule 14 (impresion -> PRINT LPAREN dato RPAREN .)


state 77

    (15) impresion -> PRINTLN LPAREN dato RPAREN .

    $end            reduce using rule 15 (impresion -> PRINTLN LPAREN dato RPAREN .)
    RCBRACKET       reduce using rule 15 (impresion -> PRINTLN LPAREN dato RPAREN .)
    CASE            reduce using rule 15 (impresion -> PRINTLN LPAREN dato RPAREN .)
    DEFAULT         reduce using rule 15 (impresion -> PRINTLN LPAREN dato RPAREN .)
    RETURN          reduce using rule 15 (impresion -> PRINTLN LPAREN dato RPAREN .)


state 78

    (20) for -> FOR VARIABLE FASTDEC INT . PUNTO_COMA VARIABLE sigcomparacion INT PUNTO_COMA VARIABLE MASMAS LCBRACKET

    PUNTO_COMA      shift and go to state 94


state 79

    (21) for2 -> FOR VARIABLE sigcomparacion INT . LCBRACKET

    LCBRACKET       shift and go to state 95


state 80

    (22) for3 -> FOR LCBRACKET instrucciones RCBRACKET .

    $end            reduce using rule 22 (for3 -> FOR LCBRACKET instrucciones RCBRACKET .)
    RCBRACKET       reduce using rule 22 (for3 -> FOR LCBRACKET instrucciones RCBRACKET .)
    CASE            reduce using rule 22 (for3 -> FOR LCBRACKET instrucciones RCBRACKET .)
    DEFAULT         reduce using rule 22 (for3 -> FOR LCBRACKET instrucciones RCBRACKET .)
    RETURN          reduce using rule 22 (for3 -> FOR LCBRACKET instrucciones RCBRACKET .)


state 81

    (48) mapa -> VARIABLE EQUALS MAP LBRACKET . TDATA RBRACKET TDATA LCBRACKET adentro RCBRACKET
    (49) TDATA -> . TSTRING
    (50) TDATA -> . TINT
    (51) TDATA -> . TFLOAT

    TSTRING         shift and go to state 70
    TINT            shift and go to state 71
    TFLOAT          shift and go to state 72

    TDATA                          shift and go to state 96

state 82

    (30) array -> VARIABLE FASTDEC LBRACKET INT . TDATA LCBRACKET elementArray RCBRACKET
    (66) ArraySemantica -> VARIABLE FASTDEC LBRACKET INT . TINT LCBRACKET elementIntS RCBRACKET
    (49) TDATA -> . TSTRING
    (50) TDATA -> . TINT
    (51) TDATA -> . TFLOAT

    TINT            shift and go to state 98
    TSTRING         shift and go to state 70
    TFLOAT          shift and go to state 72

    TDATA                          shift and go to state 97

state 83

    (55) si -> IF comparacion LCBRACKET instrucciones . RCBRACKET

    RCBRACKET       shift and go to state 99


state 84

    (56) comparacion -> dato sigcomparacion dato .

    LCBRACKET       reduce using rule 56 (comparacion -> dato sigcomparacion dato .)
    $end            reduce using rule 56 (comparacion -> dato sigcomparacion dato .)
    RCBRACKET       reduce using rule 56 (comparacion -> dato sigcomparacion dato .)
    CASE            reduce using rule 56 (comparacion -> dato sigcomparacion dato .)
    DEFAULT         reduce using rule 56 (comparacion -> dato sigcomparacion dato .)
    RETURN          reduce using rule 56 (comparacion -> dato sigcomparacion dato .)


state 85

    (29) array -> VAR VARIABLE EQUALS LBRACKET . INT RBRACKET TDATA LCBRACKET elementArray RCBRACKET
    (65) ArraySemantica -> VAR VARIABLE EQUALS LBRACKET . INT RBRACKET TSTRING LCBRACKET elementStringS RCBRACKET

    INT             shift and go to state 100


state 86

    (61) varobviado -> VAR VARIABLE EQUALS dato .

    $end            reduce using rule 61 (varobviado -> VAR VARIABLE EQUALS dato .)
    RCBRACKET       reduce using rule 61 (varobviado -> VAR VARIABLE EQUALS dato .)
    CASE            reduce using rule 61 (varobviado -> VAR VARIABLE EQUALS dato .)
    DEFAULT         reduce using rule 61 (varobviado -> VAR VARIABLE EQUALS dato .)
    RETURN          reduce using rule 61 (varobviado -> VAR VARIABLE EQUALS dato .)


state 87

    (60) varsimple -> VAR VARIABLE TDATA EQUALS . dato
    (16) dato -> . INT
    (17) dato -> . STRING
    (18) dato -> . FLOAT
    (19) dato -> . VARIABLE

    INT             shift and go to state 41
    STRING          shift and go to state 42
    FLOAT           shift and go to state 43
    VARIABLE        shift and go to state 44

    dato                           shift and go to state 101

state 88

    (72) switchh -> SWITCH VARIABLE LCBRACKET cases . def RCBRACKET
    (76) def -> . DEFAULT COMMA instrucciones

    DEFAULT         shift and go to state 103

    def                            shift and go to state 102

state 89

    (73) cases -> case1 .
    (74) cases -> case1 . cases
    (73) cases -> . case1
    (74) cases -> . case1 cases
    (75) case1 -> . CASE INT COLON instrucciones

    DEFAULT         reduce using rule 73 (cases -> case1 .)
    CASE            shift and go to state 90

    case1                          shift and go to state 89
    cases                          shift and go to state 104

state 90

    (75) case1 -> CASE . INT COLON instrucciones

    INT             shift and go to state 105


state 91

    (37) funSimple -> FUNC nombreFuncion LPAREN RPAREN . LCBRACKET instrucciones RCBRACKET
    (39) funcRetorno -> FUNC nombreFuncion LPAREN RPAREN . LPAREN datoReturn RPAREN LCBRACKET instrucciones returnF RCBRACKET

    LCBRACKET       shift and go to state 107
    LPAREN          shift and go to state 106


state 92

    (38) funcPa -> FUNC nombreFuncion LPAREN parametrosF . RPAREN LCBRACKET instrucciones RCBRACKET
    (40) funcCompleta -> FUNC nombreFuncion LPAREN parametrosF . RPAREN LPAREN datoReturn RPAREN LCBRACKET instrucciones returnF RCBRACKET

    RPAREN          shift and go to state 108


state 93

    (42) parametrosF -> VARIABLE . TDATA
    (43) parametrosF -> VARIABLE . TDATA COMMA parametrosF
    (49) TDATA -> . TSTRING
    (50) TDATA -> . TINT
    (51) TDATA -> . TFLOAT

    TSTRING         shift and go to state 70
    TINT            shift and go to state 71
    TFLOAT          shift and go to state 72

    TDATA                          shift and go to state 109

state 94

    (20) for -> FOR VARIABLE FASTDEC INT PUNTO_COMA . VARIABLE sigcomparacion INT PUNTO_COMA VARIABLE MASMAS LCBRACKET

    VARIABLE        shift and go to state 110


state 95

    (21) for2 -> FOR VARIABLE sigcomparacion INT LCBRACKET .

    $end            reduce using rule 21 (for2 -> FOR VARIABLE sigcomparacion INT LCBRACKET .)
    RCBRACKET       reduce using rule 21 (for2 -> FOR VARIABLE sigcomparacion INT LCBRACKET .)
    CASE            reduce using rule 21 (for2 -> FOR VARIABLE sigcomparacion INT LCBRACKET .)
    DEFAULT         reduce using rule 21 (for2 -> FOR VARIABLE sigcomparacion INT LCBRACKET .)
    RETURN          reduce using rule 21 (for2 -> FOR VARIABLE sigcomparacion INT LCBRACKET .)


state 96

    (48) mapa -> VARIABLE EQUALS MAP LBRACKET TDATA . RBRACKET TDATA LCBRACKET adentro RCBRACKET

    RBRACKET        shift and go to state 111


state 97

    (30) array -> VARIABLE FASTDEC LBRACKET INT TDATA . LCBRACKET elementArray RCBRACKET

    LCBRACKET       shift and go to state 112


state 98

    (66) ArraySemantica -> VARIABLE FASTDEC LBRACKET INT TINT . LCBRACKET elementIntS RCBRACKET
    (50) TDATA -> TINT .

  ! shift/reduce conflict for LCBRACKET resolved as shift
    LCBRACKET       shift and go to state 113

  ! LCBRACKET       [ reduce using rule 50 (TDATA -> TINT .) ]


state 99

    (55) si -> IF comparacion LCBRACKET instrucciones RCBRACKET .

    $end            reduce using rule 55 (si -> IF comparacion LCBRACKET instrucciones RCBRACKET .)
    RCBRACKET       reduce using rule 55 (si -> IF comparacion LCBRACKET instrucciones RCBRACKET .)
    CASE            reduce using rule 55 (si -> IF comparacion LCBRACKET instrucciones RCBRACKET .)
    DEFAULT         reduce using rule 55 (si -> IF comparacion LCBRACKET instrucciones RCBRACKET .)
    RETURN          reduce using rule 55 (si -> IF comparacion LCBRACKET instrucciones RCBRACKET .)


state 100

    (29) array -> VAR VARIABLE EQUALS LBRACKET INT . RBRACKET TDATA LCBRACKET elementArray RCBRACKET
    (65) ArraySemantica -> VAR VARIABLE EQUALS LBRACKET INT . RBRACKET TSTRING LCBRACKET elementStringS RCBRACKET

    RBRACKET        shift and go to state 114


state 101

    (60) varsimple -> VAR VARIABLE TDATA EQUALS dato .

    $end            reduce using rule 60 (varsimple -> VAR VARIABLE TDATA EQUALS dato .)
    RCBRACKET       reduce using rule 60 (varsimple -> VAR VARIABLE TDATA EQUALS dato .)
    CASE            reduce using rule 60 (varsimple -> VAR VARIABLE TDATA EQUALS dato .)
    DEFAULT         reduce using rule 60 (varsimple -> VAR VARIABLE TDATA EQUALS dato .)
    RETURN          reduce using rule 60 (varsimple -> VAR VARIABLE TDATA EQUALS dato .)


state 102

    (72) switchh -> SWITCH VARIABLE LCBRACKET cases def . RCBRACKET

    RCBRACKET       shift and go to state 115


state 103

    (76) def -> DEFAULT . COMMA instrucciones

    COMMA           shift and go to state 116


state 104

    (74) cases -> case1 cases .

    DEFAULT         reduce using rule 74 (cases -> case1 cases .)


state 105

    (75) case1 -> CASE INT . COLON instrucciones

    COLON           shift and go to state 117


state 106

    (39) funcRetorno -> FUNC nombreFuncion LPAREN RPAREN LPAREN . datoReturn RPAREN LCBRACKET instrucciones returnF RCBRACKET
    (44) datoReturn -> . TDATA
    (45) datoReturn -> . TDATA COMMA TDATA
    (49) TDATA -> . TSTRING
    (50) TDATA -> . TINT
    (51) TDATA -> . TFLOAT

    TSTRING         shift and go to state 70
    TINT            shift and go to state 71
    TFLOAT          shift and go to state 72

    datoReturn                     shift and go to state 118
    TDATA                          shift and go to state 119

state 107

    (37) funSimple -> FUNC nombreFuncion LPAREN RPAREN LCBRACKET . instrucciones RCBRACKET
    (1) instrucciones -> . impresion
    (2) instrucciones -> . for
    (3) instrucciones -> . for2
    (4) instrucciones -> . for3
    (5) instrucciones -> . mapa
    (6) instrucciones -> . si
    (7) instrucciones -> . array
    (8) instrucciones -> . funcion
    (9) instrucciones -> . concatDatos
    (10) instrucciones -> . ArraySemantica
    (11) instrucciones -> . switchh
    (12) instrucciones -> . asignaciones
    (13) instrucciones -> . expresionCondicion
    (14) impresion -> . PRINT LPAREN dato RPAREN
    (15) impresion -> . PRINTLN LPAREN dato RPAREN
    (20) for -> . FOR VARIABLE FASTDEC INT PUNTO_COMA VARIABLE sigcomparacion INT PUNTO_COMA VARIABLE MASMAS LCBRACKET
    (21) for2 -> . FOR VARIABLE sigcomparacion INT LCBRACKET
    (22) for3 -> . FOR LCBRACKET instrucciones RCBRACKET
    (48) mapa -> . VARIABLE EQUALS MAP LBRACKET TDATA RBRACKET TDATA LCBRACKET adentro RCBRACKET
    (55) si -> . IF comparacion LCBRACKET instrucciones RCBRACKET
    (29) array -> . VAR VARIABLE EQUALS LBRACKET INT RBRACKET TDATA LCBRACKET elementArray RCBRACKET
    (30) array -> . VARIABLE FASTDEC LBRACKET INT TDATA LCBRACKET elementArray RCBRACKET
    (33) funcion -> . funSimple
    (34) funcion -> . funcPa
    (35) funcion -> . funcRetorno
    (36) funcion -> . funcCompleta
    (63) concatDatos -> . STRING MAS STRING
    (64) concatDatos -> . INT MAS INT
    (65) ArraySemantica -> . VAR VARIABLE EQUALS LBRACKET INT RBRACKET TSTRING LCBRACKET elementStringS RCBRACKET
    (66) ArraySemantica -> . VARIABLE FASTDEC LBRACKET INT TINT LCBRACKET elementIntS RCBRACKET
    (72) switchh -> . SWITCH VARIABLE LCBRACKET cases def RCBRACKET
    (57) asignaciones -> . varsimple
    (58) asignaciones -> . varobviado
    (59) asignaciones -> . decfast
    (71) expresionCondicion -> . VARIABLE FASTDEC comparacion
    (37) funSimple -> . FUNC nombreFuncion LPAREN RPAREN LCBRACKET instrucciones RCBRACKET
    (38) funcPa -> . FUNC nombreFuncion LPAREN parametrosF RPAREN LCBRACKET instrucciones RCBRACKET
    (39) funcRetorno -> . FUNC nombreFuncion LPAREN RPAREN LPAREN datoReturn RPAREN LCBRACKET instrucciones returnF RCBRACKET
    (40) funcCompleta -> . FUNC nombreFuncion LPAREN parametrosF RPAREN LPAREN datoReturn RPAREN LCBRACKET instrucciones returnF RCBRACKET
    (60) varsimple -> . VAR VARIABLE TDATA EQUALS dato
    (61) varobviado -> . VAR VARIABLE EQUALS dato
    (62) decfast -> . VARIABLE FASTDEC dato

    PRINT           shift and go to state 15
    PRINTLN         shift and go to state 16
    FOR             shift and go to state 17
    VARIABLE        shift and go to state 18
    IF              shift and go to state 20
    VAR             shift and go to state 21
    STRING          shift and go to state 26
    INT             shift and go to state 19
    SWITCH          shift and go to state 27
    FUNC            shift and go to state 31

    instrucciones                  shift and go to state 120
    impresion                      shift and go to state 2
    for                            shift and go to state 3
    for2                           shift and go to state 4
    for3                           shift and go to state 5
    mapa                           shift and go to state 6
    si                             shift and go to state 7
    array                          shift and go to state 8
    funcion                        shift and go to state 9
    concatDatos                    shift and go to state 10
    ArraySemantica                 shift and go to state 11
    switchh                        shift and go to state 12
    asignaciones                   shift and go to state 13
    expresionCondicion             shift and go to state 14
    funSimple                      shift and go to state 22
    funcPa                         shift and go to state 23
    funcRetorno                    shift and go to state 24
    funcCompleta                   shift and go to state 25
    varsimple                      shift and go to state 28
    varobviado                     shift and go to state 29
    decfast                        shift and go to state 30

state 108

    (38) funcPa -> FUNC nombreFuncion LPAREN parametrosF RPAREN . LCBRACKET instrucciones RCBRACKET
    (40) funcCompleta -> FUNC nombreFuncion LPAREN parametrosF RPAREN . LPAREN datoReturn RPAREN LCBRACKET instrucciones returnF RCBRACKET

    LCBRACKET       shift and go to state 122
    LPAREN          shift and go to state 121


state 109

    (42) parametrosF -> VARIABLE TDATA .
    (43) parametrosF -> VARIABLE TDATA . COMMA parametrosF

    RPAREN          reduce using rule 42 (parametrosF -> VARIABLE TDATA .)
    COMMA           shift and go to state 123


state 110

    (20) for -> FOR VARIABLE FASTDEC INT PUNTO_COMA VARIABLE . sigcomparacion INT PUNTO_COMA VARIABLE MASMAS LCBRACKET
    (23) sigcomparacion -> . MENORQUE
    (24) sigcomparacion -> . MAYORQUE
    (25) sigcomparacion -> . DIFERENTE
    (26) sigcomparacion -> . COMPARA_IGUAL
    (27) sigcomparacion -> . MAYORIGUAL
    (28) sigcomparacion -> . MENORIGUAL

    MENORQUE        shift and go to state 54
    MAYORQUE        shift and go to state 55
    DIFERENTE       shift and go to state 56
    COMPARA_IGUAL   shift and go to state 57
    MAYORIGUAL      shift and go to state 58
    MENORIGUAL      shift and go to state 59

    sigcomparacion                 shift and go to state 124

state 111

    (48) mapa -> VARIABLE EQUALS MAP LBRACKET TDATA RBRACKET . TDATA LCBRACKET adentro RCBRACKET
    (49) TDATA -> . TSTRING
    (50) TDATA -> . TINT
    (51) TDATA -> . TFLOAT

    TSTRING         shift and go to state 70
    TINT            shift and go to state 71
    TFLOAT          shift and go to state 72

    TDATA                          shift and go to state 125

state 112

    (30) array -> VARIABLE FASTDEC LBRACKET INT TDATA LCBRACKET . elementArray RCBRACKET
    (31) elementArray -> . dato
    (32) elementArray -> . dato COMMA elementArray
    (16) dato -> . INT
    (17) dato -> . STRING
    (18) dato -> . FLOAT
    (19) dato -> . VARIABLE

    INT             shift and go to state 41
    STRING          shift and go to state 42
    FLOAT           shift and go to state 43
    VARIABLE        shift and go to state 44

    elementArray                   shift and go to state 126
    dato                           shift and go to state 127

state 113

    (66) ArraySemantica -> VARIABLE FASTDEC LBRACKET INT TINT LCBRACKET . elementIntS RCBRACKET
    (69) elementIntS -> . INT
    (70) elementIntS -> . INT COMMA elementIntS

    INT             shift and go to state 128

    elementIntS                    shift and go to state 129

state 114

    (29) array -> VAR VARIABLE EQUALS LBRACKET INT RBRACKET . TDATA LCBRACKET elementArray RCBRACKET
    (65) ArraySemantica -> VAR VARIABLE EQUALS LBRACKET INT RBRACKET . TSTRING LCBRACKET elementStringS RCBRACKET
    (49) TDATA -> . TSTRING
    (50) TDATA -> . TINT
    (51) TDATA -> . TFLOAT

    TSTRING         shift and go to state 131
    TINT            shift and go to state 71
    TFLOAT          shift and go to state 72

    TDATA                          shift and go to state 130

state 115

    (72) switchh -> SWITCH VARIABLE LCBRACKET cases def RCBRACKET .

    $end            reduce using rule 72 (switchh -> SWITCH VARIABLE LCBRACKET cases def RCBRACKET .)
    RCBRACKET       reduce using rule 72 (switchh -> SWITCH VARIABLE LCBRACKET cases def RCBRACKET .)
    CASE            reduce using rule 72 (switchh -> SWITCH VARIABLE LCBRACKET cases def RCBRACKET .)
    DEFAULT         reduce using rule 72 (switchh -> SWITCH VARIABLE LCBRACKET cases def RCBRACKET .)
    RETURN          reduce using rule 72 (switchh -> SWITCH VARIABLE LCBRACKET cases def RCBRACKET .)


state 116

    (76) def -> DEFAULT COMMA . instrucciones
    (1) instrucciones -> . impresion
    (2) instrucciones -> . for
    (3) instrucciones -> . for2
    (4) instrucciones -> . for3
    (5) instrucciones -> . mapa
    (6) instrucciones -> . si
    (7) instrucciones -> . array
    (8) instrucciones -> . funcion
    (9) instrucciones -> . concatDatos
    (10) instrucciones -> . ArraySemantica
    (11) instrucciones -> . switchh
    (12) instrucciones -> . asignaciones
    (13) instrucciones -> . expresionCondicion
    (14) impresion -> . PRINT LPAREN dato RPAREN
    (15) impresion -> . PRINTLN LPAREN dato RPAREN
    (20) for -> . FOR VARIABLE FASTDEC INT PUNTO_COMA VARIABLE sigcomparacion INT PUNTO_COMA VARIABLE MASMAS LCBRACKET
    (21) for2 -> . FOR VARIABLE sigcomparacion INT LCBRACKET
    (22) for3 -> . FOR LCBRACKET instrucciones RCBRACKET
    (48) mapa -> . VARIABLE EQUALS MAP LBRACKET TDATA RBRACKET TDATA LCBRACKET adentro RCBRACKET
    (55) si -> . IF comparacion LCBRACKET instrucciones RCBRACKET
    (29) array -> . VAR VARIABLE EQUALS LBRACKET INT RBRACKET TDATA LCBRACKET elementArray RCBRACKET
    (30) array -> . VARIABLE FASTDEC LBRACKET INT TDATA LCBRACKET elementArray RCBRACKET
    (33) funcion -> . funSimple
    (34) funcion -> . funcPa
    (35) funcion -> . funcRetorno
    (36) funcion -> . funcCompleta
    (63) concatDatos -> . STRING MAS STRING
    (64) concatDatos -> . INT MAS INT
    (65) ArraySemantica -> . VAR VARIABLE EQUALS LBRACKET INT RBRACKET TSTRING LCBRACKET elementStringS RCBRACKET
    (66) ArraySemantica -> . VARIABLE FASTDEC LBRACKET INT TINT LCBRACKET elementIntS RCBRACKET
    (72) switchh -> . SWITCH VARIABLE LCBRACKET cases def RCBRACKET
    (57) asignaciones -> . varsimple
    (58) asignaciones -> . varobviado
    (59) asignaciones -> . decfast
    (71) expresionCondicion -> . VARIABLE FASTDEC comparacion
    (37) funSimple -> . FUNC nombreFuncion LPAREN RPAREN LCBRACKET instrucciones RCBRACKET
    (38) funcPa -> . FUNC nombreFuncion LPAREN parametrosF RPAREN LCBRACKET instrucciones RCBRACKET
    (39) funcRetorno -> . FUNC nombreFuncion LPAREN RPAREN LPAREN datoReturn RPAREN LCBRACKET instrucciones returnF RCBRACKET
    (40) funcCompleta -> . FUNC nombreFuncion LPAREN parametrosF RPAREN LPAREN datoReturn RPAREN LCBRACKET instrucciones returnF RCBRACKET
    (60) varsimple -> . VAR VARIABLE TDATA EQUALS dato
    (61) varobviado -> . VAR VARIABLE EQUALS dato
    (62) decfast -> . VARIABLE FASTDEC dato

    PRINT           shift and go to state 15
    PRINTLN         shift and go to state 16
    FOR             shift and go to state 17
    VARIABLE        shift and go to state 18
    IF              shift and go to state 20
    VAR             shift and go to state 21
    STRING          shift and go to state 26
    INT             shift and go to state 19
    SWITCH          shift and go to state 27
    FUNC            shift and go to state 31

    instrucciones                  shift and go to state 132
    impresion                      shift and go to state 2
    for                            shift and go to state 3
    for2                           shift and go to state 4
    for3                           shift and go to state 5
    mapa                           shift and go to state 6
    si                             shift and go to state 7
    array                          shift and go to state 8
    funcion                        shift and go to state 9
    concatDatos                    shift and go to state 10
    ArraySemantica                 shift and go to state 11
    switchh                        shift and go to state 12
    asignaciones                   shift and go to state 13
    expresionCondicion             shift and go to state 14
    funSimple                      shift and go to state 22
    funcPa                         shift and go to state 23
    funcRetorno                    shift and go to state 24
    funcCompleta                   shift and go to state 25
    varsimple                      shift and go to state 28
    varobviado                     shift and go to state 29
    decfast                        shift and go to state 30

state 117

    (75) case1 -> CASE INT COLON . instrucciones
    (1) instrucciones -> . impresion
    (2) instrucciones -> . for
    (3) instrucciones -> . for2
    (4) instrucciones -> . for3
    (5) instrucciones -> . mapa
    (6) instrucciones -> . si
    (7) instrucciones -> . array
    (8) instrucciones -> . funcion
    (9) instrucciones -> . concatDatos
    (10) instrucciones -> . ArraySemantica
    (11) instrucciones -> . switchh
    (12) instrucciones -> . asignaciones
    (13) instrucciones -> . expresionCondicion
    (14) impresion -> . PRINT LPAREN dato RPAREN
    (15) impresion -> . PRINTLN LPAREN dato RPAREN
    (20) for -> . FOR VARIABLE FASTDEC INT PUNTO_COMA VARIABLE sigcomparacion INT PUNTO_COMA VARIABLE MASMAS LCBRACKET
    (21) for2 -> . FOR VARIABLE sigcomparacion INT LCBRACKET
    (22) for3 -> . FOR LCBRACKET instrucciones RCBRACKET
    (48) mapa -> . VARIABLE EQUALS MAP LBRACKET TDATA RBRACKET TDATA LCBRACKET adentro RCBRACKET
    (55) si -> . IF comparacion LCBRACKET instrucciones RCBRACKET
    (29) array -> . VAR VARIABLE EQUALS LBRACKET INT RBRACKET TDATA LCBRACKET elementArray RCBRACKET
    (30) array -> . VARIABLE FASTDEC LBRACKET INT TDATA LCBRACKET elementArray RCBRACKET
    (33) funcion -> . funSimple
    (34) funcion -> . funcPa
    (35) funcion -> . funcRetorno
    (36) funcion -> . funcCompleta
    (63) concatDatos -> . STRING MAS STRING
    (64) concatDatos -> . INT MAS INT
    (65) ArraySemantica -> . VAR VARIABLE EQUALS LBRACKET INT RBRACKET TSTRING LCBRACKET elementStringS RCBRACKET
    (66) ArraySemantica -> . VARIABLE FASTDEC LBRACKET INT TINT LCBRACKET elementIntS RCBRACKET
    (72) switchh -> . SWITCH VARIABLE LCBRACKET cases def RCBRACKET
    (57) asignaciones -> . varsimple
    (58) asignaciones -> . varobviado
    (59) asignaciones -> . decfast
    (71) expresionCondicion -> . VARIABLE FASTDEC comparacion
    (37) funSimple -> . FUNC nombreFuncion LPAREN RPAREN LCBRACKET instrucciones RCBRACKET
    (38) funcPa -> . FUNC nombreFuncion LPAREN parametrosF RPAREN LCBRACKET instrucciones RCBRACKET
    (39) funcRetorno -> . FUNC nombreFuncion LPAREN RPAREN LPAREN datoReturn RPAREN LCBRACKET instrucciones returnF RCBRACKET
    (40) funcCompleta -> . FUNC nombreFuncion LPAREN parametrosF RPAREN LPAREN datoReturn RPAREN LCBRACKET instrucciones returnF RCBRACKET
    (60) varsimple -> . VAR VARIABLE TDATA EQUALS dato
    (61) varobviado -> . VAR VARIABLE EQUALS dato
    (62) decfast -> . VARIABLE FASTDEC dato

    PRINT           shift and go to state 15
    PRINTLN         shift and go to state 16
    FOR             shift and go to state 17
    VARIABLE        shift and go to state 18
    IF              shift and go to state 20
    VAR             shift and go to state 21
    STRING          shift and go to state 26
    INT             shift and go to state 19
    SWITCH          shift and go to state 27
    FUNC            shift and go to state 31

    instrucciones                  shift and go to state 133
    impresion                      shift and go to state 2
    for                            shift and go to state 3
    for2                           shift and go to state 4
    for3                           shift and go to state 5
    mapa                           shift and go to state 6
    si                             shift and go to state 7
    array                          shift and go to state 8
    funcion                        shift and go to state 9
    concatDatos                    shift and go to state 10
    ArraySemantica                 shift and go to state 11
    switchh                        shift and go to state 12
    asignaciones                   shift and go to state 13
    expresionCondicion             shift and go to state 14
    funSimple                      shift and go to state 22
    funcPa                         shift and go to state 23
    funcRetorno                    shift and go to state 24
    funcCompleta                   shift and go to state 25
    varsimple                      shift and go to state 28
    varobviado                     shift and go to state 29
    decfast                        shift and go to state 30

state 118

    (39) funcRetorno -> FUNC nombreFuncion LPAREN RPAREN LPAREN datoReturn . RPAREN LCBRACKET instrucciones returnF RCBRACKET

    RPAREN          shift and go to state 134


state 119

    (44) datoReturn -> TDATA .
    (45) datoReturn -> TDATA . COMMA TDATA

    RPAREN          reduce using rule 44 (datoReturn -> TDATA .)
    COMMA           shift and go to state 135


state 120

    (37) funSimple -> FUNC nombreFuncion LPAREN RPAREN LCBRACKET instrucciones . RCBRACKET

    RCBRACKET       shift and go to state 136


state 121

    (40) funcCompleta -> FUNC nombreFuncion LPAREN parametrosF RPAREN LPAREN . datoReturn RPAREN LCBRACKET instrucciones returnF RCBRACKET
    (44) datoReturn -> . TDATA
    (45) datoReturn -> . TDATA COMMA TDATA
    (49) TDATA -> . TSTRING
    (50) TDATA -> . TINT
    (51) TDATA -> . TFLOAT

    TSTRING         shift and go to state 70
    TINT            shift and go to state 71
    TFLOAT          shift and go to state 72

    datoReturn                     shift and go to state 137
    TDATA                          shift and go to state 119

state 122

    (38) funcPa -> FUNC nombreFuncion LPAREN parametrosF RPAREN LCBRACKET . instrucciones RCBRACKET
    (1) instrucciones -> . impresion
    (2) instrucciones -> . for
    (3) instrucciones -> . for2
    (4) instrucciones -> . for3
    (5) instrucciones -> . mapa
    (6) instrucciones -> . si
    (7) instrucciones -> . array
    (8) instrucciones -> . funcion
    (9) instrucciones -> . concatDatos
    (10) instrucciones -> . ArraySemantica
    (11) instrucciones -> . switchh
    (12) instrucciones -> . asignaciones
    (13) instrucciones -> . expresionCondicion
    (14) impresion -> . PRINT LPAREN dato RPAREN
    (15) impresion -> . PRINTLN LPAREN dato RPAREN
    (20) for -> . FOR VARIABLE FASTDEC INT PUNTO_COMA VARIABLE sigcomparacion INT PUNTO_COMA VARIABLE MASMAS LCBRACKET
    (21) for2 -> . FOR VARIABLE sigcomparacion INT LCBRACKET
    (22) for3 -> . FOR LCBRACKET instrucciones RCBRACKET
    (48) mapa -> . VARIABLE EQUALS MAP LBRACKET TDATA RBRACKET TDATA LCBRACKET adentro RCBRACKET
    (55) si -> . IF comparacion LCBRACKET instrucciones RCBRACKET
    (29) array -> . VAR VARIABLE EQUALS LBRACKET INT RBRACKET TDATA LCBRACKET elementArray RCBRACKET
    (30) array -> . VARIABLE FASTDEC LBRACKET INT TDATA LCBRACKET elementArray RCBRACKET
    (33) funcion -> . funSimple
    (34) funcion -> . funcPa
    (35) funcion -> . funcRetorno
    (36) funcion -> . funcCompleta
    (63) concatDatos -> . STRING MAS STRING
    (64) concatDatos -> . INT MAS INT
    (65) ArraySemantica -> . VAR VARIABLE EQUALS LBRACKET INT RBRACKET TSTRING LCBRACKET elementStringS RCBRACKET
    (66) ArraySemantica -> . VARIABLE FASTDEC LBRACKET INT TINT LCBRACKET elementIntS RCBRACKET
    (72) switchh -> . SWITCH VARIABLE LCBRACKET cases def RCBRACKET
    (57) asignaciones -> . varsimple
    (58) asignaciones -> . varobviado
    (59) asignaciones -> . decfast
    (71) expresionCondicion -> . VARIABLE FASTDEC comparacion
    (37) funSimple -> . FUNC nombreFuncion LPAREN RPAREN LCBRACKET instrucciones RCBRACKET
    (38) funcPa -> . FUNC nombreFuncion LPAREN parametrosF RPAREN LCBRACKET instrucciones RCBRACKET
    (39) funcRetorno -> . FUNC nombreFuncion LPAREN RPAREN LPAREN datoReturn RPAREN LCBRACKET instrucciones returnF RCBRACKET
    (40) funcCompleta -> . FUNC nombreFuncion LPAREN parametrosF RPAREN LPAREN datoReturn RPAREN LCBRACKET instrucciones returnF RCBRACKET
    (60) varsimple -> . VAR VARIABLE TDATA EQUALS dato
    (61) varobviado -> . VAR VARIABLE EQUALS dato
    (62) decfast -> . VARIABLE FASTDEC dato

    PRINT           shift and go to state 15
    PRINTLN         shift and go to state 16
    FOR             shift and go to state 17
    VARIABLE        shift and go to state 18
    IF              shift and go to state 20
    VAR             shift and go to state 21
    STRING          shift and go to state 26
    INT             shift and go to state 19
    SWITCH          shift and go to state 27
    FUNC            shift and go to state 31

    instrucciones                  shift and go to state 138
    impresion                      shift and go to state 2
    for                            shift and go to state 3
    for2                           shift and go to state 4
    for3                           shift and go to state 5
    mapa                           shift and go to state 6
    si                             shift and go to state 7
    array                          shift and go to state 8
    funcion                        shift and go to state 9
    concatDatos                    shift and go to state 10
    ArraySemantica                 shift and go to state 11
    switchh                        shift and go to state 12
    asignaciones                   shift and go to state 13
    expresionCondicion             shift and go to state 14
    funSimple                      shift and go to state 22
    funcPa                         shift and go to state 23
    funcRetorno                    shift and go to state 24
    funcCompleta                   shift and go to state 25
    varsimple                      shift and go to state 28
    varobviado                     shift and go to state 29
    decfast                        shift and go to state 30

state 123

    (43) parametrosF -> VARIABLE TDATA COMMA . parametrosF
    (42) parametrosF -> . VARIABLE TDATA
    (43) parametrosF -> . VARIABLE TDATA COMMA parametrosF

    VARIABLE        shift and go to state 93

    parametrosF                    shift and go to state 139

state 124

    (20) for -> FOR VARIABLE FASTDEC INT PUNTO_COMA VARIABLE sigcomparacion . INT PUNTO_COMA VARIABLE MASMAS LCBRACKET

    INT             shift and go to state 140


state 125

    (48) mapa -> VARIABLE EQUALS MAP LBRACKET TDATA RBRACKET TDATA . LCBRACKET adentro RCBRACKET

    LCBRACKET       shift and go to state 141


state 126

    (30) array -> VARIABLE FASTDEC LBRACKET INT TDATA LCBRACKET elementArray . RCBRACKET

    RCBRACKET       shift and go to state 142


state 127

    (31) elementArray -> dato .
    (32) elementArray -> dato . COMMA elementArray

    RCBRACKET       reduce using rule 31 (elementArray -> dato .)
    COMMA           shift and go to state 143


state 128

    (69) elementIntS -> INT .
    (70) elementIntS -> INT . COMMA elementIntS

    RCBRACKET       reduce using rule 69 (elementIntS -> INT .)
    COMMA           shift and go to state 144


state 129

    (66) ArraySemantica -> VARIABLE FASTDEC LBRACKET INT TINT LCBRACKET elementIntS . RCBRACKET

    RCBRACKET       shift and go to state 145


state 130

    (29) array -> VAR VARIABLE EQUALS LBRACKET INT RBRACKET TDATA . LCBRACKET elementArray RCBRACKET

    LCBRACKET       shift and go to state 146


state 131

    (65) ArraySemantica -> VAR VARIABLE EQUALS LBRACKET INT RBRACKET TSTRING . LCBRACKET elementStringS RCBRACKET
    (49) TDATA -> TSTRING .

  ! shift/reduce conflict for LCBRACKET resolved as shift
    LCBRACKET       shift and go to state 147

  ! LCBRACKET       [ reduce using rule 49 (TDATA -> TSTRING .) ]


state 132

    (76) def -> DEFAULT COMMA instrucciones .

    RCBRACKET       reduce using rule 76 (def -> DEFAULT COMMA instrucciones .)


state 133

    (75) case1 -> CASE INT COLON instrucciones .

    CASE            reduce using rule 75 (case1 -> CASE INT COLON instrucciones .)
    DEFAULT         reduce using rule 75 (case1 -> CASE INT COLON instrucciones .)


state 134

    (39) funcRetorno -> FUNC nombreFuncion LPAREN RPAREN LPAREN datoReturn RPAREN . LCBRACKET instrucciones returnF RCBRACKET

    LCBRACKET       shift and go to state 148


state 135

    (45) datoReturn -> TDATA COMMA . TDATA
    (49) TDATA -> . TSTRING
    (50) TDATA -> . TINT
    (51) TDATA -> . TFLOAT

    TSTRING         shift and go to state 70
    TINT            shift and go to state 71
    TFLOAT          shift and go to state 72

    TDATA                          shift and go to state 149

state 136

    (37) funSimple -> FUNC nombreFuncion LPAREN RPAREN LCBRACKET instrucciones RCBRACKET .

    $end            reduce using rule 37 (funSimple -> FUNC nombreFuncion LPAREN RPAREN LCBRACKET instrucciones RCBRACKET .)
    RCBRACKET       reduce using rule 37 (funSimple -> FUNC nombreFuncion LPAREN RPAREN LCBRACKET instrucciones RCBRACKET .)
    CASE            reduce using rule 37 (funSimple -> FUNC nombreFuncion LPAREN RPAREN LCBRACKET instrucciones RCBRACKET .)
    DEFAULT         reduce using rule 37 (funSimple -> FUNC nombreFuncion LPAREN RPAREN LCBRACKET instrucciones RCBRACKET .)
    RETURN          reduce using rule 37 (funSimple -> FUNC nombreFuncion LPAREN RPAREN LCBRACKET instrucciones RCBRACKET .)


state 137

    (40) funcCompleta -> FUNC nombreFuncion LPAREN parametrosF RPAREN LPAREN datoReturn . RPAREN LCBRACKET instrucciones returnF RCBRACKET

    RPAREN          shift and go to state 150


state 138

    (38) funcPa -> FUNC nombreFuncion LPAREN parametrosF RPAREN LCBRACKET instrucciones . RCBRACKET

    RCBRACKET       shift and go to state 151


state 139

    (43) parametrosF -> VARIABLE TDATA COMMA parametrosF .

    RPAREN          reduce using rule 43 (parametrosF -> VARIABLE TDATA COMMA parametrosF .)


state 140

    (20) for -> FOR VARIABLE FASTDEC INT PUNTO_COMA VARIABLE sigcomparacion INT . PUNTO_COMA VARIABLE MASMAS LCBRACKET

    PUNTO_COMA      shift and go to state 152


state 141

    (48) mapa -> VARIABLE EQUALS MAP LBRACKET TDATA RBRACKET TDATA LCBRACKET . adentro RCBRACKET
    (52) adentro -> . definicion
    (53) adentro -> . definicion COMMA adentro
    (54) definicion -> . dato COLON dato
    (16) dato -> . INT
    (17) dato -> . STRING
    (18) dato -> . FLOAT
    (19) dato -> . VARIABLE

    INT             shift and go to state 41
    STRING          shift and go to state 42
    FLOAT           shift and go to state 43
    VARIABLE        shift and go to state 44

    adentro                        shift and go to state 153
    definicion                     shift and go to state 154
    dato                           shift and go to state 155

state 142

    (30) array -> VARIABLE FASTDEC LBRACKET INT TDATA LCBRACKET elementArray RCBRACKET .

    $end            reduce using rule 30 (array -> VARIABLE FASTDEC LBRACKET INT TDATA LCBRACKET elementArray RCBRACKET .)
    RCBRACKET       reduce using rule 30 (array -> VARIABLE FASTDEC LBRACKET INT TDATA LCBRACKET elementArray RCBRACKET .)
    CASE            reduce using rule 30 (array -> VARIABLE FASTDEC LBRACKET INT TDATA LCBRACKET elementArray RCBRACKET .)
    DEFAULT         reduce using rule 30 (array -> VARIABLE FASTDEC LBRACKET INT TDATA LCBRACKET elementArray RCBRACKET .)
    RETURN          reduce using rule 30 (array -> VARIABLE FASTDEC LBRACKET INT TDATA LCBRACKET elementArray RCBRACKET .)


state 143

    (32) elementArray -> dato COMMA . elementArray
    (31) elementArray -> . dato
    (32) elementArray -> . dato COMMA elementArray
    (16) dato -> . INT
    (17) dato -> . STRING
    (18) dato -> . FLOAT
    (19) dato -> . VARIABLE

    INT             shift and go to state 41
    STRING          shift and go to state 42
    FLOAT           shift and go to state 43
    VARIABLE        shift and go to state 44

    dato                           shift and go to state 127
    elementArray                   shift and go to state 156

state 144

    (70) elementIntS -> INT COMMA . elementIntS
    (69) elementIntS -> . INT
    (70) elementIntS -> . INT COMMA elementIntS

    INT             shift and go to state 128

    elementIntS                    shift and go to state 157

state 145

    (66) ArraySemantica -> VARIABLE FASTDEC LBRACKET INT TINT LCBRACKET elementIntS RCBRACKET .

    $end            reduce using rule 66 (ArraySemantica -> VARIABLE FASTDEC LBRACKET INT TINT LCBRACKET elementIntS RCBRACKET .)
    RCBRACKET       reduce using rule 66 (ArraySemantica -> VARIABLE FASTDEC LBRACKET INT TINT LCBRACKET elementIntS RCBRACKET .)
    CASE            reduce using rule 66 (ArraySemantica -> VARIABLE FASTDEC LBRACKET INT TINT LCBRACKET elementIntS RCBRACKET .)
    DEFAULT         reduce using rule 66 (ArraySemantica -> VARIABLE FASTDEC LBRACKET INT TINT LCBRACKET elementIntS RCBRACKET .)
    RETURN          reduce using rule 66 (ArraySemantica -> VARIABLE FASTDEC LBRACKET INT TINT LCBRACKET elementIntS RCBRACKET .)


state 146

    (29) array -> VAR VARIABLE EQUALS LBRACKET INT RBRACKET TDATA LCBRACKET . elementArray RCBRACKET
    (31) elementArray -> . dato
    (32) elementArray -> . dato COMMA elementArray
    (16) dato -> . INT
    (17) dato -> . STRING
    (18) dato -> . FLOAT
    (19) dato -> . VARIABLE

    INT             shift and go to state 41
    STRING          shift and go to state 42
    FLOAT           shift and go to state 43
    VARIABLE        shift and go to state 44

    elementArray                   shift and go to state 158
    dato                           shift and go to state 127

state 147

    (65) ArraySemantica -> VAR VARIABLE EQUALS LBRACKET INT RBRACKET TSTRING LCBRACKET . elementStringS RCBRACKET
    (67) elementStringS -> . STRING
    (68) elementStringS -> . STRING COMMA elementStringS

    STRING          shift and go to state 160

    elementStringS                 shift and go to state 159

state 148

    (39) funcRetorno -> FUNC nombreFuncion LPAREN RPAREN LPAREN datoReturn RPAREN LCBRACKET . instrucciones returnF RCBRACKET
    (1) instrucciones -> . impresion
    (2) instrucciones -> . for
    (3) instrucciones -> . for2
    (4) instrucciones -> . for3
    (5) instrucciones -> . mapa
    (6) instrucciones -> . si
    (7) instrucciones -> . array
    (8) instrucciones -> . funcion
    (9) instrucciones -> . concatDatos
    (10) instrucciones -> . ArraySemantica
    (11) instrucciones -> . switchh
    (12) instrucciones -> . asignaciones
    (13) instrucciones -> . expresionCondicion
    (14) impresion -> . PRINT LPAREN dato RPAREN
    (15) impresion -> . PRINTLN LPAREN dato RPAREN
    (20) for -> . FOR VARIABLE FASTDEC INT PUNTO_COMA VARIABLE sigcomparacion INT PUNTO_COMA VARIABLE MASMAS LCBRACKET
    (21) for2 -> . FOR VARIABLE sigcomparacion INT LCBRACKET
    (22) for3 -> . FOR LCBRACKET instrucciones RCBRACKET
    (48) mapa -> . VARIABLE EQUALS MAP LBRACKET TDATA RBRACKET TDATA LCBRACKET adentro RCBRACKET
    (55) si -> . IF comparacion LCBRACKET instrucciones RCBRACKET
    (29) array -> . VAR VARIABLE EQUALS LBRACKET INT RBRACKET TDATA LCBRACKET elementArray RCBRACKET
    (30) array -> . VARIABLE FASTDEC LBRACKET INT TDATA LCBRACKET elementArray RCBRACKET
    (33) funcion -> . funSimple
    (34) funcion -> . funcPa
    (35) funcion -> . funcRetorno
    (36) funcion -> . funcCompleta
    (63) concatDatos -> . STRING MAS STRING
    (64) concatDatos -> . INT MAS INT
    (65) ArraySemantica -> . VAR VARIABLE EQUALS LBRACKET INT RBRACKET TSTRING LCBRACKET elementStringS RCBRACKET
    (66) ArraySemantica -> . VARIABLE FASTDEC LBRACKET INT TINT LCBRACKET elementIntS RCBRACKET
    (72) switchh -> . SWITCH VARIABLE LCBRACKET cases def RCBRACKET
    (57) asignaciones -> . varsimple
    (58) asignaciones -> . varobviado
    (59) asignaciones -> . decfast
    (71) expresionCondicion -> . VARIABLE FASTDEC comparacion
    (37) funSimple -> . FUNC nombreFuncion LPAREN RPAREN LCBRACKET instrucciones RCBRACKET
    (38) funcPa -> . FUNC nombreFuncion LPAREN parametrosF RPAREN LCBRACKET instrucciones RCBRACKET
    (39) funcRetorno -> . FUNC nombreFuncion LPAREN RPAREN LPAREN datoReturn RPAREN LCBRACKET instrucciones returnF RCBRACKET
    (40) funcCompleta -> . FUNC nombreFuncion LPAREN parametrosF RPAREN LPAREN datoReturn RPAREN LCBRACKET instrucciones returnF RCBRACKET
    (60) varsimple -> . VAR VARIABLE TDATA EQUALS dato
    (61) varobviado -> . VAR VARIABLE EQUALS dato
    (62) decfast -> . VARIABLE FASTDEC dato

    PRINT           shift and go to state 15
    PRINTLN         shift and go to state 16
    FOR             shift and go to state 17
    VARIABLE        shift and go to state 18
    IF              shift and go to state 20
    VAR             shift and go to state 21
    STRING          shift and go to state 26
    INT             shift and go to state 19
    SWITCH          shift and go to state 27
    FUNC            shift and go to state 31

    instrucciones                  shift and go to state 161
    impresion                      shift and go to state 2
    for                            shift and go to state 3
    for2                           shift and go to state 4
    for3                           shift and go to state 5
    mapa                           shift and go to state 6
    si                             shift and go to state 7
    array                          shift and go to state 8
    funcion                        shift and go to state 9
    concatDatos                    shift and go to state 10
    ArraySemantica                 shift and go to state 11
    switchh                        shift and go to state 12
    asignaciones                   shift and go to state 13
    expresionCondicion             shift and go to state 14
    funSimple                      shift and go to state 22
    funcPa                         shift and go to state 23
    funcRetorno                    shift and go to state 24
    funcCompleta                   shift and go to state 25
    varsimple                      shift and go to state 28
    varobviado                     shift and go to state 29
    decfast                        shift and go to state 30

state 149

    (45) datoReturn -> TDATA COMMA TDATA .

    RPAREN          reduce using rule 45 (datoReturn -> TDATA COMMA TDATA .)


state 150

    (40) funcCompleta -> FUNC nombreFuncion LPAREN parametrosF RPAREN LPAREN datoReturn RPAREN . LCBRACKET instrucciones returnF RCBRACKET

    LCBRACKET       shift and go to state 162


state 151

    (38) funcPa -> FUNC nombreFuncion LPAREN parametrosF RPAREN LCBRACKET instrucciones RCBRACKET .

    $end            reduce using rule 38 (funcPa -> FUNC nombreFuncion LPAREN parametrosF RPAREN LCBRACKET instrucciones RCBRACKET .)
    RCBRACKET       reduce using rule 38 (funcPa -> FUNC nombreFuncion LPAREN parametrosF RPAREN LCBRACKET instrucciones RCBRACKET .)
    CASE            reduce using rule 38 (funcPa -> FUNC nombreFuncion LPAREN parametrosF RPAREN LCBRACKET instrucciones RCBRACKET .)
    DEFAULT         reduce using rule 38 (funcPa -> FUNC nombreFuncion LPAREN parametrosF RPAREN LCBRACKET instrucciones RCBRACKET .)
    RETURN          reduce using rule 38 (funcPa -> FUNC nombreFuncion LPAREN parametrosF RPAREN LCBRACKET instrucciones RCBRACKET .)


state 152

    (20) for -> FOR VARIABLE FASTDEC INT PUNTO_COMA VARIABLE sigcomparacion INT PUNTO_COMA . VARIABLE MASMAS LCBRACKET

    VARIABLE        shift and go to state 163


state 153

    (48) mapa -> VARIABLE EQUALS MAP LBRACKET TDATA RBRACKET TDATA LCBRACKET adentro . RCBRACKET

    RCBRACKET       shift and go to state 164


state 154

    (52) adentro -> definicion .
    (53) adentro -> definicion . COMMA adentro

    RCBRACKET       reduce using rule 52 (adentro -> definicion .)
    COMMA           shift and go to state 165


state 155

    (54) definicion -> dato . COLON dato

    COLON           shift and go to state 166


state 156

    (32) elementArray -> dato COMMA elementArray .

    RCBRACKET       reduce using rule 32 (elementArray -> dato COMMA elementArray .)


state 157

    (70) elementIntS -> INT COMMA elementIntS .

    RCBRACKET       reduce using rule 70 (elementIntS -> INT COMMA elementIntS .)


state 158

    (29) array -> VAR VARIABLE EQUALS LBRACKET INT RBRACKET TDATA LCBRACKET elementArray . RCBRACKET

    RCBRACKET       shift and go to state 167


state 159

    (65) ArraySemantica -> VAR VARIABLE EQUALS LBRACKET INT RBRACKET TSTRING LCBRACKET elementStringS . RCBRACKET

    RCBRACKET       shift and go to state 168


state 160

    (67) elementStringS -> STRING .
    (68) elementStringS -> STRING . COMMA elementStringS

    RCBRACKET       reduce using rule 67 (elementStringS -> STRING .)
    COMMA           shift and go to state 169


state 161

    (39) funcRetorno -> FUNC nombreFuncion LPAREN RPAREN LPAREN datoReturn RPAREN LCBRACKET instrucciones . returnF RCBRACKET
    (46) returnF -> . RETURN dato
    (47) returnF -> . RETURN elementArray

    RETURN          shift and go to state 171

    returnF                        shift and go to state 170

state 162

    (40) funcCompleta -> FUNC nombreFuncion LPAREN parametrosF RPAREN LPAREN datoReturn RPAREN LCBRACKET . instrucciones returnF RCBRACKET
    (1) instrucciones -> . impresion
    (2) instrucciones -> . for
    (3) instrucciones -> . for2
    (4) instrucciones -> . for3
    (5) instrucciones -> . mapa
    (6) instrucciones -> . si
    (7) instrucciones -> . array
    (8) instrucciones -> . funcion
    (9) instrucciones -> . concatDatos
    (10) instrucciones -> . ArraySemantica
    (11) instrucciones -> . switchh
    (12) instrucciones -> . asignaciones
    (13) instrucciones -> . expresionCondicion
    (14) impresion -> . PRINT LPAREN dato RPAREN
    (15) impresion -> . PRINTLN LPAREN dato RPAREN
    (20) for -> . FOR VARIABLE FASTDEC INT PUNTO_COMA VARIABLE sigcomparacion INT PUNTO_COMA VARIABLE MASMAS LCBRACKET
    (21) for2 -> . FOR VARIABLE sigcomparacion INT LCBRACKET
    (22) for3 -> . FOR LCBRACKET instrucciones RCBRACKET
    (48) mapa -> . VARIABLE EQUALS MAP LBRACKET TDATA RBRACKET TDATA LCBRACKET adentro RCBRACKET
    (55) si -> . IF comparacion LCBRACKET instrucciones RCBRACKET
    (29) array -> . VAR VARIABLE EQUALS LBRACKET INT RBRACKET TDATA LCBRACKET elementArray RCBRACKET
    (30) array -> . VARIABLE FASTDEC LBRACKET INT TDATA LCBRACKET elementArray RCBRACKET
    (33) funcion -> . funSimple
    (34) funcion -> . funcPa
    (35) funcion -> . funcRetorno
    (36) funcion -> . funcCompleta
    (63) concatDatos -> . STRING MAS STRING
    (64) concatDatos -> . INT MAS INT
    (65) ArraySemantica -> . VAR VARIABLE EQUALS LBRACKET INT RBRACKET TSTRING LCBRACKET elementStringS RCBRACKET
    (66) ArraySemantica -> . VARIABLE FASTDEC LBRACKET INT TINT LCBRACKET elementIntS RCBRACKET
    (72) switchh -> . SWITCH VARIABLE LCBRACKET cases def RCBRACKET
    (57) asignaciones -> . varsimple
    (58) asignaciones -> . varobviado
    (59) asignaciones -> . decfast
    (71) expresionCondicion -> . VARIABLE FASTDEC comparacion
    (37) funSimple -> . FUNC nombreFuncion LPAREN RPAREN LCBRACKET instrucciones RCBRACKET
    (38) funcPa -> . FUNC nombreFuncion LPAREN parametrosF RPAREN LCBRACKET instrucciones RCBRACKET
    (39) funcRetorno -> . FUNC nombreFuncion LPAREN RPAREN LPAREN datoReturn RPAREN LCBRACKET instrucciones returnF RCBRACKET
    (40) funcCompleta -> . FUNC nombreFuncion LPAREN parametrosF RPAREN LPAREN datoReturn RPAREN LCBRACKET instrucciones returnF RCBRACKET
    (60) varsimple -> . VAR VARIABLE TDATA EQUALS dato
    (61) varobviado -> . VAR VARIABLE EQUALS dato
    (62) decfast -> . VARIABLE FASTDEC dato

    PRINT           shift and go to state 15
    PRINTLN         shift and go to state 16
    FOR             shift and go to state 17
    VARIABLE        shift and go to state 18
    IF              shift and go to state 20
    VAR             shift and go to state 21
    STRING          shift and go to state 26
    INT             shift and go to state 19
    SWITCH          shift and go to state 27
    FUNC            shift and go to state 31

    instrucciones                  shift and go to state 172
    impresion                      shift and go to state 2
    for                            shift and go to state 3
    for2                           shift and go to state 4
    for3                           shift and go to state 5
    mapa                           shift and go to state 6
    si                             shift and go to state 7
    array                          shift and go to state 8
    funcion                        shift and go to state 9
    concatDatos                    shift and go to state 10
    ArraySemantica                 shift and go to state 11
    switchh                        shift and go to state 12
    asignaciones                   shift and go to state 13
    expresionCondicion             shift and go to state 14
    funSimple                      shift and go to state 22
    funcPa                         shift and go to state 23
    funcRetorno                    shift and go to state 24
    funcCompleta                   shift and go to state 25
    varsimple                      shift and go to state 28
    varobviado                     shift and go to state 29
    decfast                        shift and go to state 30

state 163

    (20) for -> FOR VARIABLE FASTDEC INT PUNTO_COMA VARIABLE sigcomparacion INT PUNTO_COMA VARIABLE . MASMAS LCBRACKET

    MASMAS          shift and go to state 173


state 164

    (48) mapa -> VARIABLE EQUALS MAP LBRACKET TDATA RBRACKET TDATA LCBRACKET adentro RCBRACKET .

    $end            reduce using rule 48 (mapa -> VARIABLE EQUALS MAP LBRACKET TDATA RBRACKET TDATA LCBRACKET adentro RCBRACKET .)
    RCBRACKET       reduce using rule 48 (mapa -> VARIABLE EQUALS MAP LBRACKET TDATA RBRACKET TDATA LCBRACKET adentro RCBRACKET .)
    CASE            reduce using rule 48 (mapa -> VARIABLE EQUALS MAP LBRACKET TDATA RBRACKET TDATA LCBRACKET adentro RCBRACKET .)
    DEFAULT         reduce using rule 48 (mapa -> VARIABLE EQUALS MAP LBRACKET TDATA RBRACKET TDATA LCBRACKET adentro RCBRACKET .)
    RETURN          reduce using rule 48 (mapa -> VARIABLE EQUALS MAP LBRACKET TDATA RBRACKET TDATA LCBRACKET adentro RCBRACKET .)


state 165

    (53) adentro -> definicion COMMA . adentro
    (52) adentro -> . definicion
    (53) adentro -> . definicion COMMA adentro
    (54) definicion -> . dato COLON dato
    (16) dato -> . INT
    (17) dato -> . STRING
    (18) dato -> . FLOAT
    (19) dato -> . VARIABLE

    INT             shift and go to state 41
    STRING          shift and go to state 42
    FLOAT           shift and go to state 43
    VARIABLE        shift and go to state 44

    definicion                     shift and go to state 154
    adentro                        shift and go to state 174
    dato                           shift and go to state 155

state 166

    (54) definicion -> dato COLON . dato
    (16) dato -> . INT
    (17) dato -> . STRING
    (18) dato -> . FLOAT
    (19) dato -> . VARIABLE

    INT             shift and go to state 41
    STRING          shift and go to state 42
    FLOAT           shift and go to state 43
    VARIABLE        shift and go to state 44

    dato                           shift and go to state 175

state 167

    (29) array -> VAR VARIABLE EQUALS LBRACKET INT RBRACKET TDATA LCBRACKET elementArray RCBRACKET .

    $end            reduce using rule 29 (array -> VAR VARIABLE EQUALS LBRACKET INT RBRACKET TDATA LCBRACKET elementArray RCBRACKET .)
    RCBRACKET       reduce using rule 29 (array -> VAR VARIABLE EQUALS LBRACKET INT RBRACKET TDATA LCBRACKET elementArray RCBRACKET .)
    CASE            reduce using rule 29 (array -> VAR VARIABLE EQUALS LBRACKET INT RBRACKET TDATA LCBRACKET elementArray RCBRACKET .)
    DEFAULT         reduce using rule 29 (array -> VAR VARIABLE EQUALS LBRACKET INT RBRACKET TDATA LCBRACKET elementArray RCBRACKET .)
    RETURN          reduce using rule 29 (array -> VAR VARIABLE EQUALS LBRACKET INT RBRACKET TDATA LCBRACKET elementArray RCBRACKET .)


state 168

    (65) ArraySemantica -> VAR VARIABLE EQUALS LBRACKET INT RBRACKET TSTRING LCBRACKET elementStringS RCBRACKET .

    $end            reduce using rule 65 (ArraySemantica -> VAR VARIABLE EQUALS LBRACKET INT RBRACKET TSTRING LCBRACKET elementStringS RCBRACKET .)
    RCBRACKET       reduce using rule 65 (ArraySemantica -> VAR VARIABLE EQUALS LBRACKET INT RBRACKET TSTRING LCBRACKET elementStringS RCBRACKET .)
    CASE            reduce using rule 65 (ArraySemantica -> VAR VARIABLE EQUALS LBRACKET INT RBRACKET TSTRING LCBRACKET elementStringS RCBRACKET .)
    DEFAULT         reduce using rule 65 (ArraySemantica -> VAR VARIABLE EQUALS LBRACKET INT RBRACKET TSTRING LCBRACKET elementStringS RCBRACKET .)
    RETURN          reduce using rule 65 (ArraySemantica -> VAR VARIABLE EQUALS LBRACKET INT RBRACKET TSTRING LCBRACKET elementStringS RCBRACKET .)


state 169

    (68) elementStringS -> STRING COMMA . elementStringS
    (67) elementStringS -> . STRING
    (68) elementStringS -> . STRING COMMA elementStringS

    STRING          shift and go to state 160

    elementStringS                 shift and go to state 176

state 170

    (39) funcRetorno -> FUNC nombreFuncion LPAREN RPAREN LPAREN datoReturn RPAREN LCBRACKET instrucciones returnF . RCBRACKET

    RCBRACKET       shift and go to state 177


state 171

    (46) returnF -> RETURN . dato
    (47) returnF -> RETURN . elementArray
    (16) dato -> . INT
    (17) dato -> . STRING
    (18) dato -> . FLOAT
    (19) dato -> . VARIABLE
    (31) elementArray -> . dato
    (32) elementArray -> . dato COMMA elementArray

    INT             shift and go to state 41
    STRING          shift and go to state 42
    FLOAT           shift and go to state 43
    VARIABLE        shift and go to state 44

    dato                           shift and go to state 178
    elementArray                   shift and go to state 179

state 172

    (40) funcCompleta -> FUNC nombreFuncion LPAREN parametrosF RPAREN LPAREN datoReturn RPAREN LCBRACKET instrucciones . returnF RCBRACKET
    (46) returnF -> . RETURN dato
    (47) returnF -> . RETURN elementArray

    RETURN          shift and go to state 171

    returnF                        shift and go to state 180

state 173

    (20) for -> FOR VARIABLE FASTDEC INT PUNTO_COMA VARIABLE sigcomparacion INT PUNTO_COMA VARIABLE MASMAS . LCBRACKET

    LCBRACKET       shift and go to state 181


state 174

    (53) adentro -> definicion COMMA adentro .

    RCBRACKET       reduce using rule 53 (adentro -> definicion COMMA adentro .)


state 175

    (54) definicion -> dato COLON dato .

    COMMA           reduce using rule 54 (definicion -> dato COLON dato .)
    RCBRACKET       reduce using rule 54 (definicion -> dato COLON dato .)


state 176

    (68) elementStringS -> STRING COMMA elementStringS .

    RCBRACKET       reduce using rule 68 (elementStringS -> STRING COMMA elementStringS .)


state 177

    (39) funcRetorno -> FUNC nombreFuncion LPAREN RPAREN LPAREN datoReturn RPAREN LCBRACKET instrucciones returnF RCBRACKET .

    $end            reduce using rule 39 (funcRetorno -> FUNC nombreFuncion LPAREN RPAREN LPAREN datoReturn RPAREN LCBRACKET instrucciones returnF RCBRACKET .)
    RCBRACKET       reduce using rule 39 (funcRetorno -> FUNC nombreFuncion LPAREN RPAREN LPAREN datoReturn RPAREN LCBRACKET instrucciones returnF RCBRACKET .)
    CASE            reduce using rule 39 (funcRetorno -> FUNC nombreFuncion LPAREN RPAREN LPAREN datoReturn RPAREN LCBRACKET instrucciones returnF RCBRACKET .)
    DEFAULT         reduce using rule 39 (funcRetorno -> FUNC nombreFuncion LPAREN RPAREN LPAREN datoReturn RPAREN LCBRACKET instrucciones returnF RCBRACKET .)
    RETURN          reduce using rule 39 (funcRetorno -> FUNC nombreFuncion LPAREN RPAREN LPAREN datoReturn RPAREN LCBRACKET instrucciones returnF RCBRACKET .)


state 178

    (46) returnF -> RETURN dato .
    (31) elementArray -> dato .
    (32) elementArray -> dato . COMMA elementArray

  ! reduce/reduce conflict for RCBRACKET resolved using rule 31 (elementArray -> dato .)
    RCBRACKET       reduce using rule 31 (elementArray -> dato .)
    COMMA           shift and go to state 143

  ! RCBRACKET       [ reduce using rule 46 (returnF -> RETURN dato .) ]


state 179

    (47) returnF -> RETURN elementArray .

    RCBRACKET       reduce using rule 47 (returnF -> RETURN elementArray .)


state 180

    (40) funcCompleta -> FUNC nombreFuncion LPAREN parametrosF RPAREN LPAREN datoReturn RPAREN LCBRACKET instrucciones returnF . RCBRACKET

    RCBRACKET       shift and go to state 182


state 181

    (20) for -> FOR VARIABLE FASTDEC INT PUNTO_COMA VARIABLE sigcomparacion INT PUNTO_COMA VARIABLE MASMAS LCBRACKET .

    $end            reduce using rule 20 (for -> FOR VARIABLE FASTDEC INT PUNTO_COMA VARIABLE sigcomparacion INT PUNTO_COMA VARIABLE MASMAS LCBRACKET .)
    RCBRACKET       reduce using rule 20 (for -> FOR VARIABLE FASTDEC INT PUNTO_COMA VARIABLE sigcomparacion INT PUNTO_COMA VARIABLE MASMAS LCBRACKET .)
    CASE            reduce using rule 20 (for -> FOR VARIABLE FASTDEC INT PUNTO_COMA VARIABLE sigcomparacion INT PUNTO_COMA VARIABLE MASMAS LCBRACKET .)
    DEFAULT         reduce using rule 20 (for -> FOR VARIABLE FASTDEC INT PUNTO_COMA VARIABLE sigcomparacion INT PUNTO_COMA VARIABLE MASMAS LCBRACKET .)
    RETURN          reduce using rule 20 (for -> FOR VARIABLE FASTDEC INT PUNTO_COMA VARIABLE sigcomparacion INT PUNTO_COMA VARIABLE MASMAS LCBRACKET .)


state 182

    (40) funcCompleta -> FUNC nombreFuncion LPAREN parametrosF RPAREN LPAREN datoReturn RPAREN LCBRACKET instrucciones returnF RCBRACKET .

    $end            reduce using rule 40 (funcCompleta -> FUNC nombreFuncion LPAREN parametrosF RPAREN LPAREN datoReturn RPAREN LCBRACKET instrucciones returnF RCBRACKET .)
    RCBRACKET       reduce using rule 40 (funcCompleta -> FUNC nombreFuncion LPAREN parametrosF RPAREN LPAREN datoReturn RPAREN LCBRACKET instrucciones returnF RCBRACKET .)
    CASE            reduce using rule 40 (funcCompleta -> FUNC nombreFuncion LPAREN parametrosF RPAREN LPAREN datoReturn RPAREN LCBRACKET instrucciones returnF RCBRACKET .)
    DEFAULT         reduce using rule 40 (funcCompleta -> FUNC nombreFuncion LPAREN parametrosF RPAREN LPAREN datoReturn RPAREN LCBRACKET instrucciones returnF RCBRACKET .)
    RETURN          reduce using rule 40 (funcCompleta -> FUNC nombreFuncion LPAREN parametrosF RPAREN LPAREN datoReturn RPAREN LCBRACKET instrucciones returnF RCBRACKET .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LCBRACKET in state 98 resolved as shift
WARNING: shift/reduce conflict for LCBRACKET in state 131 resolved as shift
WARNING: reduce/reduce conflict in state 178 resolved using rule (elementArray -> dato)
WARNING: rejected rule (returnF -> RETURN dato) in state 178
WARNING: Rule (returnF -> RETURN dato) is never reduced
