Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    BREAK
    CASE
    COLON
    COMMA
    COMPARA_IGUAL
    COMPLEJO
    DEFAULT
    DIFERENTE
    DIVISION
    DQMARK
    ELSE
    EQUALS
    FLOTANTE
    FOR
    FUNC
    IF
    IMPORT
    INCREMENT
    LBRACKET
    LCBRACKET
    MAP
    MAS
    MAYORQUE
    MENORQUE
    MENOS
    PRINTLN
    PRODUCTO
    PUNTO_COMA
    RBRACKET
    RCBRACKET
    RETURN
    SELECT
    STRUCT
    SWITCH
    TINT
    TSTRING
    VARIABLE

Grammar

Rule 0     S' -> instrucciones
Rule 1     instrucciones -> impresion
Rule 2     impresion -> PRINT LPAREN valor RPAREN
Rule 3     valor -> INT
Rule 4     valor -> STRING

Terminals, with rules where they appear

BREAK                : 
CASE                 : 
COLON                : 
COMMA                : 
COMPARA_IGUAL        : 
COMPLEJO             : 
DEFAULT              : 
DIFERENTE            : 
DIVISION             : 
DQMARK               : 
ELSE                 : 
EQUALS               : 
FLOTANTE             : 
FOR                  : 
FUNC                 : 
IF                   : 
IMPORT               : 
INCREMENT            : 
INT                  : 3
LBRACKET             : 
LCBRACKET            : 
LPAREN               : 2
MAP                  : 
MAS                  : 
MAYORQUE             : 
MENORQUE             : 
MENOS                : 
PRINT                : 2
PRINTLN              : 
PRODUCTO             : 
PUNTO_COMA           : 
RBRACKET             : 
RCBRACKET            : 
RETURN               : 
RPAREN               : 2
SELECT               : 
STRING               : 4
STRUCT               : 
SWITCH               : 
TINT                 : 
TSTRING              : 
VARIABLE             : 
error                : 

Nonterminals, with rules where they appear

impresion            : 1
instrucciones        : 0
valor                : 2

Parsing method: LALR

state 0

    (0) S' -> . instrucciones
    (1) instrucciones -> . impresion
    (2) impresion -> . PRINT LPAREN valor RPAREN

    PRINT           shift and go to state 3

    instrucciones                  shift and go to state 1
    impresion                      shift and go to state 2

state 1

    (0) S' -> instrucciones .



state 2

    (1) instrucciones -> impresion .

    $end            reduce using rule 1 (instrucciones -> impresion .)


state 3

    (2) impresion -> PRINT . LPAREN valor RPAREN

    LPAREN          shift and go to state 4


state 4

    (2) impresion -> PRINT LPAREN . valor RPAREN
    (3) valor -> . INT
    (4) valor -> . STRING

    INT             shift and go to state 6
    STRING          shift and go to state 7

    valor                          shift and go to state 5

state 5

    (2) impresion -> PRINT LPAREN valor . RPAREN

    RPAREN          shift and go to state 8


state 6

    (3) valor -> INT .

    RPAREN          reduce using rule 3 (valor -> INT .)


state 7

    (4) valor -> STRING .

    RPAREN          reduce using rule 4 (valor -> STRING .)


state 8

    (2) impresion -> PRINT LPAREN valor RPAREN .

    $end            reduce using rule 2 (impresion -> PRINT LPAREN valor RPAREN .)

